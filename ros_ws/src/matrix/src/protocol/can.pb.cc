// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: can.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "can.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CANProto {

namespace {

const ::google::protobuf::Descriptor* VehSpeed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehSpeed_reflection_ = NULL;
const ::google::protobuf::Descriptor* WheelAngle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WheelAngle_reflection_ = NULL;
const ::google::protobuf::Descriptor* Gear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gear_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurnSignal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurnSignal_reflection_ = NULL;
const ::google::protobuf::Descriptor* CANIMU_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CANIMU_reflection_ = NULL;
const ::google::protobuf::Descriptor* CANFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CANFrame_reflection_ = NULL;
const ::google::protobuf::Descriptor* CANFrameRaw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CANFrameRaw_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_can_2eproto() {
  protobuf_AddDesc_can_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "can.proto");
  GOOGLE_CHECK(file != NULL);
  VehSpeed_descriptor_ = file->message_type(0);
  static const int VehSpeed_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehSpeed, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehSpeed, time_stamp_),
  };
  VehSpeed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VehSpeed_descriptor_,
      VehSpeed::default_instance_,
      VehSpeed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehSpeed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehSpeed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VehSpeed));
  WheelAngle_descriptor_ = file->message_type(1);
  static const int WheelAngle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelAngle, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelAngle, time_stamp_),
  };
  WheelAngle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WheelAngle_descriptor_,
      WheelAngle::default_instance_,
      WheelAngle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelAngle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelAngle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WheelAngle));
  Gear_descriptor_ = file->message_type(2);
  static const int Gear_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gear, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gear, time_stamp_),
  };
  Gear_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Gear_descriptor_,
      Gear::default_instance_,
      Gear_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gear, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gear, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Gear));
  TurnSignal_descriptor_ = file->message_type(3);
  static const int TurnSignal_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnSignal, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnSignal, time_stamp_),
  };
  TurnSignal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurnSignal_descriptor_,
      TurnSignal::default_instance_,
      TurnSignal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnSignal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnSignal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurnSignal));
  CANIMU_descriptor_ = file->message_type(4);
  static const int CANIMU_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANIMU, acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANIMU, yaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANIMU, yaw_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANIMU, time_stamp_),
  };
  CANIMU_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CANIMU_descriptor_,
      CANIMU::default_instance_,
      CANIMU_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANIMU, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANIMU, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CANIMU));
  CANFrame_descriptor_ = file->message_type(5);
  static const int CANFrame_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANFrame, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANFrame, gt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANFrame, sp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANFrame, wa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANFrame, imu_),
  };
  CANFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CANFrame_descriptor_,
      CANFrame::default_instance_,
      CANFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CANFrame));
  CANFrameRaw_descriptor_ = file->message_type(6);
  static const int CANFrameRaw_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANFrameRaw, can_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANFrameRaw, can_dlc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANFrameRaw, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANFrameRaw, time_stamp_),
  };
  CANFrameRaw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CANFrameRaw_descriptor_,
      CANFrameRaw::default_instance_,
      CANFrameRaw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANFrameRaw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANFrameRaw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CANFrameRaw));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_can_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VehSpeed_descriptor_, &VehSpeed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WheelAngle_descriptor_, &WheelAngle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Gear_descriptor_, &Gear::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurnSignal_descriptor_, &TurnSignal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CANIMU_descriptor_, &CANIMU::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CANFrame_descriptor_, &CANFrame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CANFrameRaw_descriptor_, &CANFrameRaw::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_can_2eproto() {
  delete VehSpeed::default_instance_;
  delete VehSpeed_reflection_;
  delete WheelAngle::default_instance_;
  delete WheelAngle_reflection_;
  delete Gear::default_instance_;
  delete Gear_reflection_;
  delete TurnSignal::default_instance_;
  delete TurnSignal_reflection_;
  delete CANIMU::default_instance_;
  delete CANIMU_reflection_;
  delete CANFrame::default_instance_;
  delete CANFrame_reflection_;
  delete CANFrameRaw::default_instance_;
  delete CANFrameRaw_reflection_;
}

void protobuf_AddDesc_can_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tcan.proto\022\010CANProto\"-\n\010VehSpeed\022\r\n\005spe"
    "ed\030\001 \002(\002\022\022\n\ntime_stamp\030\002 \002(\003\"/\n\nWheelAng"
    "le\022\r\n\005angle\030\001 \002(\002\022\022\n\ntime_stamp\030\002 \002(\003\"(\n"
    "\004Gear\022\014\n\004type\030\001 \002(\005\022\022\n\ntime_stamp\030\002 \002(\003\""
    ".\n\nTurnSignal\022\014\n\004type\030\001 \002(\005\022\022\n\ntime_stam"
    "p\030\002 \002(\003\"H\n\006CANIMU\022\013\n\003acc\030\001 \001(\002\022\013\n\003yaw\030\004 "
    "\001(\002\022\020\n\010yaw_rate\030\007 \001(\002\022\022\n\ntime_stamp\0302 \001("
    "\003\"\251\001\n\010CANFrame\022 \n\002ts\030\001 \003(\0132\024.CANProto.Tu"
    "rnSignal\022\032\n\002gt\030\002 \003(\0132\016.CANProto.Gear\022\036\n\002"
    "sp\030\003 \003(\0132\022.CANProto.VehSpeed\022 \n\002wa\030\004 \003(\013"
    "2\024.CANProto.WheelAngle\022\035\n\003imu\030\005 \003(\0132\020.CA"
    "NProto.CANIMU\"P\n\013CANFrameRaw\022\016\n\006can_id\030\001"
    " \002(\005\022\017\n\007can_dlc\030\002 \002(\005\022\014\n\004data\030\003 \003(\005\022\022\n\nt"
    "ime_stamp\030\004 \002(\003", 535);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "can.proto", &protobuf_RegisterTypes);
  VehSpeed::default_instance_ = new VehSpeed();
  WheelAngle::default_instance_ = new WheelAngle();
  Gear::default_instance_ = new Gear();
  TurnSignal::default_instance_ = new TurnSignal();
  CANIMU::default_instance_ = new CANIMU();
  CANFrame::default_instance_ = new CANFrame();
  CANFrameRaw::default_instance_ = new CANFrameRaw();
  VehSpeed::default_instance_->InitAsDefaultInstance();
  WheelAngle::default_instance_->InitAsDefaultInstance();
  Gear::default_instance_->InitAsDefaultInstance();
  TurnSignal::default_instance_->InitAsDefaultInstance();
  CANIMU::default_instance_->InitAsDefaultInstance();
  CANFrame::default_instance_->InitAsDefaultInstance();
  CANFrameRaw::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_can_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_can_2eproto {
  StaticDescriptorInitializer_can_2eproto() {
    protobuf_AddDesc_can_2eproto();
  }
} static_descriptor_initializer_can_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int VehSpeed::kSpeedFieldNumber;
const int VehSpeed::kTimeStampFieldNumber;
#endif  // !_MSC_VER

VehSpeed::VehSpeed()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CANProto.VehSpeed)
}

void VehSpeed::InitAsDefaultInstance() {
}

VehSpeed::VehSpeed(const VehSpeed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CANProto.VehSpeed)
}

void VehSpeed::SharedCtor() {
  _cached_size_ = 0;
  speed_ = 0;
  time_stamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VehSpeed::~VehSpeed() {
  // @@protoc_insertion_point(destructor:CANProto.VehSpeed)
  SharedDtor();
}

void VehSpeed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VehSpeed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehSpeed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehSpeed_descriptor_;
}

const VehSpeed& VehSpeed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_can_2eproto();
  return *default_instance_;
}

VehSpeed* VehSpeed::default_instance_ = NULL;

VehSpeed* VehSpeed::New() const {
  return new VehSpeed;
}

void VehSpeed::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VehSpeed*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(time_stamp_, speed_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VehSpeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CANProto.VehSpeed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float speed = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_stamp;
        break;
      }

      // required int64 time_stamp = 2;
      case 2: {
        if (tag == 16) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CANProto.VehSpeed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CANProto.VehSpeed)
  return false;
#undef DO_
}

void VehSpeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CANProto.VehSpeed)
  // required float speed = 1;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->speed(), output);
  }

  // required int64 time_stamp = 2;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CANProto.VehSpeed)
}

::google::protobuf::uint8* VehSpeed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CANProto.VehSpeed)
  // required float speed = 1;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->speed(), target);
  }

  // required int64 time_stamp = 2;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CANProto.VehSpeed)
  return target;
}

int VehSpeed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float speed = 1;
    if (has_speed()) {
      total_size += 1 + 4;
    }

    // required int64 time_stamp = 2;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_stamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehSpeed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VehSpeed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VehSpeed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VehSpeed::MergeFrom(const VehSpeed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VehSpeed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehSpeed::CopyFrom(const VehSpeed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehSpeed::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void VehSpeed::Swap(VehSpeed* other) {
  if (other != this) {
    std::swap(speed_, other->speed_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VehSpeed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehSpeed_descriptor_;
  metadata.reflection = VehSpeed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WheelAngle::kAngleFieldNumber;
const int WheelAngle::kTimeStampFieldNumber;
#endif  // !_MSC_VER

WheelAngle::WheelAngle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CANProto.WheelAngle)
}

void WheelAngle::InitAsDefaultInstance() {
}

WheelAngle::WheelAngle(const WheelAngle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CANProto.WheelAngle)
}

void WheelAngle::SharedCtor() {
  _cached_size_ = 0;
  angle_ = 0;
  time_stamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WheelAngle::~WheelAngle() {
  // @@protoc_insertion_point(destructor:CANProto.WheelAngle)
  SharedDtor();
}

void WheelAngle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WheelAngle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WheelAngle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WheelAngle_descriptor_;
}

const WheelAngle& WheelAngle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_can_2eproto();
  return *default_instance_;
}

WheelAngle* WheelAngle::default_instance_ = NULL;

WheelAngle* WheelAngle::New() const {
  return new WheelAngle;
}

void WheelAngle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WheelAngle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(time_stamp_, angle_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WheelAngle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CANProto.WheelAngle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float angle = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_stamp;
        break;
      }

      // required int64 time_stamp = 2;
      case 2: {
        if (tag == 16) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CANProto.WheelAngle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CANProto.WheelAngle)
  return false;
#undef DO_
}

void WheelAngle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CANProto.WheelAngle)
  // required float angle = 1;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->angle(), output);
  }

  // required int64 time_stamp = 2;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CANProto.WheelAngle)
}

::google::protobuf::uint8* WheelAngle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CANProto.WheelAngle)
  // required float angle = 1;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->angle(), target);
  }

  // required int64 time_stamp = 2;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CANProto.WheelAngle)
  return target;
}

int WheelAngle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float angle = 1;
    if (has_angle()) {
      total_size += 1 + 4;
    }

    // required int64 time_stamp = 2;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_stamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WheelAngle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WheelAngle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WheelAngle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WheelAngle::MergeFrom(const WheelAngle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WheelAngle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WheelAngle::CopyFrom(const WheelAngle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WheelAngle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void WheelAngle::Swap(WheelAngle* other) {
  if (other != this) {
    std::swap(angle_, other->angle_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WheelAngle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WheelAngle_descriptor_;
  metadata.reflection = WheelAngle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Gear::kTypeFieldNumber;
const int Gear::kTimeStampFieldNumber;
#endif  // !_MSC_VER

Gear::Gear()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CANProto.Gear)
}

void Gear::InitAsDefaultInstance() {
}

Gear::Gear(const Gear& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CANProto.Gear)
}

void Gear::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  time_stamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gear::~Gear() {
  // @@protoc_insertion_point(destructor:CANProto.Gear)
  SharedDtor();
}

void Gear::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Gear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gear_descriptor_;
}

const Gear& Gear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_can_2eproto();
  return *default_instance_;
}

Gear* Gear::default_instance_ = NULL;

Gear* Gear::New() const {
  return new Gear;
}

void Gear::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Gear*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(time_stamp_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Gear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CANProto.Gear)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_stamp;
        break;
      }

      // required int64 time_stamp = 2;
      case 2: {
        if (tag == 16) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CANProto.Gear)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CANProto.Gear)
  return false;
#undef DO_
}

void Gear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CANProto.Gear)
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int64 time_stamp = 2;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CANProto.Gear)
}

::google::protobuf::uint8* Gear::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CANProto.Gear)
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int64 time_stamp = 2;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CANProto.Gear)
  return target;
}

int Gear::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int64 time_stamp = 2;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_stamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gear::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Gear* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gear*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gear::MergeFrom(const Gear& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Gear::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gear::CopyFrom(const Gear& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gear::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Gear::Swap(Gear* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Gear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gear_descriptor_;
  metadata.reflection = Gear_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurnSignal::kTypeFieldNumber;
const int TurnSignal::kTimeStampFieldNumber;
#endif  // !_MSC_VER

TurnSignal::TurnSignal()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CANProto.TurnSignal)
}

void TurnSignal::InitAsDefaultInstance() {
}

TurnSignal::TurnSignal(const TurnSignal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CANProto.TurnSignal)
}

void TurnSignal::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  time_stamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurnSignal::~TurnSignal() {
  // @@protoc_insertion_point(destructor:CANProto.TurnSignal)
  SharedDtor();
}

void TurnSignal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurnSignal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnSignal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnSignal_descriptor_;
}

const TurnSignal& TurnSignal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_can_2eproto();
  return *default_instance_;
}

TurnSignal* TurnSignal::default_instance_ = NULL;

TurnSignal* TurnSignal::New() const {
  return new TurnSignal;
}

void TurnSignal::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TurnSignal*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(time_stamp_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurnSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CANProto.TurnSignal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_stamp;
        break;
      }

      // required int64 time_stamp = 2;
      case 2: {
        if (tag == 16) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CANProto.TurnSignal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CANProto.TurnSignal)
  return false;
#undef DO_
}

void TurnSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CANProto.TurnSignal)
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int64 time_stamp = 2;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CANProto.TurnSignal)
}

::google::protobuf::uint8* TurnSignal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CANProto.TurnSignal)
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int64 time_stamp = 2;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CANProto.TurnSignal)
  return target;
}

int TurnSignal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int64 time_stamp = 2;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_stamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnSignal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurnSignal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurnSignal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurnSignal::MergeFrom(const TurnSignal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurnSignal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnSignal::CopyFrom(const TurnSignal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnSignal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TurnSignal::Swap(TurnSignal* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurnSignal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurnSignal_descriptor_;
  metadata.reflection = TurnSignal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CANIMU::kAccFieldNumber;
const int CANIMU::kYawFieldNumber;
const int CANIMU::kYawRateFieldNumber;
const int CANIMU::kTimeStampFieldNumber;
#endif  // !_MSC_VER

CANIMU::CANIMU()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CANProto.CANIMU)
}

void CANIMU::InitAsDefaultInstance() {
}

CANIMU::CANIMU(const CANIMU& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CANProto.CANIMU)
}

void CANIMU::SharedCtor() {
  _cached_size_ = 0;
  acc_ = 0;
  yaw_ = 0;
  yaw_rate_ = 0;
  time_stamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CANIMU::~CANIMU() {
  // @@protoc_insertion_point(destructor:CANProto.CANIMU)
  SharedDtor();
}

void CANIMU::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CANIMU::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CANIMU::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CANIMU_descriptor_;
}

const CANIMU& CANIMU::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_can_2eproto();
  return *default_instance_;
}

CANIMU* CANIMU::default_instance_ = NULL;

CANIMU* CANIMU::New() const {
  return new CANIMU;
}

void CANIMU::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CANIMU*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(acc_, yaw_rate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CANIMU::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CANProto.CANIMU)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float acc = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_)));
          set_has_acc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_yaw;
        break;
      }

      // optional float yaw = 4;
      case 4: {
        if (tag == 37) {
         parse_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
          set_has_yaw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_yaw_rate;
        break;
      }

      // optional float yaw_rate = 7;
      case 7: {
        if (tag == 61) {
         parse_yaw_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_rate_)));
          set_has_yaw_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_time_stamp;
        break;
      }

      // optional int64 time_stamp = 50;
      case 50: {
        if (tag == 400) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CANProto.CANIMU)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CANProto.CANIMU)
  return false;
#undef DO_
}

void CANIMU::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CANProto.CANIMU)
  // optional float acc = 1;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->acc(), output);
  }

  // optional float yaw = 4;
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->yaw(), output);
  }

  // optional float yaw_rate = 7;
  if (has_yaw_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->yaw_rate(), output);
  }

  // optional int64 time_stamp = 50;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(50, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CANProto.CANIMU)
}

::google::protobuf::uint8* CANIMU::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CANProto.CANIMU)
  // optional float acc = 1;
  if (has_acc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->acc(), target);
  }

  // optional float yaw = 4;
  if (has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->yaw(), target);
  }

  // optional float yaw_rate = 7;
  if (has_yaw_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->yaw_rate(), target);
  }

  // optional int64 time_stamp = 50;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(50, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CANProto.CANIMU)
  return target;
}

int CANIMU::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float acc = 1;
    if (has_acc()) {
      total_size += 1 + 4;
    }

    // optional float yaw = 4;
    if (has_yaw()) {
      total_size += 1 + 4;
    }

    // optional float yaw_rate = 7;
    if (has_yaw_rate()) {
      total_size += 1 + 4;
    }

    // optional int64 time_stamp = 50;
    if (has_time_stamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_stamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CANIMU::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CANIMU* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CANIMU*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CANIMU::MergeFrom(const CANIMU& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acc()) {
      set_acc(from.acc());
    }
    if (from.has_yaw()) {
      set_yaw(from.yaw());
    }
    if (from.has_yaw_rate()) {
      set_yaw_rate(from.yaw_rate());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CANIMU::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CANIMU::CopyFrom(const CANIMU& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CANIMU::IsInitialized() const {

  return true;
}

void CANIMU::Swap(CANIMU* other) {
  if (other != this) {
    std::swap(acc_, other->acc_);
    std::swap(yaw_, other->yaw_);
    std::swap(yaw_rate_, other->yaw_rate_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CANIMU::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CANIMU_descriptor_;
  metadata.reflection = CANIMU_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CANFrame::kTsFieldNumber;
const int CANFrame::kGtFieldNumber;
const int CANFrame::kSpFieldNumber;
const int CANFrame::kWaFieldNumber;
const int CANFrame::kImuFieldNumber;
#endif  // !_MSC_VER

CANFrame::CANFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CANProto.CANFrame)
}

void CANFrame::InitAsDefaultInstance() {
}

CANFrame::CANFrame(const CANFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CANProto.CANFrame)
}

void CANFrame::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CANFrame::~CANFrame() {
  // @@protoc_insertion_point(destructor:CANProto.CANFrame)
  SharedDtor();
}

void CANFrame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CANFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CANFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CANFrame_descriptor_;
}

const CANFrame& CANFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_can_2eproto();
  return *default_instance_;
}

CANFrame* CANFrame::default_instance_ = NULL;

CANFrame* CANFrame::New() const {
  return new CANFrame;
}

void CANFrame::Clear() {
  ts_.Clear();
  gt_.Clear();
  sp_.Clear();
  wa_.Clear();
  imu_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CANFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CANProto.CANFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CANProto.TurnSignal ts = 1;
      case 1: {
        if (tag == 10) {
         parse_ts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ts;
        if (input->ExpectTag(18)) goto parse_gt;
        break;
      }

      // repeated .CANProto.Gear gt = 2;
      case 2: {
        if (tag == 18) {
         parse_gt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gt;
        if (input->ExpectTag(26)) goto parse_sp;
        break;
      }

      // repeated .CANProto.VehSpeed sp = 3;
      case 3: {
        if (tag == 26) {
         parse_sp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sp;
        if (input->ExpectTag(34)) goto parse_wa;
        break;
      }

      // repeated .CANProto.WheelAngle wa = 4;
      case 4: {
        if (tag == 34) {
         parse_wa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wa()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_wa;
        if (input->ExpectTag(42)) goto parse_imu;
        break;
      }

      // repeated .CANProto.CANIMU imu = 5;
      case 5: {
        if (tag == 42) {
         parse_imu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_imu()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_imu;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CANProto.CANFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CANProto.CANFrame)
  return false;
#undef DO_
}

void CANFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CANProto.CANFrame)
  // repeated .CANProto.TurnSignal ts = 1;
  for (int i = 0; i < this->ts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ts(i), output);
  }

  // repeated .CANProto.Gear gt = 2;
  for (int i = 0; i < this->gt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gt(i), output);
  }

  // repeated .CANProto.VehSpeed sp = 3;
  for (int i = 0; i < this->sp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sp(i), output);
  }

  // repeated .CANProto.WheelAngle wa = 4;
  for (int i = 0; i < this->wa_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->wa(i), output);
  }

  // repeated .CANProto.CANIMU imu = 5;
  for (int i = 0; i < this->imu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->imu(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CANProto.CANFrame)
}

::google::protobuf::uint8* CANFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CANProto.CANFrame)
  // repeated .CANProto.TurnSignal ts = 1;
  for (int i = 0; i < this->ts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ts(i), target);
  }

  // repeated .CANProto.Gear gt = 2;
  for (int i = 0; i < this->gt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gt(i), target);
  }

  // repeated .CANProto.VehSpeed sp = 3;
  for (int i = 0; i < this->sp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sp(i), target);
  }

  // repeated .CANProto.WheelAngle wa = 4;
  for (int i = 0; i < this->wa_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->wa(i), target);
  }

  // repeated .CANProto.CANIMU imu = 5;
  for (int i = 0; i < this->imu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->imu(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CANProto.CANFrame)
  return target;
}

int CANFrame::ByteSize() const {
  int total_size = 0;

  // repeated .CANProto.TurnSignal ts = 1;
  total_size += 1 * this->ts_size();
  for (int i = 0; i < this->ts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ts(i));
  }

  // repeated .CANProto.Gear gt = 2;
  total_size += 1 * this->gt_size();
  for (int i = 0; i < this->gt_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gt(i));
  }

  // repeated .CANProto.VehSpeed sp = 3;
  total_size += 1 * this->sp_size();
  for (int i = 0; i < this->sp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sp(i));
  }

  // repeated .CANProto.WheelAngle wa = 4;
  total_size += 1 * this->wa_size();
  for (int i = 0; i < this->wa_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wa(i));
  }

  // repeated .CANProto.CANIMU imu = 5;
  total_size += 1 * this->imu_size();
  for (int i = 0; i < this->imu_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->imu(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CANFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CANFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CANFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CANFrame::MergeFrom(const CANFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  ts_.MergeFrom(from.ts_);
  gt_.MergeFrom(from.gt_);
  sp_.MergeFrom(from.sp_);
  wa_.MergeFrom(from.wa_);
  imu_.MergeFrom(from.imu_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CANFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CANFrame::CopyFrom(const CANFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CANFrame::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->ts())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->gt())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->sp())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->wa())) return false;
  return true;
}

void CANFrame::Swap(CANFrame* other) {
  if (other != this) {
    ts_.Swap(&other->ts_);
    gt_.Swap(&other->gt_);
    sp_.Swap(&other->sp_);
    wa_.Swap(&other->wa_);
    imu_.Swap(&other->imu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CANFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CANFrame_descriptor_;
  metadata.reflection = CANFrame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CANFrameRaw::kCanIdFieldNumber;
const int CANFrameRaw::kCanDlcFieldNumber;
const int CANFrameRaw::kDataFieldNumber;
const int CANFrameRaw::kTimeStampFieldNumber;
#endif  // !_MSC_VER

CANFrameRaw::CANFrameRaw()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CANProto.CANFrameRaw)
}

void CANFrameRaw::InitAsDefaultInstance() {
}

CANFrameRaw::CANFrameRaw(const CANFrameRaw& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CANProto.CANFrameRaw)
}

void CANFrameRaw::SharedCtor() {
  _cached_size_ = 0;
  can_id_ = 0;
  can_dlc_ = 0;
  time_stamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CANFrameRaw::~CANFrameRaw() {
  // @@protoc_insertion_point(destructor:CANProto.CANFrameRaw)
  SharedDtor();
}

void CANFrameRaw::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CANFrameRaw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CANFrameRaw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CANFrameRaw_descriptor_;
}

const CANFrameRaw& CANFrameRaw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_can_2eproto();
  return *default_instance_;
}

CANFrameRaw* CANFrameRaw::default_instance_ = NULL;

CANFrameRaw* CANFrameRaw::New() const {
  return new CANFrameRaw;
}

void CANFrameRaw::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CANFrameRaw*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(can_id_, can_dlc_);
    time_stamp_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CANFrameRaw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CANProto.CANFrameRaw)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 can_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_id_)));
          set_has_can_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_can_dlc;
        break;
      }

      // required int32 can_dlc = 2;
      case 2: {
        if (tag == 16) {
         parse_can_dlc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_dlc_)));
          set_has_can_dlc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_data;
        break;
      }

      // repeated int32 data = 3;
      case 3: {
        if (tag == 24) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_data())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_data;
        if (input->ExpectTag(32)) goto parse_time_stamp;
        break;
      }

      // required int64 time_stamp = 4;
      case 4: {
        if (tag == 32) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CANProto.CANFrameRaw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CANProto.CANFrameRaw)
  return false;
#undef DO_
}

void CANFrameRaw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CANProto.CANFrameRaw)
  // required int32 can_id = 1;
  if (has_can_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->can_id(), output);
  }

  // required int32 can_dlc = 2;
  if (has_can_dlc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->can_dlc(), output);
  }

  // repeated int32 data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->data(i), output);
  }

  // required int64 time_stamp = 4;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CANProto.CANFrameRaw)
}

::google::protobuf::uint8* CANFrameRaw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CANProto.CANFrameRaw)
  // required int32 can_id = 1;
  if (has_can_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->can_id(), target);
  }

  // required int32 can_dlc = 2;
  if (has_can_dlc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->can_dlc(), target);
  }

  // repeated int32 data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->data(i), target);
  }

  // required int64 time_stamp = 4;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CANProto.CANFrameRaw)
  return target;
}

int CANFrameRaw::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 can_id = 1;
    if (has_can_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_id());
    }

    // required int32 can_dlc = 2;
    if (has_can_dlc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_dlc());
    }

    // required int64 time_stamp = 4;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_stamp());
    }

  }
  // repeated int32 data = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->data(i));
    }
    total_size += 1 * this->data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CANFrameRaw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CANFrameRaw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CANFrameRaw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CANFrameRaw::MergeFrom(const CANFrameRaw& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_can_id()) {
      set_can_id(from.can_id());
    }
    if (from.has_can_dlc()) {
      set_can_dlc(from.can_dlc());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CANFrameRaw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CANFrameRaw::CopyFrom(const CANFrameRaw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CANFrameRaw::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void CANFrameRaw::Swap(CANFrameRaw* other) {
  if (other != this) {
    std::swap(can_id_, other->can_id_);
    std::swap(can_dlc_, other->can_dlc_);
    data_.Swap(&other->data_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CANFrameRaw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CANFrameRaw_descriptor_;
  metadata.reflection = CANFrameRaw_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CANProto

// @@protoc_insertion_point(global_scope)
