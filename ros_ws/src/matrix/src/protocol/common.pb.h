// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_common_2eproto__INCLUDED
#define PROTOBUF_common_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace CommonProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_common_2eproto();
void protobuf_AssignDesc_common_2eproto();
void protobuf_ShutdownFile_common_2eproto();

class Point;
class PointI;
class Contour;
class Polygon;
class Rect;
class OBBox2D;
class Box3D;
class SkeletonPoint;
class Image;
class Velocity;
class Line;
class Lines;
class WorldSpaceInfo;
class ImageSpaceInfo;
class Obstacle;
class Obstacles;
class FeatureMap;
class ObstacleRaw;
class ObstacleRaws;
class FreeSpacePoints;
class Box3DRaw;
class Box3DRaws;
class Skeleton;
class SkeletonRaw;
class SkeletonRaws;
class CameraMatrix;
class DistortParam;
class VCSParam;
class CameraParam;
class MotionFrame;
class OdometryFrame;
class SerializedData;
class DataDescriptor;
class Color;
class ParsingSetting;

enum Line_EndPointType {
  Line_EndPointType_EndPointType_Far = 0,
  Line_EndPointType_EndPointType_Near = 1
};
bool Line_EndPointType_IsValid(int value);
const Line_EndPointType Line_EndPointType_EndPointType_MIN = Line_EndPointType_EndPointType_Far;
const Line_EndPointType Line_EndPointType_EndPointType_MAX = Line_EndPointType_EndPointType_Near;
const int Line_EndPointType_EndPointType_ARRAYSIZE = Line_EndPointType_EndPointType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Line_EndPointType_descriptor();
inline const ::std::string& Line_EndPointType_Name(Line_EndPointType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Line_EndPointType_descriptor(), value);
}
inline bool Line_EndPointType_Parse(
    const ::std::string& name, Line_EndPointType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Line_EndPointType>(
    Line_EndPointType_descriptor(), name, value);
}
enum SkeletonType {
  SkeletonType_nose = 0,
  SkeletonType_left_eye = 1,
  SkeletonType_right_eye = 2,
  SkeletonType_left_ear = 3,
  SkeletonType_right_ear = 4,
  SkeletonType_left_shoulder = 5,
  SkeletonType_right_shoulder = 6,
  SkeletonType_left_elbow = 7,
  SkeletonType_right_elbow = 8,
  SkeletonType_left_wrist = 9,
  SkeletonType_right_wrist = 10,
  SkeletonType_left_hip = 11,
  SkeletonType_right_hip = 12,
  SkeletonType_left_knee = 13,
  SkeletonType_right_knee = 14,
  SkeletonType_left_ankle = 15,
  SkeletonType_right_ankle = 16
};
bool SkeletonType_IsValid(int value);
const SkeletonType SkeletonType_MIN = SkeletonType_nose;
const SkeletonType SkeletonType_MAX = SkeletonType_right_ankle;
const int SkeletonType_ARRAYSIZE = SkeletonType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SkeletonType_descriptor();
inline const ::std::string& SkeletonType_Name(SkeletonType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SkeletonType_descriptor(), value);
}
inline bool SkeletonType_Parse(
    const ::std::string& name, SkeletonType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SkeletonType>(
    SkeletonType_descriptor(), name, value);
}
enum ImageFormat {
  GRAY = 0,
  YV12 = 1,
  JPEG = 2,
  PNG = 3,
  CR12 = 4,
  BAD = 5,
  NV12 = 6,
  NV21 = 7,
  TIMEOUT = 8,
  BYPASS_ONLY = 9
};
bool ImageFormat_IsValid(int value);
const ImageFormat ImageFormat_MIN = GRAY;
const ImageFormat ImageFormat_MAX = BYPASS_ONLY;
const int ImageFormat_ARRAYSIZE = ImageFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* ImageFormat_descriptor();
inline const ::std::string& ImageFormat_Name(ImageFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    ImageFormat_descriptor(), value);
}
inline bool ImageFormat_Parse(
    const ::std::string& name, ImageFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImageFormat>(
    ImageFormat_descriptor(), name, value);
}
enum ParsingFormat {
  ParsingFormat_Raw = 0,
  ParsingFormat_Label = 1,
  ParsingFormat_Label_RLE = 2
};
bool ParsingFormat_IsValid(int value);
const ParsingFormat ParsingFormat_MIN = ParsingFormat_Raw;
const ParsingFormat ParsingFormat_MAX = ParsingFormat_Label_RLE;
const int ParsingFormat_ARRAYSIZE = ParsingFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParsingFormat_descriptor();
inline const ::std::string& ParsingFormat_Name(ParsingFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParsingFormat_descriptor(), value);
}
inline bool ParsingFormat_Parse(
    const ::std::string& name, ParsingFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParsingFormat>(
    ParsingFormat_descriptor(), name, value);
}
enum LineType {
  LINE_LEFT = 1,
  LINE_RIGHT = 2,
  LINE_LEFT_LEFT = 4,
  LINE_RIGHT_RIGHT = 8,
  LINE_DOUBLE = 512,
  LINE_DASH = 1024,
  LINE_SOLID = 2048,
  LINE_WHITE = 4096,
  LINE_YELLOW = 8192,
  LINE_BLUE = 16384,
  LINE_GREEN = 32768,
  LINE_FENCE = 65536,
  LINE_ROAD_HEIGHT = 131072,
  LINE_DIVERSION_SEPARATE = 262144,
  LINE_BARRIER = 524288,
  LINE_DIVERSION_MERGE = 1048576,
  LINE_PERCEPTION = 2097152,
  LINE_TRACKING = 4194304,
  LINE_RAW = 8388608,
  LINE_ROAD = 16777216
};
bool LineType_IsValid(int value);
const LineType LineType_MIN = LINE_LEFT;
const LineType LineType_MAX = LINE_ROAD;
const int LineType_ARRAYSIZE = LineType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LineType_descriptor();
inline const ::std::string& LineType_Name(LineType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LineType_descriptor(), value);
}
inline bool LineType_Parse(
    const ::std::string& name, LineType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LineType>(
    LineType_descriptor(), name, value);
}
enum ObstacleType {
  ObstacleType_VehicleRear = 0,
  ObstacleType_VehicleFull = 1,
  ObstacleType_Pedestrian = 2,
  ObstacleType_TrafficSign = 3,
  ObstacleType_TrafficLight = 4,
  ObstacleType_ParkingSlot = 5,
  ObstacleType_RoadSign = 6,
  ObstacleType_CrosswalkLine = 7,
  ObstacleType_TrafficArrow = 8,
  ObstacleType_TrafficCone = 9,
  ObstacleType_Barrel = 10,
  ObstacleType_YieldMark = 11,
  ObstacleType_SpeedMark = 12,
  ObstacleType_Character = 13,
  ObstacleType_StopLine = 14,
  ObstacleType_Diamond = 15,
  ObstacleType_BicycleSign = 16,
  ObstacleType_SpeedBumps = 17,
  ObstacleType_Cyclist = 18,
  ObstacleType_ParkingLock = 19
};
bool ObstacleType_IsValid(int value);
const ObstacleType ObstacleType_MIN = ObstacleType_VehicleRear;
const ObstacleType ObstacleType_MAX = ObstacleType_ParkingLock;
const int ObstacleType_ARRAYSIZE = ObstacleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObstacleType_descriptor();
inline const ::std::string& ObstacleType_Name(ObstacleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObstacleType_descriptor(), value);
}
inline bool ObstacleType_Parse(
    const ::std::string& name, ObstacleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObstacleType>(
    ObstacleType_descriptor(), name, value);
}
enum TrafficLightStyle {
  TrafficLightStyle_Circle = 0,
  TrafficLightStyle_Forward = 1,
  TrafficLightStyle_Left = 2,
  TrafficLightStyle_Right = 3,
  TrafficLightStyle_Return = 4,
  TrafficLightStyle_Pedestrain = 5,
  TrafficLightStyle_L_Non_Motor = 6,
  TrafficLightStyle_L_Time = 7,
  TrafficLightStyle_L_Other = 8,
  TrafficLightStyle_L_Left_And_Return = 9,
  TrafficLightStyle_L_Forward_and_Left = 10,
  TrafficLightStyle_L_Forward_and_Right = 11,
  TrafficLightStyle_L_No_Drive_into = 12,
  TrafficLightStyle_L_Allow_Drive_into = 13
};
bool TrafficLightStyle_IsValid(int value);
const TrafficLightStyle TrafficLightStyle_MIN = TrafficLightStyle_Circle;
const TrafficLightStyle TrafficLightStyle_MAX = TrafficLightStyle_L_Allow_Drive_into;
const int TrafficLightStyle_ARRAYSIZE = TrafficLightStyle_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficLightStyle_descriptor();
inline const ::std::string& TrafficLightStyle_Name(TrafficLightStyle value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficLightStyle_descriptor(), value);
}
inline bool TrafficLightStyle_Parse(
    const ::std::string& name, TrafficLightStyle* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficLightStyle>(
    TrafficLightStyle_descriptor(), name, value);
}
enum TrafficLightStatus {
  TrafficLightStatus_Green = 0,
  TrafficLightStatus_Yellow = 1,
  TrafficLightStatus_Red = 2,
  TrafficLightStatus_Other = 3,
  TrafficLightStatus_back = 4,
  TrafficLightStatus_side = 5
};
bool TrafficLightStatus_IsValid(int value);
const TrafficLightStatus TrafficLightStatus_MIN = TrafficLightStatus_Green;
const TrafficLightStatus TrafficLightStatus_MAX = TrafficLightStatus_side;
const int TrafficLightStatus_ARRAYSIZE = TrafficLightStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficLightStatus_descriptor();
inline const ::std::string& TrafficLightStatus_Name(TrafficLightStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficLightStatus_descriptor(), value);
}
inline bool TrafficLightStatus_Parse(
    const ::std::string& name, TrafficLightStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficLightStatus>(
    TrafficLightStatus_descriptor(), name, value);
}
enum TrafficSignType {
  TrSignType_P_Stop_For = 6,
  TrSignType_P_No_Entry = 57,
  TrSignType_P_No_Parking = 45,
  TrSignType_P_No_Motor = 23,
  TrSignType_P_No_Truck = 46,
  TrSignType_P_No_Human = 55,
  TrSignType_P_No_Left_Turn = 37,
  TrSignType_P_No_Right_Turn = 19,
  TrSignType_P_No_Left_Right_Turn = 14,
  TrSignType_P_No_Foward = 34,
  TrSignType_P_No_Forward_Left = 5,
  TrSignType_P_No_Forward_Right = 56,
  TrSignType_P_No_Return = 38,
  TrSignType_P_No_Horning = 47,
  TrSignType_P_No_Passing = 54,
  TrSignType_Other_No_Passing_Rev = 25,
  TrSignType_P_No_Dangerous = 41,
  TrSignType_P_Speed_Lim5 = 7,
  TrSignType_P_Speed_Lim10 = 9,
  TrSignType_P_Speed_Lim15 = 43,
  TrSignType_P_Speed_Lim20 = 10,
  TrSignType_P_Speed_Lim25 = 1,
  TrSignType_P_Speed_Lim30 = 26,
  TrSignType_P_Speed_Lim35 = 33,
  TrSignType_P_Speed_Lim40 = 15,
  TrSignType_P_Speed_Lim45 = 42,
  TrSignType_P_Speed_Lim50 = 29,
  TrSignType_P_Speed_Lim55 = 49,
  TrSignType_P_Speed_Lim60 = 4,
  TrSignType_P_Speed_Lim65 = 0,
  TrSignType_P_Speed_Lim70 = 44,
  TrSignType_P_Speed_Lim75 = 60,
  TrSignType_P_Speed_Lim80 = 31,
  TrSignType_P_Speed_Lim85 = 8,
  TrSignType_P_Speed_Lim90 = 21,
  TrSignType_P_Speed_Lim95 = 58,
  TrSignType_P_Speed_Lim100 = 20,
  TrSignType_P_Speed_Lim105 = 13,
  TrSignType_P_Speed_Lim110 = 48,
  TrSignType_P_Speed_Lim115 = 40,
  TrSignType_P_Speed_Lim120 = 50,
  TrSignType_Other_Speed_Lim_Rev = 2,
  TrSignType_P_No_Way = 35,
  TrSignType_P_No_Long_Parking = 18,
  TrSignType_P_Parking_Check = 22,
  TrSignType_P_Slow_For = 30,
  TrSignType_Weight_Lim_Wheel = 24,
  TrSignType_Weight_Lim = 28,
  TrSignType_Height_Lim = 27,
  TrSignType_Width_Lim = 61,
  TrSignType_Other_Min_Speed = 39,
  TrSignType_Other_Indications = 51,
  TrSignType_Other_No_Werid_Vehicle = 3,
  TrSignType_Other_Warnings = 53,
  TrSignType_Other_Construction_Sign = 11,
  TrSignType_Other_G_GuideSign_GreenWhite = 16,
  TrSignType_Other_G_GuideSign_BlueWhite = 17,
  TrSignType_Other_T_TravelSign_BrownWhite = 32,
  TrSignType_Other_G_GuideSign_WhiteBlack = 52,
  TrSignType_Other_R_RouteID_Yellow_Black = 36,
  TrSignType_Other_R_RouteID_Red_White = 59
};
bool TrafficSignType_IsValid(int value);
const TrafficSignType TrafficSignType_MIN = TrSignType_P_Speed_Lim65;
const TrafficSignType TrafficSignType_MAX = TrSignType_Width_Lim;
const int TrafficSignType_ARRAYSIZE = TrafficSignType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficSignType_descriptor();
inline const ::std::string& TrafficSignType_Name(TrafficSignType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficSignType_descriptor(), value);
}
inline bool TrafficSignType_Parse(
    const ::std::string& name, TrafficSignType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficSignType>(
    TrafficSignType_descriptor(), name, value);
}
enum ParkingSlotStatus {
  ParkingSlotStatus_Occupied = 0,
  ParkingSlotStatus_Free = 1
};
bool ParkingSlotStatus_IsValid(int value);
const ParkingSlotStatus ParkingSlotStatus_MIN = ParkingSlotStatus_Occupied;
const ParkingSlotStatus ParkingSlotStatus_MAX = ParkingSlotStatus_Free;
const int ParkingSlotStatus_ARRAYSIZE = ParkingSlotStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParkingSlotStatus_descriptor();
inline const ::std::string& ParkingSlotStatus_Name(ParkingSlotStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParkingSlotStatus_descriptor(), value);
}
inline bool ParkingSlotStatus_Parse(
    const ::std::string& name, ParkingSlotStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParkingSlotStatus>(
    ParkingSlotStatus_descriptor(), name, value);
}
enum VehProperty {
  VehProperty_Type = 0,
  VehProperty_Classification = 1,
  VehProperty_Light = 2,
  VehProperty_3DBox = 3,
  VehProperty_KeyPoints = 4,
  VehProperty_VehBBox = 5,
  VehProperty_Cnt = 6
};
bool VehProperty_IsValid(int value);
const VehProperty VehProperty_MIN = VehProperty_Type;
const VehProperty VehProperty_MAX = VehProperty_Cnt;
const int VehProperty_ARRAYSIZE = VehProperty_MAX + 1;

const ::google::protobuf::EnumDescriptor* VehProperty_descriptor();
inline const ::std::string& VehProperty_Name(VehProperty value) {
  return ::google::protobuf::internal::NameOfEnum(
    VehProperty_descriptor(), value);
}
inline bool VehProperty_Parse(
    const ::std::string& name, VehProperty* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VehProperty>(
    VehProperty_descriptor(), name, value);
}
enum VehPropertyPerceptionType {
  Veh_PerceptionType_LicensePlate = 0,
  Veh_PerceptionType_Wheel = 1,
  Veh_PerceptionType_Cnt = 2
};
bool VehPropertyPerceptionType_IsValid(int value);
const VehPropertyPerceptionType VehPropertyPerceptionType_MIN = Veh_PerceptionType_LicensePlate;
const VehPropertyPerceptionType VehPropertyPerceptionType_MAX = Veh_PerceptionType_Cnt;
const int VehPropertyPerceptionType_ARRAYSIZE = VehPropertyPerceptionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* VehPropertyPerceptionType_descriptor();
inline const ::std::string& VehPropertyPerceptionType_Name(VehPropertyPerceptionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    VehPropertyPerceptionType_descriptor(), value);
}
inline bool VehPropertyPerceptionType_Parse(
    const ::std::string& name, VehPropertyPerceptionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VehPropertyPerceptionType>(
    VehPropertyPerceptionType_descriptor(), name, value);
}
enum TrafficLightProperty {
  TlProperty_Type = 0,
  TlProperty_Color = 1
};
bool TrafficLightProperty_IsValid(int value);
const TrafficLightProperty TrafficLightProperty_MIN = TlProperty_Type;
const TrafficLightProperty TrafficLightProperty_MAX = TlProperty_Color;
const int TrafficLightProperty_ARRAYSIZE = TrafficLightProperty_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficLightProperty_descriptor();
inline const ::std::string& TrafficLightProperty_Name(TrafficLightProperty value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficLightProperty_descriptor(), value);
}
inline bool TrafficLightProperty_Parse(
    const ::std::string& name, TrafficLightProperty* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficLightProperty>(
    TrafficLightProperty_descriptor(), name, value);
}
enum TrafficSignProperty {
  TsProperty_Type = 0
};
bool TrafficSignProperty_IsValid(int value);
const TrafficSignProperty TrafficSignProperty_MIN = TsProperty_Type;
const TrafficSignProperty TrafficSignProperty_MAX = TsProperty_Type;
const int TrafficSignProperty_ARRAYSIZE = TrafficSignProperty_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficSignProperty_descriptor();
inline const ::std::string& TrafficSignProperty_Name(TrafficSignProperty value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficSignProperty_descriptor(), value);
}
inline bool TrafficSignProperty_Parse(
    const ::std::string& name, TrafficSignProperty* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficSignProperty>(
    TrafficSignProperty_descriptor(), name, value);
}
enum RoadSignProperty {
  RsProperty_Type = 0
};
bool RoadSignProperty_IsValid(int value);
const RoadSignProperty RoadSignProperty_MIN = RsProperty_Type;
const RoadSignProperty RoadSignProperty_MAX = RsProperty_Type;
const int RoadSignProperty_ARRAYSIZE = RoadSignProperty_MAX + 1;

const ::google::protobuf::EnumDescriptor* RoadSignProperty_descriptor();
inline const ::std::string& RoadSignProperty_Name(RoadSignProperty value) {
  return ::google::protobuf::internal::NameOfEnum(
    RoadSignProperty_descriptor(), value);
}
inline bool RoadSignProperty_Parse(
    const ::std::string& name, RoadSignProperty* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoadSignProperty>(
    RoadSignProperty_descriptor(), name, value);
}
enum ObstacleRawModelType {
  ObstacleRawModel_Car = 0,
  ObstacleRawModel_FullCar = 1,
  ObstacleRawModel_Ped = 2,
  ObstacleRawModel_Head = 3,
  ObstacleRawModel_Rare = 4,
  ObstacleRawModel_TrafficSign = 5,
  ObstacleRawModel_TrafficLight = 6,
  ObstacleRawModel_Lane = 7,
  ObstacleRawModel_RoadSign = 10,
  ObstacleRawModel_Cyclist = 16
};
bool ObstacleRawModelType_IsValid(int value);
const ObstacleRawModelType ObstacleRawModelType_MIN = ObstacleRawModel_Car;
const ObstacleRawModelType ObstacleRawModelType_MAX = ObstacleRawModel_Cyclist;
const int ObstacleRawModelType_ARRAYSIZE = ObstacleRawModelType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObstacleRawModelType_descriptor();
inline const ::std::string& ObstacleRawModelType_Name(ObstacleRawModelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObstacleRawModelType_descriptor(), value);
}
inline bool ObstacleRawModelType_Parse(
    const ::std::string& name, ObstacleRawModelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObstacleRawModelType>(
    ObstacleRawModelType_descriptor(), name, value);
}
enum LanePosition {
  LANE_POSITION_CENTER = 0,
  LANE_POSITION_LEFT = 1,
  LANE_POSITION_RIGHT = 2
};
bool LanePosition_IsValid(int value);
const LanePosition LanePosition_MIN = LANE_POSITION_CENTER;
const LanePosition LanePosition_MAX = LANE_POSITION_RIGHT;
const int LanePosition_ARRAYSIZE = LanePosition_MAX + 1;

const ::google::protobuf::EnumDescriptor* LanePosition_descriptor();
inline const ::std::string& LanePosition_Name(LanePosition value) {
  return ::google::protobuf::internal::NameOfEnum(
    LanePosition_descriptor(), value);
}
inline bool LanePosition_Parse(
    const ::std::string& name, LanePosition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LanePosition>(
    LanePosition_descriptor(), name, value);
}
enum FreeSpacePointType {
  ParsingLabelType_Invalid = 255
};
bool FreeSpacePointType_IsValid(int value);
const FreeSpacePointType FreeSpacePointType_MIN = ParsingLabelType_Invalid;
const FreeSpacePointType FreeSpacePointType_MAX = ParsingLabelType_Invalid;
const int FreeSpacePointType_ARRAYSIZE = FreeSpacePointType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FreeSpacePointType_descriptor();
inline const ::std::string& FreeSpacePointType_Name(FreeSpacePointType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FreeSpacePointType_descriptor(), value);
}
inline bool FreeSpacePointType_Parse(
    const ::std::string& name, FreeSpacePointType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FreeSpacePointType>(
    FreeSpacePointType_descriptor(), name, value);
}
enum CameraType {
  CameraType_PinHole = 0,
  CameraType_FishEye = 1
};
bool CameraType_IsValid(int value);
const CameraType CameraType_MIN = CameraType_PinHole;
const CameraType CameraType_MAX = CameraType_FishEye;
const int CameraType_ARRAYSIZE = CameraType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CameraType_descriptor();
inline const ::std::string& CameraType_Name(CameraType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CameraType_descriptor(), value);
}
inline bool CameraType_Parse(
    const ::std::string& name, CameraType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CameraType>(
    CameraType_descriptor(), name, value);
}
enum CameraVersion {
  CameraVersion_CV = 0,
  CameraVersion_VCS = 1
};
bool CameraVersion_IsValid(int value);
const CameraVersion CameraVersion_MIN = CameraVersion_CV;
const CameraVersion CameraVersion_MAX = CameraVersion_VCS;
const int CameraVersion_ARRAYSIZE = CameraVersion_MAX + 1;

const ::google::protobuf::EnumDescriptor* CameraVersion_descriptor();
inline const ::std::string& CameraVersion_Name(CameraVersion value) {
  return ::google::protobuf::internal::NameOfEnum(
    CameraVersion_descriptor(), value);
}
inline bool CameraVersion_Parse(
    const ::std::string& name, CameraVersion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CameraVersion>(
    CameraVersion_descriptor(), name, value);
}
enum CalibrationStatus {
  CalibrationStatus_Default = 0,
  CalibrationStatus_IntrinsicDone = 1,
  CalibrationStatus_ExtrinsicDone = 2
};
bool CalibrationStatus_IsValid(int value);
const CalibrationStatus CalibrationStatus_MIN = CalibrationStatus_Default;
const CalibrationStatus CalibrationStatus_MAX = CalibrationStatus_ExtrinsicDone;
const int CalibrationStatus_ARRAYSIZE = CalibrationStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* CalibrationStatus_descriptor();
inline const ::std::string& CalibrationStatus_Name(CalibrationStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    CalibrationStatus_descriptor(), value);
}
inline bool CalibrationStatus_Parse(
    const ::std::string& name, CalibrationStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CalibrationStatus>(
    CalibrationStatus_descriptor(), name, value);
}
enum DataType {
  DATA_IMG = 0,
  DATA_PARSING = 1,
  DATA_RADAR = 2
};
bool DataType_IsValid(int value);
const DataType DataType_MIN = DATA_IMG;
const DataType DataType_MAX = DATA_RADAR;
const int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataType_descriptor();
inline const ::std::string& DataType_Name(DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataType_descriptor(), value);
}
inline bool DataType_Parse(
    const ::std::string& name, DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
enum PasringLableType {
  PasringLableTypeRsh_Road = 0,
  PasringLableTypeRsh_Sidewalk = 1,
  PasringLableTypeRsh_Building = 2,
  PasringLableTypeRsh_LaneMarking = 3,
  PasringLableTypeRsh_Fence = 4,
  PasringLableTypeRsh_Pole = 5,
  PasringLableTypeRsh_TrafficLight = 6,
  PasringLableTypeRsh_TrafficSign = 7,
  PasringLableTypeRsh_Vegetation = 8,
  PasringLableTypeRsh_Terrain = 9,
  PasringLableTypeRsh_Sky = 10,
  PasringLableTypeRsh_Person = 11,
  PasringLableTypeRsh_Rider = 12,
  PasringLableTypeRsh_Car = 13,
  PasringLableTypeRsh_Truck = 14,
  PasringLableTypeRsh_Bus = 15,
  PasringLableTypeRsh_Train = 16,
  PasringLableTypeRsh_Motorcycle = 17,
  PasringLableTypeRsh_Bicycle = 18,
  PasringLableTypeRsh_GuidePost = 19,
  PasringLableTypeRsh_CrosswalkLine = 20,
  PasringLableTypeRsh_TrafficArrow = 21,
  PasringLableTypeRsh_SignLine = 22,
  PasringLableTypeRsh_GuideLine = 23,
  PasringLableTypeRsh_TrafficCone = 24,
  PasringLableTypeRsh_Barrel = 25,
  PasringLableTypeRsh_StopLine = 26,
  PasringLableTypeRsh_SpeedMark = 27,
  PasringLableTypeRsh_Diamond = 28,
  PasringLableTypeRsh_BicycleSign = 29,
  PasringLableTypeRsh_SpeedBumps = 30,
  PasringLableTypeRsh_Tricycle = 31,
  PasringLableTypeRsh_SlowDownTriangle = 32,
  PasringLableTypeRsh_Mask = 33,
  PasringLableTypeRsh_PotHole = 34,
  PasringLableTypeRsh_Other = 35,
  PasringLableTypeRsh_Curb = 36,
  PasringLableTypeRsh_ParkingLine = 37,
  PasringLableTypeRsh_ParkingSpace = 38,
  PasringLableTypeRsh_ParkingRod = 39,
  PasringLableTypeRsh_ParkingLock = 40,
  PasringLableTypeRsh_Column = 41
};
bool PasringLableType_IsValid(int value);
const PasringLableType PasringLableType_MIN = PasringLableTypeRsh_Road;
const PasringLableType PasringLableType_MAX = PasringLableTypeRsh_Column;
const int PasringLableType_ARRAYSIZE = PasringLableType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PasringLableType_descriptor();
inline const ::std::string& PasringLableType_Name(PasringLableType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PasringLableType_descriptor(), value);
}
inline bool PasringLableType_Parse(
    const ::std::string& name, PasringLableType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PasringLableType>(
    PasringLableType_descriptor(), name, value);
}
// ===================================================================

class Point : public ::google::protobuf::Message {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  void Swap(Point* other);

  // implements Message ----------------------------------------------

  Point* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // optional float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:CommonProto.Point)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  float z_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Point* default_instance_;
};
// -------------------------------------------------------------------

class PointI : public ::google::protobuf::Message {
 public:
  PointI();
  virtual ~PointI();

  PointI(const PointI& from);

  inline PointI& operator=(const PointI& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PointI& default_instance();

  void Swap(PointI* other);

  // implements Message ----------------------------------------------

  PointI* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PointI& from);
  void MergeFrom(const PointI& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // required int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // optional int32 z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline ::google::protobuf::int32 z() const;
  inline void set_z(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CommonProto.PointI)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static PointI* default_instance_;
};
// -------------------------------------------------------------------

class Contour : public ::google::protobuf::Message {
 public:
  Contour();
  virtual ~Contour();

  Contour(const Contour& from);

  inline Contour& operator=(const Contour& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Contour& default_instance();

  void Swap(Contour* other);

  // implements Message ----------------------------------------------

  Contour* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Contour& from);
  void MergeFrom(const Contour& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CommonProto.Point pts = 1;
  inline int pts_size() const;
  inline void clear_pts();
  static const int kPtsFieldNumber = 1;
  inline const ::CommonProto::Point& pts(int index) const;
  inline ::CommonProto::Point* mutable_pts(int index);
  inline ::CommonProto::Point* add_pts();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Point >&
      pts() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Point >*
      mutable_pts();

  // @@protoc_insertion_point(class_scope:CommonProto.Contour)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::Point > pts_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Contour* default_instance_;
};
// -------------------------------------------------------------------

class Polygon : public ::google::protobuf::Message {
 public:
  Polygon();
  virtual ~Polygon();

  Polygon(const Polygon& from);

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Polygon& default_instance();

  void Swap(Polygon* other);

  // implements Message ----------------------------------------------

  Polygon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CommonProto.Point pts = 1;
  inline int pts_size() const;
  inline void clear_pts();
  static const int kPtsFieldNumber = 1;
  inline const ::CommonProto::Point& pts(int index) const;
  inline ::CommonProto::Point* mutable_pts(int index);
  inline ::CommonProto::Point* add_pts();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Point >&
      pts() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Point >*
      mutable_pts();

  // @@protoc_insertion_point(class_scope:CommonProto.Polygon)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::Point > pts_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Polygon* default_instance_;
};
// -------------------------------------------------------------------

class Rect : public ::google::protobuf::Message {
 public:
  Rect();
  virtual ~Rect();

  Rect(const Rect& from);

  inline Rect& operator=(const Rect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rect& default_instance();

  void Swap(Rect* other);

  // implements Message ----------------------------------------------

  Rect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Rect& from);
  void MergeFrom(const Rect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float left = 1;
  inline bool has_left() const;
  inline void clear_left();
  static const int kLeftFieldNumber = 1;
  inline float left() const;
  inline void set_left(float value);

  // required float top = 2;
  inline bool has_top() const;
  inline void clear_top();
  static const int kTopFieldNumber = 2;
  inline float top() const;
  inline void set_top(float value);

  // required float right = 3;
  inline bool has_right() const;
  inline void clear_right();
  static const int kRightFieldNumber = 3;
  inline float right() const;
  inline void set_right(float value);

  // required float bottom = 4;
  inline bool has_bottom() const;
  inline void clear_bottom();
  static const int kBottomFieldNumber = 4;
  inline float bottom() const;
  inline void set_bottom(float value);

  // @@protoc_insertion_point(class_scope:CommonProto.Rect)
 private:
  inline void set_has_left();
  inline void clear_has_left();
  inline void set_has_top();
  inline void clear_has_top();
  inline void set_has_right();
  inline void clear_has_right();
  inline void set_has_bottom();
  inline void clear_has_bottom();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float left_;
  float top_;
  float right_;
  float bottom_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Rect* default_instance_;
};
// -------------------------------------------------------------------

class OBBox2D : public ::google::protobuf::Message {
 public:
  OBBox2D();
  virtual ~OBBox2D();

  OBBox2D(const OBBox2D& from);

  inline OBBox2D& operator=(const OBBox2D& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OBBox2D& default_instance();

  void Swap(OBBox2D* other);

  // implements Message ----------------------------------------------

  OBBox2D* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OBBox2D& from);
  void MergeFrom(const OBBox2D& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .CommonProto.Point corner = 1;
  inline bool has_corner() const;
  inline void clear_corner();
  static const int kCornerFieldNumber = 1;
  inline const ::CommonProto::Point& corner() const;
  inline ::CommonProto::Point* mutable_corner();
  inline ::CommonProto::Point* release_corner();
  inline void set_allocated_corner(::CommonProto::Point* corner);

  // repeated .CommonProto.Point axes_pts = 2;
  inline int axes_pts_size() const;
  inline void clear_axes_pts();
  static const int kAxesPtsFieldNumber = 2;
  inline const ::CommonProto::Point& axes_pts(int index) const;
  inline ::CommonProto::Point* mutable_axes_pts(int index);
  inline ::CommonProto::Point* add_axes_pts();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Point >&
      axes_pts() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Point >*
      mutable_axes_pts();

  // repeated float size = 3;
  inline int size_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 3;
  inline float size(int index) const;
  inline void set_size(int index, float value);
  inline void add_size(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      size() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_size();

  // @@protoc_insertion_point(class_scope:CommonProto.OBBox2D)
 private:
  inline void set_has_corner();
  inline void clear_has_corner();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CommonProto::Point* corner_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::Point > axes_pts_;
  ::google::protobuf::RepeatedField< float > size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static OBBox2D* default_instance_;
};
// -------------------------------------------------------------------

class Box3D : public ::google::protobuf::Message {
 public:
  Box3D();
  virtual ~Box3D();

  Box3D(const Box3D& from);

  inline Box3D& operator=(const Box3D& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Box3D& default_instance();

  void Swap(Box3D* other);

  // implements Message ----------------------------------------------

  Box3D* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Box3D& from);
  void MergeFrom(const Box3D& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .CommonProto.Point lower_lt = 1;
  inline bool has_lower_lt() const;
  inline void clear_lower_lt();
  static const int kLowerLtFieldNumber = 1;
  inline const ::CommonProto::Point& lower_lt() const;
  inline ::CommonProto::Point* mutable_lower_lt();
  inline ::CommonProto::Point* release_lower_lt();
  inline void set_allocated_lower_lt(::CommonProto::Point* lower_lt);

  // required .CommonProto.Point lower_lb = 2;
  inline bool has_lower_lb() const;
  inline void clear_lower_lb();
  static const int kLowerLbFieldNumber = 2;
  inline const ::CommonProto::Point& lower_lb() const;
  inline ::CommonProto::Point* mutable_lower_lb();
  inline ::CommonProto::Point* release_lower_lb();
  inline void set_allocated_lower_lb(::CommonProto::Point* lower_lb);

  // required .CommonProto.Point lower_rb = 3;
  inline bool has_lower_rb() const;
  inline void clear_lower_rb();
  static const int kLowerRbFieldNumber = 3;
  inline const ::CommonProto::Point& lower_rb() const;
  inline ::CommonProto::Point* mutable_lower_rb();
  inline ::CommonProto::Point* release_lower_rb();
  inline void set_allocated_lower_rb(::CommonProto::Point* lower_rb);

  // required .CommonProto.Point lower_rt = 4;
  inline bool has_lower_rt() const;
  inline void clear_lower_rt();
  static const int kLowerRtFieldNumber = 4;
  inline const ::CommonProto::Point& lower_rt() const;
  inline ::CommonProto::Point* mutable_lower_rt();
  inline ::CommonProto::Point* release_lower_rt();
  inline void set_allocated_lower_rt(::CommonProto::Point* lower_rt);

  // required .CommonProto.Point upper_lt = 5;
  inline bool has_upper_lt() const;
  inline void clear_upper_lt();
  static const int kUpperLtFieldNumber = 5;
  inline const ::CommonProto::Point& upper_lt() const;
  inline ::CommonProto::Point* mutable_upper_lt();
  inline ::CommonProto::Point* release_upper_lt();
  inline void set_allocated_upper_lt(::CommonProto::Point* upper_lt);

  // required .CommonProto.Point upper_lb = 6;
  inline bool has_upper_lb() const;
  inline void clear_upper_lb();
  static const int kUpperLbFieldNumber = 6;
  inline const ::CommonProto::Point& upper_lb() const;
  inline ::CommonProto::Point* mutable_upper_lb();
  inline ::CommonProto::Point* release_upper_lb();
  inline void set_allocated_upper_lb(::CommonProto::Point* upper_lb);

  // required .CommonProto.Point upper_rb = 7;
  inline bool has_upper_rb() const;
  inline void clear_upper_rb();
  static const int kUpperRbFieldNumber = 7;
  inline const ::CommonProto::Point& upper_rb() const;
  inline ::CommonProto::Point* mutable_upper_rb();
  inline ::CommonProto::Point* release_upper_rb();
  inline void set_allocated_upper_rb(::CommonProto::Point* upper_rb);

  // required .CommonProto.Point upper_rt = 8;
  inline bool has_upper_rt() const;
  inline void clear_upper_rt();
  static const int kUpperRtFieldNumber = 8;
  inline const ::CommonProto::Point& upper_rt() const;
  inline ::CommonProto::Point* mutable_upper_rt();
  inline ::CommonProto::Point* release_upper_rt();
  inline void set_allocated_upper_rt(::CommonProto::Point* upper_rt);

  // optional float conf = 9;
  inline bool has_conf() const;
  inline void clear_conf();
  static const int kConfFieldNumber = 9;
  inline float conf() const;
  inline void set_conf(float value);

  // @@protoc_insertion_point(class_scope:CommonProto.Box3D)
 private:
  inline void set_has_lower_lt();
  inline void clear_has_lower_lt();
  inline void set_has_lower_lb();
  inline void clear_has_lower_lb();
  inline void set_has_lower_rb();
  inline void clear_has_lower_rb();
  inline void set_has_lower_rt();
  inline void clear_has_lower_rt();
  inline void set_has_upper_lt();
  inline void clear_has_upper_lt();
  inline void set_has_upper_lb();
  inline void clear_has_upper_lb();
  inline void set_has_upper_rb();
  inline void clear_has_upper_rb();
  inline void set_has_upper_rt();
  inline void clear_has_upper_rt();
  inline void set_has_conf();
  inline void clear_has_conf();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CommonProto::Point* lower_lt_;
  ::CommonProto::Point* lower_lb_;
  ::CommonProto::Point* lower_rb_;
  ::CommonProto::Point* lower_rt_;
  ::CommonProto::Point* upper_lt_;
  ::CommonProto::Point* upper_lb_;
  ::CommonProto::Point* upper_rb_;
  ::CommonProto::Point* upper_rt_;
  float conf_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Box3D* default_instance_;
};
// -------------------------------------------------------------------

class SkeletonPoint : public ::google::protobuf::Message {
 public:
  SkeletonPoint();
  virtual ~SkeletonPoint();

  SkeletonPoint(const SkeletonPoint& from);

  inline SkeletonPoint& operator=(const SkeletonPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkeletonPoint& default_instance();

  void Swap(SkeletonPoint* other);

  // implements Message ----------------------------------------------

  SkeletonPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkeletonPoint& from);
  void MergeFrom(const SkeletonPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .CommonProto.Point pt = 1;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 1;
  inline const ::CommonProto::Point& pt() const;
  inline ::CommonProto::Point* mutable_pt();
  inline ::CommonProto::Point* release_pt();
  inline void set_allocated_pt(::CommonProto::Point* pt);

  // required int32 valid = 2;
  inline bool has_valid() const;
  inline void clear_valid();
  static const int kValidFieldNumber = 2;
  inline ::google::protobuf::int32 valid() const;
  inline void set_valid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CommonProto.SkeletonPoint)
 private:
  inline void set_has_pt();
  inline void clear_has_pt();
  inline void set_has_valid();
  inline void clear_has_valid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CommonProto::Point* pt_;
  ::google::protobuf::int32 valid_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static SkeletonPoint* default_instance_;
};
// -------------------------------------------------------------------

class Image : public ::google::protobuf::Message {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Image& default_instance();

  void Swap(Image* other);

  // implements Message ----------------------------------------------

  Image* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 width = 1;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 1;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // required int32 height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // required int32 channel = 3;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 3;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // optional int64 time_stamp = 4;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 4;
  inline ::google::protobuf::int64 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::int64 value);

  // optional int32 send_mode = 5;
  inline bool has_send_mode() const;
  inline void clear_send_mode();
  static const int kSendModeFieldNumber = 5;
  inline ::google::protobuf::int32 send_mode() const;
  inline void set_send_mode(::google::protobuf::int32 value);

  // optional int32 format = 6;
  inline bool has_format() const;
  inline void clear_format();
  static const int kFormatFieldNumber = 6;
  inline ::google::protobuf::int32 format() const;
  inline void set_format(::google::protobuf::int32 value);

  // optional int32 index = 7;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 7;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional int32 count = 8;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 8;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional int32 depth = 9;
  inline bool has_depth() const;
  inline void clear_depth();
  static const int kDepthFieldNumber = 9;
  inline ::google::protobuf::int32 depth() const;
  inline void set_depth(::google::protobuf::int32 value);

  // optional int32 align = 10;
  inline bool has_align() const;
  inline void clear_align();
  static const int kAlignFieldNumber = 10;
  inline ::google::protobuf::int32 align() const;
  inline void set_align(::google::protobuf::int32 value);

  // optional int32 image_counter = 11;
  inline bool has_image_counter() const;
  inline void clear_image_counter();
  static const int kImageCounterFieldNumber = 11;
  inline ::google::protobuf::int32 image_counter() const;
  inline void set_image_counter(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CommonProto.Image)
 private:
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();
  inline void set_has_send_mode();
  inline void clear_has_send_mode();
  inline void set_has_format();
  inline void clear_has_format();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_depth();
  inline void clear_has_depth();
  inline void set_has_align();
  inline void clear_has_align();
  inline void set_has_image_counter();
  inline void clear_has_image_counter();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int64 time_stamp_;
  ::google::protobuf::int32 channel_;
  ::google::protobuf::int32 send_mode_;
  ::google::protobuf::int32 format_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 depth_;
  ::google::protobuf::int32 align_;
  ::google::protobuf::int32 image_counter_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Image* default_instance_;
};
// -------------------------------------------------------------------

class Velocity : public ::google::protobuf::Message {
 public:
  Velocity();
  virtual ~Velocity();

  Velocity(const Velocity& from);

  inline Velocity& operator=(const Velocity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Velocity& default_instance();

  void Swap(Velocity* other);

  // implements Message ----------------------------------------------

  Velocity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Velocity& from);
  void MergeFrom(const Velocity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float vx = 1;
  inline bool has_vx() const;
  inline void clear_vx();
  static const int kVxFieldNumber = 1;
  inline float vx() const;
  inline void set_vx(float value);

  // required float vy = 2;
  inline bool has_vy() const;
  inline void clear_vy();
  static const int kVyFieldNumber = 2;
  inline float vy() const;
  inline void set_vy(float value);

  // optional float vz = 3;
  inline bool has_vz() const;
  inline void clear_vz();
  static const int kVzFieldNumber = 3;
  inline float vz() const;
  inline void set_vz(float value);

  // @@protoc_insertion_point(class_scope:CommonProto.Velocity)
 private:
  inline void set_has_vx();
  inline void clear_has_vx();
  inline void set_has_vy();
  inline void clear_has_vy();
  inline void set_has_vz();
  inline void clear_has_vz();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float vx_;
  float vy_;
  float vz_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Velocity* default_instance_;
};
// -------------------------------------------------------------------

class Line : public ::google::protobuf::Message {
 public:
  Line();
  virtual ~Line();

  Line(const Line& from);

  inline Line& operator=(const Line& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Line& default_instance();

  void Swap(Line* other);

  // implements Message ----------------------------------------------

  Line* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Line& from);
  void MergeFrom(const Line& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Line_EndPointType EndPointType;
  static const EndPointType EndPointType_Far = Line_EndPointType_EndPointType_Far;
  static const EndPointType EndPointType_Near = Line_EndPointType_EndPointType_Near;
  static inline bool EndPointType_IsValid(int value) {
    return Line_EndPointType_IsValid(value);
  }
  static const EndPointType EndPointType_MIN =
    Line_EndPointType_EndPointType_MIN;
  static const EndPointType EndPointType_MAX =
    Line_EndPointType_EndPointType_MAX;
  static const int EndPointType_ARRAYSIZE =
    Line_EndPointType_EndPointType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EndPointType_descriptor() {
    return Line_EndPointType_descriptor();
  }
  static inline const ::std::string& EndPointType_Name(EndPointType value) {
    return Line_EndPointType_Name(value);
  }
  static inline bool EndPointType_Parse(const ::std::string& name,
      EndPointType* value) {
    return Line_EndPointType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 life_time = 3;
  inline bool has_life_time() const;
  inline void clear_life_time();
  static const int kLifeTimeFieldNumber = 3;
  inline ::google::protobuf::int32 life_time() const;
  inline void set_life_time(::google::protobuf::int32 value);

  // repeated float coeffs = 7;
  inline int coeffs_size() const;
  inline void clear_coeffs();
  static const int kCoeffsFieldNumber = 7;
  inline float coeffs(int index) const;
  inline void set_coeffs(int index, float value);
  inline void add_coeffs(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      coeffs() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_coeffs();

  // repeated .CommonProto.Point end_points = 8;
  inline int end_points_size() const;
  inline void clear_end_points();
  static const int kEndPointsFieldNumber = 8;
  inline const ::CommonProto::Point& end_points(int index) const;
  inline ::CommonProto::Point* mutable_end_points(int index);
  inline ::CommonProto::Point* add_end_points();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Point >&
      end_points() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Point >*
      mutable_end_points();

  // optional int32 type = 9;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 9;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 source = 10;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 10;
  inline ::google::protobuf::int32 source() const;
  inline void set_source(::google::protobuf::int32 value);

  // repeated .CommonProto.Contour contours = 11;
  inline int contours_size() const;
  inline void clear_contours();
  static const int kContoursFieldNumber = 11;
  inline const ::CommonProto::Contour& contours(int index) const;
  inline ::CommonProto::Contour* mutable_contours(int index);
  inline ::CommonProto::Contour* add_contours();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Contour >&
      contours() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Contour >*
      mutable_contours();

  // optional float dist_to_front_wheel = 12;
  inline bool has_dist_to_front_wheel() const;
  inline void clear_dist_to_front_wheel();
  static const int kDistToFrontWheelFieldNumber = 12;
  inline float dist_to_front_wheel() const;
  inline void set_dist_to_front_wheel(float value);

  // optional float width = 13;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 13;
  inline float width() const;
  inline void set_width(float value);

  // optional int32 type_sibling = 14;
  inline bool has_type_sibling() const;
  inline void clear_type_sibling();
  static const int kTypeSiblingFieldNumber = 14;
  inline ::google::protobuf::int32 type_sibling() const;
  inline void set_type_sibling(::google::protobuf::int32 value);

  // optional float conf = 15;
  inline bool has_conf() const;
  inline void clear_conf();
  static const int kConfFieldNumber = 15;
  inline float conf() const;
  inline void set_conf(float value);

  // repeated float sigma_coeffs = 20;
  inline int sigma_coeffs_size() const;
  inline void clear_sigma_coeffs();
  static const int kSigmaCoeffsFieldNumber = 20;
  inline float sigma_coeffs(int index) const;
  inline void set_sigma_coeffs(int index, float value);
  inline void add_sigma_coeffs(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      sigma_coeffs() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_sigma_coeffs();

  // @@protoc_insertion_point(class_scope:CommonProto.Line)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_life_time();
  inline void clear_has_life_time();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_dist_to_front_wheel();
  inline void clear_has_dist_to_front_wheel();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_type_sibling();
  inline void clear_has_type_sibling();
  inline void set_has_conf();
  inline void clear_has_conf();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 life_time_;
  ::google::protobuf::RepeatedField< float > coeffs_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::Point > end_points_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 source_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::Contour > contours_;
  float dist_to_front_wheel_;
  float width_;
  ::google::protobuf::int32 type_sibling_;
  float conf_;
  ::google::protobuf::RepeatedField< float > sigma_coeffs_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Line* default_instance_;
};
// -------------------------------------------------------------------

class Lines : public ::google::protobuf::Message {
 public:
  Lines();
  virtual ~Lines();

  Lines(const Lines& from);

  inline Lines& operator=(const Lines& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Lines& default_instance();

  void Swap(Lines* other);

  // implements Message ----------------------------------------------

  Lines* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Lines& from);
  void MergeFrom(const Lines& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cam_id = 1;
  inline bool has_cam_id() const;
  inline void clear_cam_id();
  static const int kCamIdFieldNumber = 1;
  inline ::google::protobuf::int32 cam_id() const;
  inline void set_cam_id(::google::protobuf::int32 value);

  // repeated .CommonProto.Line lines = 2;
  inline int lines_size() const;
  inline void clear_lines();
  static const int kLinesFieldNumber = 2;
  inline const ::CommonProto::Line& lines(int index) const;
  inline ::CommonProto::Line* mutable_lines(int index);
  inline ::CommonProto::Line* add_lines();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Line >&
      lines() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Line >*
      mutable_lines();

  // @@protoc_insertion_point(class_scope:CommonProto.Lines)
 private:
  inline void set_has_cam_id();
  inline void clear_has_cam_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::Line > lines_;
  ::google::protobuf::int32 cam_id_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Lines* default_instance_;
};
// -------------------------------------------------------------------

class WorldSpaceInfo : public ::google::protobuf::Message {
 public:
  WorldSpaceInfo();
  virtual ~WorldSpaceInfo();

  WorldSpaceInfo(const WorldSpaceInfo& from);

  inline WorldSpaceInfo& operator=(const WorldSpaceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldSpaceInfo& default_instance();

  void Swap(WorldSpaceInfo* other);

  // implements Message ----------------------------------------------

  WorldSpaceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorldSpaceInfo& from);
  void MergeFrom(const WorldSpaceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float yaw = 1;
  inline bool has_yaw() const;
  inline void clear_yaw();
  static const int kYawFieldNumber = 1;
  inline float yaw() const;
  inline void set_yaw(float value);

  // optional .CommonProto.Velocity vel = 2;
  inline bool has_vel() const;
  inline void clear_vel();
  static const int kVelFieldNumber = 2;
  inline const ::CommonProto::Velocity& vel() const;
  inline ::CommonProto::Velocity* mutable_vel();
  inline ::CommonProto::Velocity* release_vel();
  inline void set_allocated_vel(::CommonProto::Velocity* vel);

  // optional float length = 3;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 3;
  inline float length() const;
  inline void set_length(float value);

  // optional float width = 4;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 4;
  inline float width() const;
  inline void set_width(float value);

  // optional float height = 5;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 5;
  inline float height() const;
  inline void set_height(float value);

  // optional .CommonProto.Polygon poly = 6;
  inline bool has_poly() const;
  inline void clear_poly();
  static const int kPolyFieldNumber = 6;
  inline const ::CommonProto::Polygon& poly() const;
  inline ::CommonProto::Polygon* mutable_poly();
  inline ::CommonProto::Polygon* release_poly();
  inline void set_allocated_poly(::CommonProto::Polygon* poly);

  // optional .CommonProto.Point position = 7;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 7;
  inline const ::CommonProto::Point& position() const;
  inline ::CommonProto::Point* mutable_position();
  inline ::CommonProto::Point* release_position();
  inline void set_allocated_position(::CommonProto::Point* position);

  // optional int32 traversable = 8;
  inline bool has_traversable() const;
  inline void clear_traversable();
  static const int kTraversableFieldNumber = 8;
  inline ::google::protobuf::int32 traversable() const;
  inline void set_traversable(::google::protobuf::int32 value);

  // optional float hmw = 9;
  inline bool has_hmw() const;
  inline void clear_hmw();
  static const int kHmwFieldNumber = 9;
  inline float hmw() const;
  inline void set_hmw(float value);

  // optional float ttc = 10;
  inline bool has_ttc() const;
  inline void clear_ttc();
  static const int kTtcFieldNumber = 10;
  inline float ttc() const;
  inline void set_ttc(float value);

  // optional int32 curr_lane = 11;
  inline bool has_curr_lane() const;
  inline void clear_curr_lane();
  static const int kCurrLaneFieldNumber = 11;
  inline ::google::protobuf::int32 curr_lane() const;
  inline void set_curr_lane(::google::protobuf::int32 value);

  // optional .CommonProto.Point position_obs = 12;
  inline bool has_position_obs() const;
  inline void clear_position_obs();
  static const int kPositionObsFieldNumber = 12;
  inline const ::CommonProto::Point& position_obs() const;
  inline ::CommonProto::Point* mutable_position_obs();
  inline ::CommonProto::Point* release_position_obs();
  inline void set_allocated_position_obs(::CommonProto::Point* position_obs);

  // optional float sigma_yaw = 30;
  inline bool has_sigma_yaw() const;
  inline void clear_sigma_yaw();
  static const int kSigmaYawFieldNumber = 30;
  inline float sigma_yaw() const;
  inline void set_sigma_yaw(float value);

  // repeated float sigma_vel = 31;
  inline int sigma_vel_size() const;
  inline void clear_sigma_vel();
  static const int kSigmaVelFieldNumber = 31;
  inline float sigma_vel(int index) const;
  inline void set_sigma_vel(int index, float value);
  inline void add_sigma_vel(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      sigma_vel() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_sigma_vel();

  // optional float sigma_width = 32;
  inline bool has_sigma_width() const;
  inline void clear_sigma_width();
  static const int kSigmaWidthFieldNumber = 32;
  inline float sigma_width() const;
  inline void set_sigma_width(float value);

  // optional float sigma_height = 33;
  inline bool has_sigma_height() const;
  inline void clear_sigma_height();
  static const int kSigmaHeightFieldNumber = 33;
  inline float sigma_height() const;
  inline void set_sigma_height(float value);

  // repeated float sigma_position = 34;
  inline int sigma_position_size() const;
  inline void clear_sigma_position();
  static const int kSigmaPositionFieldNumber = 34;
  inline float sigma_position(int index) const;
  inline void set_sigma_position(int index, float value);
  inline void add_sigma_position(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      sigma_position() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_sigma_position();

  // @@protoc_insertion_point(class_scope:CommonProto.WorldSpaceInfo)
 private:
  inline void set_has_yaw();
  inline void clear_has_yaw();
  inline void set_has_vel();
  inline void clear_has_vel();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_poly();
  inline void clear_has_poly();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_traversable();
  inline void clear_has_traversable();
  inline void set_has_hmw();
  inline void clear_has_hmw();
  inline void set_has_ttc();
  inline void clear_has_ttc();
  inline void set_has_curr_lane();
  inline void clear_has_curr_lane();
  inline void set_has_position_obs();
  inline void clear_has_position_obs();
  inline void set_has_sigma_yaw();
  inline void clear_has_sigma_yaw();
  inline void set_has_sigma_width();
  inline void clear_has_sigma_width();
  inline void set_has_sigma_height();
  inline void clear_has_sigma_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CommonProto::Velocity* vel_;
  float yaw_;
  float length_;
  float width_;
  float height_;
  ::CommonProto::Polygon* poly_;
  ::CommonProto::Point* position_;
  ::google::protobuf::int32 traversable_;
  float hmw_;
  float ttc_;
  ::google::protobuf::int32 curr_lane_;
  ::CommonProto::Point* position_obs_;
  ::google::protobuf::RepeatedField< float > sigma_vel_;
  float sigma_yaw_;
  float sigma_width_;
  ::google::protobuf::RepeatedField< float > sigma_position_;
  float sigma_height_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static WorldSpaceInfo* default_instance_;
};
// -------------------------------------------------------------------

class ImageSpaceInfo : public ::google::protobuf::Message {
 public:
  ImageSpaceInfo();
  virtual ~ImageSpaceInfo();

  ImageSpaceInfo(const ImageSpaceInfo& from);

  inline ImageSpaceInfo& operator=(const ImageSpaceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageSpaceInfo& default_instance();

  void Swap(ImageSpaceInfo* other);

  // implements Message ----------------------------------------------

  ImageSpaceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageSpaceInfo& from);
  void MergeFrom(const ImageSpaceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CommonProto.Rect rect = 1;
  inline bool has_rect() const;
  inline void clear_rect();
  static const int kRectFieldNumber = 1;
  inline const ::CommonProto::Rect& rect() const;
  inline ::CommonProto::Rect* mutable_rect();
  inline ::CommonProto::Rect* release_rect();
  inline void set_allocated_rect(::CommonProto::Rect* rect);

  // optional .CommonProto.Skeleton skeleton = 10;
  inline bool has_skeleton() const;
  inline void clear_skeleton();
  static const int kSkeletonFieldNumber = 10;
  inline const ::CommonProto::Skeleton& skeleton() const;
  inline ::CommonProto::Skeleton* mutable_skeleton();
  inline ::CommonProto::Skeleton* release_skeleton();
  inline void set_allocated_skeleton(::CommonProto::Skeleton* skeleton);

  // optional .CommonProto.Box3D box = 11;
  inline bool has_box() const;
  inline void clear_box();
  static const int kBoxFieldNumber = 11;
  inline const ::CommonProto::Box3D& box() const;
  inline ::CommonProto::Box3D* mutable_box();
  inline ::CommonProto::Box3D* release_box();
  inline void set_allocated_box(::CommonProto::Box3D* box);

  // optional .CommonProto.Polygon poly = 12;
  inline bool has_poly() const;
  inline void clear_poly();
  static const int kPolyFieldNumber = 12;
  inline const ::CommonProto::Polygon& poly() const;
  inline ::CommonProto::Polygon* mutable_poly();
  inline ::CommonProto::Polygon* release_poly();
  inline void set_allocated_poly(::CommonProto::Polygon* poly);

  // optional float sigma_width = 20;
  inline bool has_sigma_width() const;
  inline void clear_sigma_width();
  static const int kSigmaWidthFieldNumber = 20;
  inline float sigma_width() const;
  inline void set_sigma_width(float value);

  // optional float sigma_height = 21;
  inline bool has_sigma_height() const;
  inline void clear_sigma_height();
  static const int kSigmaHeightFieldNumber = 21;
  inline float sigma_height() const;
  inline void set_sigma_height(float value);

  // optional float sigma_x = 22;
  inline bool has_sigma_x() const;
  inline void clear_sigma_x();
  static const int kSigmaXFieldNumber = 22;
  inline float sigma_x() const;
  inline void set_sigma_x(float value);

  // optional float sigma_y = 23;
  inline bool has_sigma_y() const;
  inline void clear_sigma_y();
  static const int kSigmaYFieldNumber = 23;
  inline float sigma_y() const;
  inline void set_sigma_y(float value);

  // @@protoc_insertion_point(class_scope:CommonProto.ImageSpaceInfo)
 private:
  inline void set_has_rect();
  inline void clear_has_rect();
  inline void set_has_skeleton();
  inline void clear_has_skeleton();
  inline void set_has_box();
  inline void clear_has_box();
  inline void set_has_poly();
  inline void clear_has_poly();
  inline void set_has_sigma_width();
  inline void clear_has_sigma_width();
  inline void set_has_sigma_height();
  inline void clear_has_sigma_height();
  inline void set_has_sigma_x();
  inline void clear_has_sigma_x();
  inline void set_has_sigma_y();
  inline void clear_has_sigma_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CommonProto::Rect* rect_;
  ::CommonProto::Skeleton* skeleton_;
  ::CommonProto::Box3D* box_;
  ::CommonProto::Polygon* poly_;
  float sigma_width_;
  float sigma_height_;
  float sigma_x_;
  float sigma_y_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static ImageSpaceInfo* default_instance_;
};
// -------------------------------------------------------------------

class Obstacle : public ::google::protobuf::Message {
 public:
  Obstacle();
  virtual ~Obstacle();

  Obstacle(const Obstacle& from);

  inline Obstacle& operator=(const Obstacle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Obstacle& default_instance();

  void Swap(Obstacle* other);

  // implements Message ----------------------------------------------

  Obstacle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Obstacle& from);
  void MergeFrom(const Obstacle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 conf = 3;
  inline bool has_conf() const;
  inline void clear_conf();
  static const int kConfFieldNumber = 3;
  inline ::google::protobuf::int32 conf() const;
  inline void set_conf(::google::protobuf::int32 value);

  // optional int32 life_time = 4;
  inline bool has_life_time() const;
  inline void clear_life_time();
  static const int kLifeTimeFieldNumber = 4;
  inline ::google::protobuf::int32 life_time() const;
  inline void set_life_time(::google::protobuf::int32 value);

  // optional int32 age = 5;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 5;
  inline ::google::protobuf::int32 age() const;
  inline void set_age(::google::protobuf::int32 value);

  // optional .CommonProto.ImageSpaceInfo img_info = 6;
  inline bool has_img_info() const;
  inline void clear_img_info();
  static const int kImgInfoFieldNumber = 6;
  inline const ::CommonProto::ImageSpaceInfo& img_info() const;
  inline ::CommonProto::ImageSpaceInfo* mutable_img_info();
  inline ::CommonProto::ImageSpaceInfo* release_img_info();
  inline void set_allocated_img_info(::CommonProto::ImageSpaceInfo* img_info);

  // optional .CommonProto.WorldSpaceInfo world_info = 7;
  inline bool has_world_info() const;
  inline void clear_world_info();
  static const int kWorldInfoFieldNumber = 7;
  inline const ::CommonProto::WorldSpaceInfo& world_info() const;
  inline ::CommonProto::WorldSpaceInfo* mutable_world_info();
  inline ::CommonProto::WorldSpaceInfo* release_world_info();
  inline void set_allocated_world_info(::CommonProto::WorldSpaceInfo* world_info);

  // repeated int32 property = 13;
  inline int property_size() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 13;
  inline ::google::protobuf::int32 property(int index) const;
  inline void set_property(int index, ::google::protobuf::int32 value);
  inline void add_property(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      property() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_property();

  // repeated string property_name = 14;
  inline int property_name_size() const;
  inline void clear_property_name();
  static const int kPropertyNameFieldNumber = 14;
  inline const ::std::string& property_name(int index) const;
  inline ::std::string* mutable_property_name(int index);
  inline void set_property_name(int index, const ::std::string& value);
  inline void set_property_name(int index, const char* value);
  inline void set_property_name(int index, const char* value, size_t size);
  inline ::std::string* add_property_name();
  inline void add_property_name(const ::std::string& value);
  inline void add_property_name(const char* value);
  inline void add_property_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& property_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_property_name();

  // repeated int32 property_type = 15;
  inline int property_type_size() const;
  inline void clear_property_type();
  static const int kPropertyTypeFieldNumber = 15;
  inline ::google::protobuf::int32 property_type(int index) const;
  inline void set_property_type(int index, ::google::protobuf::int32 value);
  inline void add_property_type(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      property_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_property_type();

  // repeated float property_conf = 16;
  inline int property_conf_size() const;
  inline void clear_property_conf();
  static const int kPropertyConfFieldNumber = 16;
  inline float property_conf(int index) const;
  inline void set_property_conf(int index, float value);
  inline void add_property_conf(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      property_conf() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_property_conf();

  // @@protoc_insertion_point(class_scope:CommonProto.Obstacle)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_conf();
  inline void clear_has_conf();
  inline void set_has_life_time();
  inline void clear_has_life_time();
  inline void set_has_age();
  inline void clear_has_age();
  inline void set_has_img_info();
  inline void clear_has_img_info();
  inline void set_has_world_info();
  inline void clear_has_world_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 conf_;
  ::google::protobuf::int32 life_time_;
  ::CommonProto::ImageSpaceInfo* img_info_;
  ::CommonProto::WorldSpaceInfo* world_info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > property_;
  ::google::protobuf::RepeatedPtrField< ::std::string> property_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > property_type_;
  ::google::protobuf::RepeatedField< float > property_conf_;
  ::google::protobuf::int32 age_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Obstacle* default_instance_;
};
// -------------------------------------------------------------------

class Obstacles : public ::google::protobuf::Message {
 public:
  Obstacles();
  virtual ~Obstacles();

  Obstacles(const Obstacles& from);

  inline Obstacles& operator=(const Obstacles& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Obstacles& default_instance();

  void Swap(Obstacles* other);

  // implements Message ----------------------------------------------

  Obstacles* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Obstacles& from);
  void MergeFrom(const Obstacles& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cam_id = 1;
  inline bool has_cam_id() const;
  inline void clear_cam_id();
  static const int kCamIdFieldNumber = 1;
  inline ::google::protobuf::int32 cam_id() const;
  inline void set_cam_id(::google::protobuf::int32 value);

  // repeated .CommonProto.Obstacle obstacle = 2;
  inline int obstacle_size() const;
  inline void clear_obstacle();
  static const int kObstacleFieldNumber = 2;
  inline const ::CommonProto::Obstacle& obstacle(int index) const;
  inline ::CommonProto::Obstacle* mutable_obstacle(int index);
  inline ::CommonProto::Obstacle* add_obstacle();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Obstacle >&
      obstacle() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Obstacle >*
      mutable_obstacle();

  // optional float conf_scale = 3 [default = 0.1];
  inline bool has_conf_scale() const;
  inline void clear_conf_scale();
  static const int kConfScaleFieldNumber = 3;
  inline float conf_scale() const;
  inline void set_conf_scale(float value);

  // @@protoc_insertion_point(class_scope:CommonProto.Obstacles)
 private:
  inline void set_has_cam_id();
  inline void clear_has_cam_id();
  inline void set_has_conf_scale();
  inline void clear_has_conf_scale();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::Obstacle > obstacle_;
  ::google::protobuf::int32 cam_id_;
  float conf_scale_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Obstacles* default_instance_;
};
// -------------------------------------------------------------------

class FeatureMap : public ::google::protobuf::Message {
 public:
  FeatureMap();
  virtual ~FeatureMap();

  FeatureMap(const FeatureMap& from);

  inline FeatureMap& operator=(const FeatureMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureMap& default_instance();

  void Swap(FeatureMap* other);

  // implements Message ----------------------------------------------

  FeatureMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeatureMap& from);
  void MergeFrom(const FeatureMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:CommonProto.FeatureMap)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* data_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static FeatureMap* default_instance_;
};
// -------------------------------------------------------------------

class ObstacleRaw : public ::google::protobuf::Message {
 public:
  ObstacleRaw();
  virtual ~ObstacleRaw();

  ObstacleRaw(const ObstacleRaw& from);

  inline ObstacleRaw& operator=(const ObstacleRaw& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObstacleRaw& default_instance();

  void Swap(ObstacleRaw* other);

  // implements Message ----------------------------------------------

  ObstacleRaw* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObstacleRaw& from);
  void MergeFrom(const ObstacleRaw& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .CommonProto.Rect rect = 1;
  inline bool has_rect() const;
  inline void clear_rect();
  static const int kRectFieldNumber = 1;
  inline const ::CommonProto::Rect& rect() const;
  inline ::CommonProto::Rect* mutable_rect();
  inline ::CommonProto::Rect* release_rect();
  inline void set_allocated_rect(::CommonProto::Rect* rect);

  // required float conf = 2;
  inline bool has_conf() const;
  inline void clear_conf();
  static const int kConfFieldNumber = 2;
  inline float conf() const;
  inline void set_conf(float value);

  // required int32 model = 3;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 3;
  inline ::google::protobuf::int32 model() const;
  inline void set_model(::google::protobuf::int32 value);

  // optional int32 source = 4;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 4;
  inline ::google::protobuf::int32 source() const;
  inline void set_source(::google::protobuf::int32 value);

  // repeated int32 property = 6;
  inline int property_size() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 6;
  inline ::google::protobuf::int32 property(int index) const;
  inline void set_property(int index, ::google::protobuf::int32 value);
  inline void add_property(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      property() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_property();

  // repeated string property_name = 7;
  inline int property_name_size() const;
  inline void clear_property_name();
  static const int kPropertyNameFieldNumber = 7;
  inline const ::std::string& property_name(int index) const;
  inline ::std::string* mutable_property_name(int index);
  inline void set_property_name(int index, const ::std::string& value);
  inline void set_property_name(int index, const char* value);
  inline void set_property_name(int index, const char* value, size_t size);
  inline ::std::string* add_property_name();
  inline void add_property_name(const ::std::string& value);
  inline void add_property_name(const char* value);
  inline void add_property_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& property_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_property_name();

  // repeated int32 property_type = 8;
  inline int property_type_size() const;
  inline void clear_property_type();
  static const int kPropertyTypeFieldNumber = 8;
  inline ::google::protobuf::int32 property_type(int index) const;
  inline void set_property_type(int index, ::google::protobuf::int32 value);
  inline void add_property_type(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      property_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_property_type();

  // repeated float property_conf = 9;
  inline int property_conf_size() const;
  inline void clear_property_conf();
  static const int kPropertyConfFieldNumber = 9;
  inline float property_conf(int index) const;
  inline void set_property_conf(int index, float value);
  inline void add_property_conf(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      property_conf() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_property_conf();

  // @@protoc_insertion_point(class_scope:CommonProto.ObstacleRaw)
 private:
  inline void set_has_rect();
  inline void clear_has_rect();
  inline void set_has_conf();
  inline void clear_has_conf();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_source();
  inline void clear_has_source();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CommonProto::Rect* rect_;
  float conf_;
  ::google::protobuf::int32 model_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > property_;
  ::google::protobuf::RepeatedPtrField< ::std::string> property_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > property_type_;
  ::google::protobuf::RepeatedField< float > property_conf_;
  ::google::protobuf::int32 source_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static ObstacleRaw* default_instance_;
};
// -------------------------------------------------------------------

class ObstacleRaws : public ::google::protobuf::Message {
 public:
  ObstacleRaws();
  virtual ~ObstacleRaws();

  ObstacleRaws(const ObstacleRaws& from);

  inline ObstacleRaws& operator=(const ObstacleRaws& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObstacleRaws& default_instance();

  void Swap(ObstacleRaws* other);

  // implements Message ----------------------------------------------

  ObstacleRaws* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObstacleRaws& from);
  void MergeFrom(const ObstacleRaws& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cam_id = 1;
  inline bool has_cam_id() const;
  inline void clear_cam_id();
  static const int kCamIdFieldNumber = 1;
  inline ::google::protobuf::int32 cam_id() const;
  inline void set_cam_id(::google::protobuf::int32 value);

  // repeated .CommonProto.ObstacleRaw obstacle = 2;
  inline int obstacle_size() const;
  inline void clear_obstacle();
  static const int kObstacleFieldNumber = 2;
  inline const ::CommonProto::ObstacleRaw& obstacle(int index) const;
  inline ::CommonProto::ObstacleRaw* mutable_obstacle(int index);
  inline ::CommonProto::ObstacleRaw* add_obstacle();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >&
      obstacle() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >*
      mutable_obstacle();

  // optional float conf_scale = 3 [default = 0.1];
  inline bool has_conf_scale() const;
  inline void clear_conf_scale();
  static const int kConfScaleFieldNumber = 3;
  inline float conf_scale() const;
  inline void set_conf_scale(float value);

  // @@protoc_insertion_point(class_scope:CommonProto.ObstacleRaws)
 private:
  inline void set_has_cam_id();
  inline void clear_has_cam_id();
  inline void set_has_conf_scale();
  inline void clear_has_conf_scale();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw > obstacle_;
  ::google::protobuf::int32 cam_id_;
  float conf_scale_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static ObstacleRaws* default_instance_;
};
// -------------------------------------------------------------------

class FreeSpacePoints : public ::google::protobuf::Message {
 public:
  FreeSpacePoints();
  virtual ~FreeSpacePoints();

  FreeSpacePoints(const FreeSpacePoints& from);

  inline FreeSpacePoints& operator=(const FreeSpacePoints& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FreeSpacePoints& default_instance();

  void Swap(FreeSpacePoints* other);

  // implements Message ----------------------------------------------

  FreeSpacePoints* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FreeSpacePoints& from);
  void MergeFrom(const FreeSpacePoints& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 property = 3;
  inline int property_size() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 3;
  inline ::google::protobuf::int32 property(int index) const;
  inline void set_property(int index, ::google::protobuf::int32 value);
  inline void add_property(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      property() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_property();

  // optional int32 cam_id = 4;
  inline bool has_cam_id() const;
  inline void clear_cam_id();
  static const int kCamIdFieldNumber = 4;
  inline ::google::protobuf::int32 cam_id() const;
  inline void set_cam_id(::google::protobuf::int32 value);

  // repeated .CommonProto.Point pts_vcs = 5;
  inline int pts_vcs_size() const;
  inline void clear_pts_vcs();
  static const int kPtsVcsFieldNumber = 5;
  inline const ::CommonProto::Point& pts_vcs(int index) const;
  inline ::CommonProto::Point* mutable_pts_vcs(int index);
  inline ::CommonProto::Point* add_pts_vcs();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Point >&
      pts_vcs() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Point >*
      mutable_pts_vcs();

  // repeated .CommonProto.Point pts_img = 6;
  inline int pts_img_size() const;
  inline void clear_pts_img();
  static const int kPtsImgFieldNumber = 6;
  inline const ::CommonProto::Point& pts_img(int index) const;
  inline ::CommonProto::Point* mutable_pts_img(int index);
  inline ::CommonProto::Point* add_pts_img();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Point >&
      pts_img() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Point >*
      mutable_pts_img();

  // @@protoc_insertion_point(class_scope:CommonProto.FreeSpacePoints)
 private:
  inline void set_has_cam_id();
  inline void clear_has_cam_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > property_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::Point > pts_vcs_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::Point > pts_img_;
  ::google::protobuf::int32 cam_id_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static FreeSpacePoints* default_instance_;
};
// -------------------------------------------------------------------

class Box3DRaw : public ::google::protobuf::Message {
 public:
  Box3DRaw();
  virtual ~Box3DRaw();

  Box3DRaw(const Box3DRaw& from);

  inline Box3DRaw& operator=(const Box3DRaw& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Box3DRaw& default_instance();

  void Swap(Box3DRaw* other);

  // implements Message ----------------------------------------------

  Box3DRaw* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Box3DRaw& from);
  void MergeFrom(const Box3DRaw& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .CommonProto.ObstacleRaw percept = 1;
  inline bool has_percept() const;
  inline void clear_percept();
  static const int kPerceptFieldNumber = 1;
  inline const ::CommonProto::ObstacleRaw& percept() const;
  inline ::CommonProto::ObstacleRaw* mutable_percept();
  inline ::CommonProto::ObstacleRaw* release_percept();
  inline void set_allocated_percept(::CommonProto::ObstacleRaw* percept);

  // required .CommonProto.Box3D box = 2;
  inline bool has_box() const;
  inline void clear_box();
  static const int kBoxFieldNumber = 2;
  inline const ::CommonProto::Box3D& box() const;
  inline ::CommonProto::Box3D* mutable_box();
  inline ::CommonProto::Box3D* release_box();
  inline void set_allocated_box(::CommonProto::Box3D* box);

  // @@protoc_insertion_point(class_scope:CommonProto.Box3DRaw)
 private:
  inline void set_has_percept();
  inline void clear_has_percept();
  inline void set_has_box();
  inline void clear_has_box();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CommonProto::ObstacleRaw* percept_;
  ::CommonProto::Box3D* box_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Box3DRaw* default_instance_;
};
// -------------------------------------------------------------------

class Box3DRaws : public ::google::protobuf::Message {
 public:
  Box3DRaws();
  virtual ~Box3DRaws();

  Box3DRaws(const Box3DRaws& from);

  inline Box3DRaws& operator=(const Box3DRaws& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Box3DRaws& default_instance();

  void Swap(Box3DRaws* other);

  // implements Message ----------------------------------------------

  Box3DRaws* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Box3DRaws& from);
  void MergeFrom(const Box3DRaws& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cam_id = 1;
  inline bool has_cam_id() const;
  inline void clear_cam_id();
  static const int kCamIdFieldNumber = 1;
  inline ::google::protobuf::int32 cam_id() const;
  inline void set_cam_id(::google::protobuf::int32 value);

  // repeated .CommonProto.Box3DRaw box_3d = 2;
  inline int box_3d_size() const;
  inline void clear_box_3d();
  static const int kBox3DFieldNumber = 2;
  inline const ::CommonProto::Box3DRaw& box_3d(int index) const;
  inline ::CommonProto::Box3DRaw* mutable_box_3d(int index);
  inline ::CommonProto::Box3DRaw* add_box_3d();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Box3DRaw >&
      box_3d() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Box3DRaw >*
      mutable_box_3d();

  // @@protoc_insertion_point(class_scope:CommonProto.Box3DRaws)
 private:
  inline void set_has_cam_id();
  inline void clear_has_cam_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::Box3DRaw > box_3d_;
  ::google::protobuf::int32 cam_id_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Box3DRaws* default_instance_;
};
// -------------------------------------------------------------------

class Skeleton : public ::google::protobuf::Message {
 public:
  Skeleton();
  virtual ~Skeleton();

  Skeleton(const Skeleton& from);

  inline Skeleton& operator=(const Skeleton& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Skeleton& default_instance();

  void Swap(Skeleton* other);

  // implements Message ----------------------------------------------

  Skeleton* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Skeleton& from);
  void MergeFrom(const Skeleton& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated .CommonProto.SkeletonPoint skeleton = 2;
  inline int skeleton_size() const;
  inline void clear_skeleton();
  static const int kSkeletonFieldNumber = 2;
  inline const ::CommonProto::SkeletonPoint& skeleton(int index) const;
  inline ::CommonProto::SkeletonPoint* mutable_skeleton(int index);
  inline ::CommonProto::SkeletonPoint* add_skeleton();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::SkeletonPoint >&
      skeleton() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::SkeletonPoint >*
      mutable_skeleton();

  // @@protoc_insertion_point(class_scope:CommonProto.Skeleton)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::SkeletonPoint > skeleton_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Skeleton* default_instance_;
};
// -------------------------------------------------------------------

class SkeletonRaw : public ::google::protobuf::Message {
 public:
  SkeletonRaw();
  virtual ~SkeletonRaw();

  SkeletonRaw(const SkeletonRaw& from);

  inline SkeletonRaw& operator=(const SkeletonRaw& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkeletonRaw& default_instance();

  void Swap(SkeletonRaw* other);

  // implements Message ----------------------------------------------

  SkeletonRaw* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkeletonRaw& from);
  void MergeFrom(const SkeletonRaw& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .CommonProto.ObstacleRaw percept = 1;
  inline bool has_percept() const;
  inline void clear_percept();
  static const int kPerceptFieldNumber = 1;
  inline const ::CommonProto::ObstacleRaw& percept() const;
  inline ::CommonProto::ObstacleRaw* mutable_percept();
  inline ::CommonProto::ObstacleRaw* release_percept();
  inline void set_allocated_percept(::CommonProto::ObstacleRaw* percept);

  // repeated .CommonProto.SkeletonPoint skeleton = 2;
  inline int skeleton_size() const;
  inline void clear_skeleton();
  static const int kSkeletonFieldNumber = 2;
  inline const ::CommonProto::SkeletonPoint& skeleton(int index) const;
  inline ::CommonProto::SkeletonPoint* mutable_skeleton(int index);
  inline ::CommonProto::SkeletonPoint* add_skeleton();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::SkeletonPoint >&
      skeleton() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::SkeletonPoint >*
      mutable_skeleton();

  // @@protoc_insertion_point(class_scope:CommonProto.SkeletonRaw)
 private:
  inline void set_has_percept();
  inline void clear_has_percept();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CommonProto::ObstacleRaw* percept_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::SkeletonPoint > skeleton_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static SkeletonRaw* default_instance_;
};
// -------------------------------------------------------------------

class SkeletonRaws : public ::google::protobuf::Message {
 public:
  SkeletonRaws();
  virtual ~SkeletonRaws();

  SkeletonRaws(const SkeletonRaws& from);

  inline SkeletonRaws& operator=(const SkeletonRaws& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkeletonRaws& default_instance();

  void Swap(SkeletonRaws* other);

  // implements Message ----------------------------------------------

  SkeletonRaws* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkeletonRaws& from);
  void MergeFrom(const SkeletonRaws& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cam_id = 1;
  inline bool has_cam_id() const;
  inline void clear_cam_id();
  static const int kCamIdFieldNumber = 1;
  inline ::google::protobuf::int32 cam_id() const;
  inline void set_cam_id(::google::protobuf::int32 value);

  // repeated .CommonProto.SkeletonRaw skeleton_raw = 2;
  inline int skeleton_raw_size() const;
  inline void clear_skeleton_raw();
  static const int kSkeletonRawFieldNumber = 2;
  inline const ::CommonProto::SkeletonRaw& skeleton_raw(int index) const;
  inline ::CommonProto::SkeletonRaw* mutable_skeleton_raw(int index);
  inline ::CommonProto::SkeletonRaw* add_skeleton_raw();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::SkeletonRaw >&
      skeleton_raw() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::SkeletonRaw >*
      mutable_skeleton_raw();

  // @@protoc_insertion_point(class_scope:CommonProto.SkeletonRaws)
 private:
  inline void set_has_cam_id();
  inline void clear_has_cam_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::SkeletonRaw > skeleton_raw_;
  ::google::protobuf::int32 cam_id_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static SkeletonRaws* default_instance_;
};
// -------------------------------------------------------------------

class CameraMatrix : public ::google::protobuf::Message {
 public:
  CameraMatrix();
  virtual ~CameraMatrix();

  CameraMatrix(const CameraMatrix& from);

  inline CameraMatrix& operator=(const CameraMatrix& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraMatrix& default_instance();

  void Swap(CameraMatrix* other);

  // implements Message ----------------------------------------------

  CameraMatrix* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CameraMatrix& from);
  void MergeFrom(const CameraMatrix& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float mat_gnd2img = 1;
  inline int mat_gnd2img_size() const;
  inline void clear_mat_gnd2img();
  static const int kMatGnd2ImgFieldNumber = 1;
  inline float mat_gnd2img(int index) const;
  inline void set_mat_gnd2img(int index, float value);
  inline void add_mat_gnd2img(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      mat_gnd2img() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_mat_gnd2img();

  // repeated float mat_img2gnd = 2;
  inline int mat_img2gnd_size() const;
  inline void clear_mat_img2gnd();
  static const int kMatImg2GndFieldNumber = 2;
  inline float mat_img2gnd(int index) const;
  inline void set_mat_img2gnd(int index, float value);
  inline void add_mat_img2gnd(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      mat_img2gnd() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_mat_img2gnd();

  // repeated float mat_vcsgnd2img = 3;
  inline int mat_vcsgnd2img_size() const;
  inline void clear_mat_vcsgnd2img();
  static const int kMatVcsgnd2ImgFieldNumber = 3;
  inline float mat_vcsgnd2img(int index) const;
  inline void set_mat_vcsgnd2img(int index, float value);
  inline void add_mat_vcsgnd2img(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      mat_vcsgnd2img() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_mat_vcsgnd2img();

  // repeated float mat_img2vcsgnd = 4;
  inline int mat_img2vcsgnd_size() const;
  inline void clear_mat_img2vcsgnd();
  static const int kMatImg2VcsgndFieldNumber = 4;
  inline float mat_img2vcsgnd(int index) const;
  inline void set_mat_img2vcsgnd(int index, float value);
  inline void add_mat_img2vcsgnd(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      mat_img2vcsgnd() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_mat_img2vcsgnd();

  // repeated float mat_local2img = 5;
  inline int mat_local2img_size() const;
  inline void clear_mat_local2img();
  static const int kMatLocal2ImgFieldNumber = 5;
  inline float mat_local2img(int index) const;
  inline void set_mat_local2img(int index, float value);
  inline void add_mat_local2img(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      mat_local2img() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_mat_local2img();

  // repeated float mat_img2local = 6;
  inline int mat_img2local_size() const;
  inline void clear_mat_img2local();
  static const int kMatImg2LocalFieldNumber = 6;
  inline float mat_img2local(int index) const;
  inline void set_mat_img2local(int index, float value);
  inline void add_mat_img2local(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      mat_img2local() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_mat_img2local();

  // @@protoc_insertion_point(class_scope:CommonProto.CameraMatrix)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > mat_gnd2img_;
  ::google::protobuf::RepeatedField< float > mat_img2gnd_;
  ::google::protobuf::RepeatedField< float > mat_vcsgnd2img_;
  ::google::protobuf::RepeatedField< float > mat_img2vcsgnd_;
  ::google::protobuf::RepeatedField< float > mat_local2img_;
  ::google::protobuf::RepeatedField< float > mat_img2local_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static CameraMatrix* default_instance_;
};
// -------------------------------------------------------------------

class DistortParam : public ::google::protobuf::Message {
 public:
  DistortParam();
  virtual ~DistortParam();

  DistortParam(const DistortParam& from);

  inline DistortParam& operator=(const DistortParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DistortParam& default_instance();

  void Swap(DistortParam* other);

  // implements Message ----------------------------------------------

  DistortParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DistortParam& from);
  void MergeFrom(const DistortParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float param = 1;
  inline int param_size() const;
  inline void clear_param();
  static const int kParamFieldNumber = 1;
  inline float param(int index) const;
  inline void set_param(int index, float value);
  inline void add_param(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      param() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_param();

  // @@protoc_insertion_point(class_scope:CommonProto.DistortParam)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > param_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static DistortParam* default_instance_;
};
// -------------------------------------------------------------------

class VCSParam : public ::google::protobuf::Message {
 public:
  VCSParam();
  virtual ~VCSParam();

  VCSParam(const VCSParam& from);

  inline VCSParam& operator=(const VCSParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VCSParam& default_instance();

  void Swap(VCSParam* other);

  // implements Message ----------------------------------------------

  VCSParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VCSParam& from);
  void MergeFrom(const VCSParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float rotation = 1;
  inline int rotation_size() const;
  inline void clear_rotation();
  static const int kRotationFieldNumber = 1;
  inline float rotation(int index) const;
  inline void set_rotation(int index, float value);
  inline void add_rotation(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      rotation() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_rotation();

  // repeated float translation = 2;
  inline int translation_size() const;
  inline void clear_translation();
  static const int kTranslationFieldNumber = 2;
  inline float translation(int index) const;
  inline void set_translation(int index, float value);
  inline void add_translation(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      translation() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_translation();

  // @@protoc_insertion_point(class_scope:CommonProto.VCSParam)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > rotation_;
  ::google::protobuf::RepeatedField< float > translation_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static VCSParam* default_instance_;
};
// -------------------------------------------------------------------

class CameraParam : public ::google::protobuf::Message {
 public:
  CameraParam();
  virtual ~CameraParam();

  CameraParam(const CameraParam& from);

  inline CameraParam& operator=(const CameraParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraParam& default_instance();

  void Swap(CameraParam* other);

  // implements Message ----------------------------------------------

  CameraParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CameraParam& from);
  void MergeFrom(const CameraParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float focal_u = 1;
  inline bool has_focal_u() const;
  inline void clear_focal_u();
  static const int kFocalUFieldNumber = 1;
  inline float focal_u() const;
  inline void set_focal_u(float value);

  // required float focal_v = 2;
  inline bool has_focal_v() const;
  inline void clear_focal_v();
  static const int kFocalVFieldNumber = 2;
  inline float focal_v() const;
  inline void set_focal_v(float value);

  // required float center_u = 3;
  inline bool has_center_u() const;
  inline void clear_center_u();
  static const int kCenterUFieldNumber = 3;
  inline float center_u() const;
  inline void set_center_u(float value);

  // required float center_v = 4;
  inline bool has_center_v() const;
  inline void clear_center_v();
  static const int kCenterVFieldNumber = 4;
  inline float center_v() const;
  inline void set_center_v(float value);

  // required float camera_x = 5;
  inline bool has_camera_x() const;
  inline void clear_camera_x();
  static const int kCameraXFieldNumber = 5;
  inline float camera_x() const;
  inline void set_camera_x(float value);

  // required float camera_y = 6;
  inline bool has_camera_y() const;
  inline void clear_camera_y();
  static const int kCameraYFieldNumber = 6;
  inline float camera_y() const;
  inline void set_camera_y(float value);

  // required float camera_z = 7;
  inline bool has_camera_z() const;
  inline void clear_camera_z();
  static const int kCameraZFieldNumber = 7;
  inline float camera_z() const;
  inline void set_camera_z(float value);

  // required float pitch = 8;
  inline bool has_pitch() const;
  inline void clear_pitch();
  static const int kPitchFieldNumber = 8;
  inline float pitch() const;
  inline void set_pitch(float value);

  // required float yaw = 9;
  inline bool has_yaw() const;
  inline void clear_yaw();
  static const int kYawFieldNumber = 9;
  inline float yaw() const;
  inline void set_yaw(float value);

  // required float roll = 10;
  inline bool has_roll() const;
  inline void clear_roll();
  static const int kRollFieldNumber = 10;
  inline float roll() const;
  inline void set_roll(float value);

  // optional int32 type = 11 [default = 0];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 11;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional float fov = 12;
  inline bool has_fov() const;
  inline void clear_fov();
  static const int kFovFieldNumber = 12;
  inline float fov() const;
  inline void set_fov(float value);

  // optional int32 version = 13 [default = 0];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 13;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional .CommonProto.CalibrationStatus cali_status = 14;
  inline bool has_cali_status() const;
  inline void clear_cali_status();
  static const int kCaliStatusFieldNumber = 14;
  inline ::CommonProto::CalibrationStatus cali_status() const;
  inline void set_cali_status(::CommonProto::CalibrationStatus value);

  // optional .CommonProto.DistortParam distort = 20;
  inline bool has_distort() const;
  inline void clear_distort();
  static const int kDistortFieldNumber = 20;
  inline const ::CommonProto::DistortParam& distort() const;
  inline ::CommonProto::DistortParam* mutable_distort();
  inline ::CommonProto::DistortParam* release_distort();
  inline void set_allocated_distort(::CommonProto::DistortParam* distort);

  // optional .CommonProto.VCSParam vcs = 21;
  inline bool has_vcs() const;
  inline void clear_vcs();
  static const int kVcsFieldNumber = 21;
  inline const ::CommonProto::VCSParam& vcs() const;
  inline ::CommonProto::VCSParam* mutable_vcs();
  inline ::CommonProto::VCSParam* release_vcs();
  inline void set_allocated_vcs(::CommonProto::VCSParam* vcs);

  // optional .CommonProto.CameraMatrix mat = 30;
  inline bool has_mat() const;
  inline void clear_mat();
  static const int kMatFieldNumber = 30;
  inline const ::CommonProto::CameraMatrix& mat() const;
  inline ::CommonProto::CameraMatrix* mutable_mat();
  inline ::CommonProto::CameraMatrix* release_mat();
  inline void set_allocated_mat(::CommonProto::CameraMatrix* mat);

  // optional string vendor = 50;
  inline bool has_vendor() const;
  inline void clear_vendor();
  static const int kVendorFieldNumber = 50;
  inline const ::std::string& vendor() const;
  inline void set_vendor(const ::std::string& value);
  inline void set_vendor(const char* value);
  inline void set_vendor(const char* value, size_t size);
  inline ::std::string* mutable_vendor();
  inline ::std::string* release_vendor();
  inline void set_allocated_vendor(::std::string* vendor);

  // @@protoc_insertion_point(class_scope:CommonProto.CameraParam)
 private:
  inline void set_has_focal_u();
  inline void clear_has_focal_u();
  inline void set_has_focal_v();
  inline void clear_has_focal_v();
  inline void set_has_center_u();
  inline void clear_has_center_u();
  inline void set_has_center_v();
  inline void clear_has_center_v();
  inline void set_has_camera_x();
  inline void clear_has_camera_x();
  inline void set_has_camera_y();
  inline void clear_has_camera_y();
  inline void set_has_camera_z();
  inline void clear_has_camera_z();
  inline void set_has_pitch();
  inline void clear_has_pitch();
  inline void set_has_yaw();
  inline void clear_has_yaw();
  inline void set_has_roll();
  inline void clear_has_roll();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_fov();
  inline void clear_has_fov();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_cali_status();
  inline void clear_has_cali_status();
  inline void set_has_distort();
  inline void clear_has_distort();
  inline void set_has_vcs();
  inline void clear_has_vcs();
  inline void set_has_mat();
  inline void clear_has_mat();
  inline void set_has_vendor();
  inline void clear_has_vendor();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float focal_u_;
  float focal_v_;
  float center_u_;
  float center_v_;
  float camera_x_;
  float camera_y_;
  float camera_z_;
  float pitch_;
  float yaw_;
  float roll_;
  ::google::protobuf::int32 type_;
  float fov_;
  ::google::protobuf::int32 version_;
  int cali_status_;
  ::CommonProto::DistortParam* distort_;
  ::CommonProto::VCSParam* vcs_;
  ::CommonProto::CameraMatrix* mat_;
  ::std::string* vendor_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static CameraParam* default_instance_;
};
// -------------------------------------------------------------------

class MotionFrame : public ::google::protobuf::Message {
 public:
  MotionFrame();
  virtual ~MotionFrame();

  MotionFrame(const MotionFrame& from);

  inline MotionFrame& operator=(const MotionFrame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MotionFrame& default_instance();

  void Swap(MotionFrame* other);

  // implements Message ----------------------------------------------

  MotionFrame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MotionFrame& from);
  void MergeFrom(const MotionFrame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float speed = 1;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 1;
  inline float speed() const;
  inline void set_speed(float value);

  // optional float acc = 2;
  inline bool has_acc() const;
  inline void clear_acc();
  static const int kAccFieldNumber = 2;
  inline float acc() const;
  inline void set_acc(float value);

  // required float yaw_rate = 3;
  inline bool has_yaw_rate() const;
  inline void clear_yaw_rate();
  static const int kYawRateFieldNumber = 3;
  inline float yaw_rate() const;
  inline void set_yaw_rate(float value);

  // required int64 time_stamp = 4;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 4;
  inline ::google::protobuf::int64 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::int64 value);

  // optional float turning_radius = 5;
  inline bool has_turning_radius() const;
  inline void clear_turning_radius();
  static const int kTurningRadiusFieldNumber = 5;
  inline float turning_radius() const;
  inline void set_turning_radius(float value);

  // optional bool is_stable = 6;
  inline bool has_is_stable() const;
  inline void clear_is_stable();
  static const int kIsStableFieldNumber = 6;
  inline bool is_stable() const;
  inline void set_is_stable(bool value);

  // @@protoc_insertion_point(class_scope:CommonProto.MotionFrame)
 private:
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_acc();
  inline void clear_has_acc();
  inline void set_has_yaw_rate();
  inline void clear_has_yaw_rate();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();
  inline void set_has_turning_radius();
  inline void clear_has_turning_radius();
  inline void set_has_is_stable();
  inline void clear_has_is_stable();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float speed_;
  float acc_;
  ::google::protobuf::int64 time_stamp_;
  float yaw_rate_;
  float turning_radius_;
  bool is_stable_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static MotionFrame* default_instance_;
};
// -------------------------------------------------------------------

class OdometryFrame : public ::google::protobuf::Message {
 public:
  OdometryFrame();
  virtual ~OdometryFrame();

  OdometryFrame(const OdometryFrame& from);

  inline OdometryFrame& operator=(const OdometryFrame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OdometryFrame& default_instance();

  void Swap(OdometryFrame* other);

  // implements Message ----------------------------------------------

  OdometryFrame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OdometryFrame& from);
  void MergeFrom(const OdometryFrame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // required float yaw = 3;
  inline bool has_yaw() const;
  inline void clear_yaw();
  static const int kYawFieldNumber = 3;
  inline float yaw() const;
  inline void set_yaw(float value);

  // required float speed = 4;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 4;
  inline float speed() const;
  inline void set_speed(float value);

  // required float yaw_rate = 5;
  inline bool has_yaw_rate() const;
  inline void clear_yaw_rate();
  static const int kYawRateFieldNumber = 5;
  inline float yaw_rate() const;
  inline void set_yaw_rate(float value);

  // required int64 time_stamp = 6;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 6;
  inline ::google::protobuf::int64 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CommonProto.OdometryFrame)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_yaw();
  inline void clear_has_yaw();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_yaw_rate();
  inline void clear_has_yaw_rate();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  float yaw_;
  float speed_;
  ::google::protobuf::int64 time_stamp_;
  float yaw_rate_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static OdometryFrame* default_instance_;
};
// -------------------------------------------------------------------

class SerializedData : public ::google::protobuf::Message {
 public:
  SerializedData();
  virtual ~SerializedData();

  SerializedData(const SerializedData& from);

  inline SerializedData& operator=(const SerializedData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SerializedData& default_instance();

  void Swap(SerializedData* other);

  // implements Message ----------------------------------------------

  SerializedData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SerializedData& from);
  void MergeFrom(const SerializedData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required bytes proto = 2;
  inline bool has_proto() const;
  inline void clear_proto();
  static const int kProtoFieldNumber = 2;
  inline const ::std::string& proto() const;
  inline void set_proto(const ::std::string& value);
  inline void set_proto(const char* value);
  inline void set_proto(const void* value, size_t size);
  inline ::std::string* mutable_proto();
  inline ::std::string* release_proto();
  inline void set_allocated_proto(::std::string* proto);

  // required int32 channel = 4 [default = 0];
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 4;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // required bool with_data_field = 5 [default = true];
  inline bool has_with_data_field() const;
  inline void clear_with_data_field();
  static const int kWithDataFieldFieldNumber = 5;
  inline bool with_data_field() const;
  inline void set_with_data_field(bool value);

  // @@protoc_insertion_point(class_scope:CommonProto.SerializedData)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_proto();
  inline void clear_has_proto();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_with_data_field();
  inline void clear_has_with_data_field();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* type_;
  ::std::string* proto_;
  ::google::protobuf::int32 channel_;
  bool with_data_field_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static SerializedData* default_instance_;
};
// -------------------------------------------------------------------

class DataDescriptor : public ::google::protobuf::Message {
 public:
  DataDescriptor();
  virtual ~DataDescriptor();

  DataDescriptor(const DataDescriptor& from);

  inline DataDescriptor& operator=(const DataDescriptor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataDescriptor& default_instance();

  void Swap(DataDescriptor* other);

  // implements Message ----------------------------------------------

  DataDescriptor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataDescriptor& from);
  void MergeFrom(const DataDescriptor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional .CommonProto.SerializedData data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::CommonProto::SerializedData& data() const;
  inline ::CommonProto::SerializedData* mutable_data();
  inline ::CommonProto::SerializedData* release_data();
  inline void set_allocated_data(::CommonProto::SerializedData* data);

  // @@protoc_insertion_point(class_scope:CommonProto.DataDescriptor)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* type_;
  ::CommonProto::SerializedData* data_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static DataDescriptor* default_instance_;
};
// -------------------------------------------------------------------

class Color : public ::google::protobuf::Message {
 public:
  Color();
  virtual ~Color();

  Color(const Color& from);

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Color& default_instance();

  void Swap(Color* other);

  // implements Message ----------------------------------------------

  Color* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 b = 1;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 1;
  inline ::google::protobuf::uint32 b() const;
  inline void set_b(::google::protobuf::uint32 value);

  // required uint32 g = 2;
  inline bool has_g() const;
  inline void clear_g();
  static const int kGFieldNumber = 2;
  inline ::google::protobuf::uint32 g() const;
  inline void set_g(::google::protobuf::uint32 value);

  // required uint32 r = 3;
  inline bool has_r() const;
  inline void clear_r();
  static const int kRFieldNumber = 3;
  inline ::google::protobuf::uint32 r() const;
  inline void set_r(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CommonProto.Color)
 private:
  inline void set_has_b();
  inline void clear_has_b();
  inline void set_has_g();
  inline void clear_has_g();
  inline void set_has_r();
  inline void clear_has_r();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 b_;
  ::google::protobuf::uint32 g_;
  ::google::protobuf::uint32 r_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Color* default_instance_;
};
// -------------------------------------------------------------------

class ParsingSetting : public ::google::protobuf::Message {
 public:
  ParsingSetting();
  virtual ~ParsingSetting();

  ParsingSetting(const ParsingSetting& from);

  inline ParsingSetting& operator=(const ParsingSetting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParsingSetting& default_instance();

  void Swap(ParsingSetting* other);

  // implements Message ----------------------------------------------

  ParsingSetting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParsingSetting& from);
  void MergeFrom(const ParsingSetting& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 parsing_type = 1;
  inline bool has_parsing_type() const;
  inline void clear_parsing_type();
  static const int kParsingTypeFieldNumber = 1;
  inline ::google::protobuf::int32 parsing_type() const;
  inline void set_parsing_type(::google::protobuf::int32 value);

  // required int32 parsing_channels = 2;
  inline bool has_parsing_channels() const;
  inline void clear_parsing_channels();
  static const int kParsingChannelsFieldNumber = 2;
  inline ::google::protobuf::int32 parsing_channels() const;
  inline void set_parsing_channels(::google::protobuf::int32 value);

  // repeated uint64 channel_labels = 3;
  inline int channel_labels_size() const;
  inline void clear_channel_labels();
  static const int kChannelLabelsFieldNumber = 3;
  inline ::google::protobuf::uint64 channel_labels(int index) const;
  inline void set_channel_labels(int index, ::google::protobuf::uint64 value);
  inline void add_channel_labels(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      channel_labels() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_channel_labels();

  // repeated .CommonProto.Color channel_colors = 4;
  inline int channel_colors_size() const;
  inline void clear_channel_colors();
  static const int kChannelColorsFieldNumber = 4;
  inline const ::CommonProto::Color& channel_colors(int index) const;
  inline ::CommonProto::Color* mutable_channel_colors(int index);
  inline ::CommonProto::Color* add_channel_colors();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Color >&
      channel_colors() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Color >*
      mutable_channel_colors();

  // repeated int32 freespace_channels = 5;
  inline int freespace_channels_size() const;
  inline void clear_freespace_channels();
  static const int kFreespaceChannelsFieldNumber = 5;
  inline ::google::protobuf::int32 freespace_channels(int index) const;
  inline void set_freespace_channels(int index, ::google::protobuf::int32 value);
  inline void add_freespace_channels(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      freespace_channels() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_freespace_channels();

  // repeated int32 boundspace_channels = 6;
  inline int boundspace_channels_size() const;
  inline void clear_boundspace_channels();
  static const int kBoundspaceChannelsFieldNumber = 6;
  inline ::google::protobuf::int32 boundspace_channels(int index) const;
  inline void set_boundspace_channels(int index, ::google::protobuf::int32 value);
  inline void add_boundspace_channels(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      boundspace_channels() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_boundspace_channels();

  // @@protoc_insertion_point(class_scope:CommonProto.ParsingSetting)
 private:
  inline void set_has_parsing_type();
  inline void clear_has_parsing_type();
  inline void set_has_parsing_channels();
  inline void clear_has_parsing_channels();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 parsing_type_;
  ::google::protobuf::int32 parsing_channels_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > channel_labels_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::Color > channel_colors_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > freespace_channels_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > boundspace_channels_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static ParsingSetting* default_instance_;
};
// ===================================================================


// ===================================================================

// Point

// required float x = 1;
inline bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Point::x() const {
  // @@protoc_insertion_point(field_get:CommonProto.Point.x)
  return x_;
}
inline void Point::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Point.x)
}

// required float y = 2;
inline bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Point::y() const {
  // @@protoc_insertion_point(field_get:CommonProto.Point.y)
  return y_;
}
inline void Point::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Point.y)
}

// optional float z = 3;
inline bool Point::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Point::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Point::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Point::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Point::z() const {
  // @@protoc_insertion_point(field_get:CommonProto.Point.z)
  return z_;
}
inline void Point::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Point.z)
}

// -------------------------------------------------------------------

// PointI

// required int32 x = 1;
inline bool PointI::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PointI::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PointI::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PointI::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 PointI::x() const {
  // @@protoc_insertion_point(field_get:CommonProto.PointI.x)
  return x_;
}
inline void PointI::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.PointI.x)
}

// required int32 y = 2;
inline bool PointI::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PointI::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PointI::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PointI::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 PointI::y() const {
  // @@protoc_insertion_point(field_get:CommonProto.PointI.y)
  return y_;
}
inline void PointI::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.PointI.y)
}

// optional int32 z = 3;
inline bool PointI::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PointI::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PointI::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PointI::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline ::google::protobuf::int32 PointI::z() const {
  // @@protoc_insertion_point(field_get:CommonProto.PointI.z)
  return z_;
}
inline void PointI::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.PointI.z)
}

// -------------------------------------------------------------------

// Contour

// repeated .CommonProto.Point pts = 1;
inline int Contour::pts_size() const {
  return pts_.size();
}
inline void Contour::clear_pts() {
  pts_.Clear();
}
inline const ::CommonProto::Point& Contour::pts(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.Contour.pts)
  return pts_.Get(index);
}
inline ::CommonProto::Point* Contour::mutable_pts(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.Contour.pts)
  return pts_.Mutable(index);
}
inline ::CommonProto::Point* Contour::add_pts() {
  // @@protoc_insertion_point(field_add:CommonProto.Contour.pts)
  return pts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Point >&
Contour::pts() const {
  // @@protoc_insertion_point(field_list:CommonProto.Contour.pts)
  return pts_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Point >*
Contour::mutable_pts() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.Contour.pts)
  return &pts_;
}

// -------------------------------------------------------------------

// Polygon

// repeated .CommonProto.Point pts = 1;
inline int Polygon::pts_size() const {
  return pts_.size();
}
inline void Polygon::clear_pts() {
  pts_.Clear();
}
inline const ::CommonProto::Point& Polygon::pts(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.Polygon.pts)
  return pts_.Get(index);
}
inline ::CommonProto::Point* Polygon::mutable_pts(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.Polygon.pts)
  return pts_.Mutable(index);
}
inline ::CommonProto::Point* Polygon::add_pts() {
  // @@protoc_insertion_point(field_add:CommonProto.Polygon.pts)
  return pts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Point >&
Polygon::pts() const {
  // @@protoc_insertion_point(field_list:CommonProto.Polygon.pts)
  return pts_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Point >*
Polygon::mutable_pts() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.Polygon.pts)
  return &pts_;
}

// -------------------------------------------------------------------

// Rect

// required float left = 1;
inline bool Rect::has_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rect::set_has_left() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Rect::clear_has_left() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Rect::clear_left() {
  left_ = 0;
  clear_has_left();
}
inline float Rect::left() const {
  // @@protoc_insertion_point(field_get:CommonProto.Rect.left)
  return left_;
}
inline void Rect::set_left(float value) {
  set_has_left();
  left_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Rect.left)
}

// required float top = 2;
inline bool Rect::has_top() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Rect::set_has_top() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Rect::clear_has_top() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Rect::clear_top() {
  top_ = 0;
  clear_has_top();
}
inline float Rect::top() const {
  // @@protoc_insertion_point(field_get:CommonProto.Rect.top)
  return top_;
}
inline void Rect::set_top(float value) {
  set_has_top();
  top_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Rect.top)
}

// required float right = 3;
inline bool Rect::has_right() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Rect::set_has_right() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Rect::clear_has_right() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Rect::clear_right() {
  right_ = 0;
  clear_has_right();
}
inline float Rect::right() const {
  // @@protoc_insertion_point(field_get:CommonProto.Rect.right)
  return right_;
}
inline void Rect::set_right(float value) {
  set_has_right();
  right_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Rect.right)
}

// required float bottom = 4;
inline bool Rect::has_bottom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Rect::set_has_bottom() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Rect::clear_has_bottom() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Rect::clear_bottom() {
  bottom_ = 0;
  clear_has_bottom();
}
inline float Rect::bottom() const {
  // @@protoc_insertion_point(field_get:CommonProto.Rect.bottom)
  return bottom_;
}
inline void Rect::set_bottom(float value) {
  set_has_bottom();
  bottom_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Rect.bottom)
}

// -------------------------------------------------------------------

// OBBox2D

// required .CommonProto.Point corner = 1;
inline bool OBBox2D::has_corner() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OBBox2D::set_has_corner() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OBBox2D::clear_has_corner() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OBBox2D::clear_corner() {
  if (corner_ != NULL) corner_->::CommonProto::Point::Clear();
  clear_has_corner();
}
inline const ::CommonProto::Point& OBBox2D::corner() const {
  // @@protoc_insertion_point(field_get:CommonProto.OBBox2D.corner)
  return corner_ != NULL ? *corner_ : *default_instance_->corner_;
}
inline ::CommonProto::Point* OBBox2D::mutable_corner() {
  set_has_corner();
  if (corner_ == NULL) corner_ = new ::CommonProto::Point;
  // @@protoc_insertion_point(field_mutable:CommonProto.OBBox2D.corner)
  return corner_;
}
inline ::CommonProto::Point* OBBox2D::release_corner() {
  clear_has_corner();
  ::CommonProto::Point* temp = corner_;
  corner_ = NULL;
  return temp;
}
inline void OBBox2D::set_allocated_corner(::CommonProto::Point* corner) {
  delete corner_;
  corner_ = corner;
  if (corner) {
    set_has_corner();
  } else {
    clear_has_corner();
  }
  // @@protoc_insertion_point(field_set_allocated:CommonProto.OBBox2D.corner)
}

// repeated .CommonProto.Point axes_pts = 2;
inline int OBBox2D::axes_pts_size() const {
  return axes_pts_.size();
}
inline void OBBox2D::clear_axes_pts() {
  axes_pts_.Clear();
}
inline const ::CommonProto::Point& OBBox2D::axes_pts(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.OBBox2D.axes_pts)
  return axes_pts_.Get(index);
}
inline ::CommonProto::Point* OBBox2D::mutable_axes_pts(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.OBBox2D.axes_pts)
  return axes_pts_.Mutable(index);
}
inline ::CommonProto::Point* OBBox2D::add_axes_pts() {
  // @@protoc_insertion_point(field_add:CommonProto.OBBox2D.axes_pts)
  return axes_pts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Point >&
OBBox2D::axes_pts() const {
  // @@protoc_insertion_point(field_list:CommonProto.OBBox2D.axes_pts)
  return axes_pts_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Point >*
OBBox2D::mutable_axes_pts() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.OBBox2D.axes_pts)
  return &axes_pts_;
}

// repeated float size = 3;
inline int OBBox2D::size_size() const {
  return size_.size();
}
inline void OBBox2D::clear_size() {
  size_.Clear();
}
inline float OBBox2D::size(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.OBBox2D.size)
  return size_.Get(index);
}
inline void OBBox2D::set_size(int index, float value) {
  size_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.OBBox2D.size)
}
inline void OBBox2D::add_size(float value) {
  size_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.OBBox2D.size)
}
inline const ::google::protobuf::RepeatedField< float >&
OBBox2D::size() const {
  // @@protoc_insertion_point(field_list:CommonProto.OBBox2D.size)
  return size_;
}
inline ::google::protobuf::RepeatedField< float >*
OBBox2D::mutable_size() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.OBBox2D.size)
  return &size_;
}

// -------------------------------------------------------------------

// Box3D

// required .CommonProto.Point lower_lt = 1;
inline bool Box3D::has_lower_lt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Box3D::set_has_lower_lt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Box3D::clear_has_lower_lt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Box3D::clear_lower_lt() {
  if (lower_lt_ != NULL) lower_lt_->::CommonProto::Point::Clear();
  clear_has_lower_lt();
}
inline const ::CommonProto::Point& Box3D::lower_lt() const {
  // @@protoc_insertion_point(field_get:CommonProto.Box3D.lower_lt)
  return lower_lt_ != NULL ? *lower_lt_ : *default_instance_->lower_lt_;
}
inline ::CommonProto::Point* Box3D::mutable_lower_lt() {
  set_has_lower_lt();
  if (lower_lt_ == NULL) lower_lt_ = new ::CommonProto::Point;
  // @@protoc_insertion_point(field_mutable:CommonProto.Box3D.lower_lt)
  return lower_lt_;
}
inline ::CommonProto::Point* Box3D::release_lower_lt() {
  clear_has_lower_lt();
  ::CommonProto::Point* temp = lower_lt_;
  lower_lt_ = NULL;
  return temp;
}
inline void Box3D::set_allocated_lower_lt(::CommonProto::Point* lower_lt) {
  delete lower_lt_;
  lower_lt_ = lower_lt;
  if (lower_lt) {
    set_has_lower_lt();
  } else {
    clear_has_lower_lt();
  }
  // @@protoc_insertion_point(field_set_allocated:CommonProto.Box3D.lower_lt)
}

// required .CommonProto.Point lower_lb = 2;
inline bool Box3D::has_lower_lb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Box3D::set_has_lower_lb() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Box3D::clear_has_lower_lb() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Box3D::clear_lower_lb() {
  if (lower_lb_ != NULL) lower_lb_->::CommonProto::Point::Clear();
  clear_has_lower_lb();
}
inline const ::CommonProto::Point& Box3D::lower_lb() const {
  // @@protoc_insertion_point(field_get:CommonProto.Box3D.lower_lb)
  return lower_lb_ != NULL ? *lower_lb_ : *default_instance_->lower_lb_;
}
inline ::CommonProto::Point* Box3D::mutable_lower_lb() {
  set_has_lower_lb();
  if (lower_lb_ == NULL) lower_lb_ = new ::CommonProto::Point;
  // @@protoc_insertion_point(field_mutable:CommonProto.Box3D.lower_lb)
  return lower_lb_;
}
inline ::CommonProto::Point* Box3D::release_lower_lb() {
  clear_has_lower_lb();
  ::CommonProto::Point* temp = lower_lb_;
  lower_lb_ = NULL;
  return temp;
}
inline void Box3D::set_allocated_lower_lb(::CommonProto::Point* lower_lb) {
  delete lower_lb_;
  lower_lb_ = lower_lb;
  if (lower_lb) {
    set_has_lower_lb();
  } else {
    clear_has_lower_lb();
  }
  // @@protoc_insertion_point(field_set_allocated:CommonProto.Box3D.lower_lb)
}

// required .CommonProto.Point lower_rb = 3;
inline bool Box3D::has_lower_rb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Box3D::set_has_lower_rb() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Box3D::clear_has_lower_rb() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Box3D::clear_lower_rb() {
  if (lower_rb_ != NULL) lower_rb_->::CommonProto::Point::Clear();
  clear_has_lower_rb();
}
inline const ::CommonProto::Point& Box3D::lower_rb() const {
  // @@protoc_insertion_point(field_get:CommonProto.Box3D.lower_rb)
  return lower_rb_ != NULL ? *lower_rb_ : *default_instance_->lower_rb_;
}
inline ::CommonProto::Point* Box3D::mutable_lower_rb() {
  set_has_lower_rb();
  if (lower_rb_ == NULL) lower_rb_ = new ::CommonProto::Point;
  // @@protoc_insertion_point(field_mutable:CommonProto.Box3D.lower_rb)
  return lower_rb_;
}
inline ::CommonProto::Point* Box3D::release_lower_rb() {
  clear_has_lower_rb();
  ::CommonProto::Point* temp = lower_rb_;
  lower_rb_ = NULL;
  return temp;
}
inline void Box3D::set_allocated_lower_rb(::CommonProto::Point* lower_rb) {
  delete lower_rb_;
  lower_rb_ = lower_rb;
  if (lower_rb) {
    set_has_lower_rb();
  } else {
    clear_has_lower_rb();
  }
  // @@protoc_insertion_point(field_set_allocated:CommonProto.Box3D.lower_rb)
}

// required .CommonProto.Point lower_rt = 4;
inline bool Box3D::has_lower_rt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Box3D::set_has_lower_rt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Box3D::clear_has_lower_rt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Box3D::clear_lower_rt() {
  if (lower_rt_ != NULL) lower_rt_->::CommonProto::Point::Clear();
  clear_has_lower_rt();
}
inline const ::CommonProto::Point& Box3D::lower_rt() const {
  // @@protoc_insertion_point(field_get:CommonProto.Box3D.lower_rt)
  return lower_rt_ != NULL ? *lower_rt_ : *default_instance_->lower_rt_;
}
inline ::CommonProto::Point* Box3D::mutable_lower_rt() {
  set_has_lower_rt();
  if (lower_rt_ == NULL) lower_rt_ = new ::CommonProto::Point;
  // @@protoc_insertion_point(field_mutable:CommonProto.Box3D.lower_rt)
  return lower_rt_;
}
inline ::CommonProto::Point* Box3D::release_lower_rt() {
  clear_has_lower_rt();
  ::CommonProto::Point* temp = lower_rt_;
  lower_rt_ = NULL;
  return temp;
}
inline void Box3D::set_allocated_lower_rt(::CommonProto::Point* lower_rt) {
  delete lower_rt_;
  lower_rt_ = lower_rt;
  if (lower_rt) {
    set_has_lower_rt();
  } else {
    clear_has_lower_rt();
  }
  // @@protoc_insertion_point(field_set_allocated:CommonProto.Box3D.lower_rt)
}

// required .CommonProto.Point upper_lt = 5;
inline bool Box3D::has_upper_lt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Box3D::set_has_upper_lt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Box3D::clear_has_upper_lt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Box3D::clear_upper_lt() {
  if (upper_lt_ != NULL) upper_lt_->::CommonProto::Point::Clear();
  clear_has_upper_lt();
}
inline const ::CommonProto::Point& Box3D::upper_lt() const {
  // @@protoc_insertion_point(field_get:CommonProto.Box3D.upper_lt)
  return upper_lt_ != NULL ? *upper_lt_ : *default_instance_->upper_lt_;
}
inline ::CommonProto::Point* Box3D::mutable_upper_lt() {
  set_has_upper_lt();
  if (upper_lt_ == NULL) upper_lt_ = new ::CommonProto::Point;
  // @@protoc_insertion_point(field_mutable:CommonProto.Box3D.upper_lt)
  return upper_lt_;
}
inline ::CommonProto::Point* Box3D::release_upper_lt() {
  clear_has_upper_lt();
  ::CommonProto::Point* temp = upper_lt_;
  upper_lt_ = NULL;
  return temp;
}
inline void Box3D::set_allocated_upper_lt(::CommonProto::Point* upper_lt) {
  delete upper_lt_;
  upper_lt_ = upper_lt;
  if (upper_lt) {
    set_has_upper_lt();
  } else {
    clear_has_upper_lt();
  }
  // @@protoc_insertion_point(field_set_allocated:CommonProto.Box3D.upper_lt)
}

// required .CommonProto.Point upper_lb = 6;
inline bool Box3D::has_upper_lb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Box3D::set_has_upper_lb() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Box3D::clear_has_upper_lb() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Box3D::clear_upper_lb() {
  if (upper_lb_ != NULL) upper_lb_->::CommonProto::Point::Clear();
  clear_has_upper_lb();
}
inline const ::CommonProto::Point& Box3D::upper_lb() const {
  // @@protoc_insertion_point(field_get:CommonProto.Box3D.upper_lb)
  return upper_lb_ != NULL ? *upper_lb_ : *default_instance_->upper_lb_;
}
inline ::CommonProto::Point* Box3D::mutable_upper_lb() {
  set_has_upper_lb();
  if (upper_lb_ == NULL) upper_lb_ = new ::CommonProto::Point;
  // @@protoc_insertion_point(field_mutable:CommonProto.Box3D.upper_lb)
  return upper_lb_;
}
inline ::CommonProto::Point* Box3D::release_upper_lb() {
  clear_has_upper_lb();
  ::CommonProto::Point* temp = upper_lb_;
  upper_lb_ = NULL;
  return temp;
}
inline void Box3D::set_allocated_upper_lb(::CommonProto::Point* upper_lb) {
  delete upper_lb_;
  upper_lb_ = upper_lb;
  if (upper_lb) {
    set_has_upper_lb();
  } else {
    clear_has_upper_lb();
  }
  // @@protoc_insertion_point(field_set_allocated:CommonProto.Box3D.upper_lb)
}

// required .CommonProto.Point upper_rb = 7;
inline bool Box3D::has_upper_rb() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Box3D::set_has_upper_rb() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Box3D::clear_has_upper_rb() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Box3D::clear_upper_rb() {
  if (upper_rb_ != NULL) upper_rb_->::CommonProto::Point::Clear();
  clear_has_upper_rb();
}
inline const ::CommonProto::Point& Box3D::upper_rb() const {
  // @@protoc_insertion_point(field_get:CommonProto.Box3D.upper_rb)
  return upper_rb_ != NULL ? *upper_rb_ : *default_instance_->upper_rb_;
}
inline ::CommonProto::Point* Box3D::mutable_upper_rb() {
  set_has_upper_rb();
  if (upper_rb_ == NULL) upper_rb_ = new ::CommonProto::Point;
  // @@protoc_insertion_point(field_mutable:CommonProto.Box3D.upper_rb)
  return upper_rb_;
}
inline ::CommonProto::Point* Box3D::release_upper_rb() {
  clear_has_upper_rb();
  ::CommonProto::Point* temp = upper_rb_;
  upper_rb_ = NULL;
  return temp;
}
inline void Box3D::set_allocated_upper_rb(::CommonProto::Point* upper_rb) {
  delete upper_rb_;
  upper_rb_ = upper_rb;
  if (upper_rb) {
    set_has_upper_rb();
  } else {
    clear_has_upper_rb();
  }
  // @@protoc_insertion_point(field_set_allocated:CommonProto.Box3D.upper_rb)
}

// required .CommonProto.Point upper_rt = 8;
inline bool Box3D::has_upper_rt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Box3D::set_has_upper_rt() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Box3D::clear_has_upper_rt() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Box3D::clear_upper_rt() {
  if (upper_rt_ != NULL) upper_rt_->::CommonProto::Point::Clear();
  clear_has_upper_rt();
}
inline const ::CommonProto::Point& Box3D::upper_rt() const {
  // @@protoc_insertion_point(field_get:CommonProto.Box3D.upper_rt)
  return upper_rt_ != NULL ? *upper_rt_ : *default_instance_->upper_rt_;
}
inline ::CommonProto::Point* Box3D::mutable_upper_rt() {
  set_has_upper_rt();
  if (upper_rt_ == NULL) upper_rt_ = new ::CommonProto::Point;
  // @@protoc_insertion_point(field_mutable:CommonProto.Box3D.upper_rt)
  return upper_rt_;
}
inline ::CommonProto::Point* Box3D::release_upper_rt() {
  clear_has_upper_rt();
  ::CommonProto::Point* temp = upper_rt_;
  upper_rt_ = NULL;
  return temp;
}
inline void Box3D::set_allocated_upper_rt(::CommonProto::Point* upper_rt) {
  delete upper_rt_;
  upper_rt_ = upper_rt;
  if (upper_rt) {
    set_has_upper_rt();
  } else {
    clear_has_upper_rt();
  }
  // @@protoc_insertion_point(field_set_allocated:CommonProto.Box3D.upper_rt)
}

// optional float conf = 9;
inline bool Box3D::has_conf() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Box3D::set_has_conf() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Box3D::clear_has_conf() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Box3D::clear_conf() {
  conf_ = 0;
  clear_has_conf();
}
inline float Box3D::conf() const {
  // @@protoc_insertion_point(field_get:CommonProto.Box3D.conf)
  return conf_;
}
inline void Box3D::set_conf(float value) {
  set_has_conf();
  conf_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Box3D.conf)
}

// -------------------------------------------------------------------

// SkeletonPoint

// required .CommonProto.Point pt = 1;
inline bool SkeletonPoint::has_pt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkeletonPoint::set_has_pt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkeletonPoint::clear_has_pt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkeletonPoint::clear_pt() {
  if (pt_ != NULL) pt_->::CommonProto::Point::Clear();
  clear_has_pt();
}
inline const ::CommonProto::Point& SkeletonPoint::pt() const {
  // @@protoc_insertion_point(field_get:CommonProto.SkeletonPoint.pt)
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::CommonProto::Point* SkeletonPoint::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::CommonProto::Point;
  // @@protoc_insertion_point(field_mutable:CommonProto.SkeletonPoint.pt)
  return pt_;
}
inline ::CommonProto::Point* SkeletonPoint::release_pt() {
  clear_has_pt();
  ::CommonProto::Point* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void SkeletonPoint::set_allocated_pt(::CommonProto::Point* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
  // @@protoc_insertion_point(field_set_allocated:CommonProto.SkeletonPoint.pt)
}

// required int32 valid = 2;
inline bool SkeletonPoint::has_valid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkeletonPoint::set_has_valid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkeletonPoint::clear_has_valid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkeletonPoint::clear_valid() {
  valid_ = 0;
  clear_has_valid();
}
inline ::google::protobuf::int32 SkeletonPoint::valid() const {
  // @@protoc_insertion_point(field_get:CommonProto.SkeletonPoint.valid)
  return valid_;
}
inline void SkeletonPoint::set_valid(::google::protobuf::int32 value) {
  set_has_valid();
  valid_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.SkeletonPoint.valid)
}

// -------------------------------------------------------------------

// Image

// required int32 width = 1;
inline bool Image::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Image::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Image::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Image::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 Image::width() const {
  // @@protoc_insertion_point(field_get:CommonProto.Image.width)
  return width_;
}
inline void Image::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Image.width)
}

// required int32 height = 2;
inline bool Image::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Image::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Image::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Image::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 Image::height() const {
  // @@protoc_insertion_point(field_get:CommonProto.Image.height)
  return height_;
}
inline void Image::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Image.height)
}

// required int32 channel = 3;
inline bool Image::has_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Image::set_has_channel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Image::clear_has_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Image::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 Image::channel() const {
  // @@protoc_insertion_point(field_get:CommonProto.Image.channel)
  return channel_;
}
inline void Image::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Image.channel)
}

// optional int64 time_stamp = 4;
inline bool Image::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Image::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Image::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Image::clear_time_stamp() {
  time_stamp_ = GOOGLE_LONGLONG(0);
  clear_has_time_stamp();
}
inline ::google::protobuf::int64 Image::time_stamp() const {
  // @@protoc_insertion_point(field_get:CommonProto.Image.time_stamp)
  return time_stamp_;
}
inline void Image::set_time_stamp(::google::protobuf::int64 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Image.time_stamp)
}

// optional int32 send_mode = 5;
inline bool Image::has_send_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Image::set_has_send_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Image::clear_has_send_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Image::clear_send_mode() {
  send_mode_ = 0;
  clear_has_send_mode();
}
inline ::google::protobuf::int32 Image::send_mode() const {
  // @@protoc_insertion_point(field_get:CommonProto.Image.send_mode)
  return send_mode_;
}
inline void Image::set_send_mode(::google::protobuf::int32 value) {
  set_has_send_mode();
  send_mode_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Image.send_mode)
}

// optional int32 format = 6;
inline bool Image::has_format() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Image::set_has_format() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Image::clear_has_format() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Image::clear_format() {
  format_ = 0;
  clear_has_format();
}
inline ::google::protobuf::int32 Image::format() const {
  // @@protoc_insertion_point(field_get:CommonProto.Image.format)
  return format_;
}
inline void Image::set_format(::google::protobuf::int32 value) {
  set_has_format();
  format_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Image.format)
}

// optional int32 index = 7;
inline bool Image::has_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Image::set_has_index() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Image::clear_has_index() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Image::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 Image::index() const {
  // @@protoc_insertion_point(field_get:CommonProto.Image.index)
  return index_;
}
inline void Image::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Image.index)
}

// optional int32 count = 8;
inline bool Image::has_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Image::set_has_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Image::clear_has_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Image::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 Image::count() const {
  // @@protoc_insertion_point(field_get:CommonProto.Image.count)
  return count_;
}
inline void Image::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Image.count)
}

// optional int32 depth = 9;
inline bool Image::has_depth() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Image::set_has_depth() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Image::clear_has_depth() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Image::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
inline ::google::protobuf::int32 Image::depth() const {
  // @@protoc_insertion_point(field_get:CommonProto.Image.depth)
  return depth_;
}
inline void Image::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Image.depth)
}

// optional int32 align = 10;
inline bool Image::has_align() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Image::set_has_align() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Image::clear_has_align() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Image::clear_align() {
  align_ = 0;
  clear_has_align();
}
inline ::google::protobuf::int32 Image::align() const {
  // @@protoc_insertion_point(field_get:CommonProto.Image.align)
  return align_;
}
inline void Image::set_align(::google::protobuf::int32 value) {
  set_has_align();
  align_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Image.align)
}

// optional int32 image_counter = 11;
inline bool Image::has_image_counter() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Image::set_has_image_counter() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Image::clear_has_image_counter() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Image::clear_image_counter() {
  image_counter_ = 0;
  clear_has_image_counter();
}
inline ::google::protobuf::int32 Image::image_counter() const {
  // @@protoc_insertion_point(field_get:CommonProto.Image.image_counter)
  return image_counter_;
}
inline void Image::set_image_counter(::google::protobuf::int32 value) {
  set_has_image_counter();
  image_counter_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Image.image_counter)
}

// -------------------------------------------------------------------

// Velocity

// required float vx = 1;
inline bool Velocity::has_vx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Velocity::set_has_vx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Velocity::clear_has_vx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Velocity::clear_vx() {
  vx_ = 0;
  clear_has_vx();
}
inline float Velocity::vx() const {
  // @@protoc_insertion_point(field_get:CommonProto.Velocity.vx)
  return vx_;
}
inline void Velocity::set_vx(float value) {
  set_has_vx();
  vx_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Velocity.vx)
}

// required float vy = 2;
inline bool Velocity::has_vy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Velocity::set_has_vy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Velocity::clear_has_vy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Velocity::clear_vy() {
  vy_ = 0;
  clear_has_vy();
}
inline float Velocity::vy() const {
  // @@protoc_insertion_point(field_get:CommonProto.Velocity.vy)
  return vy_;
}
inline void Velocity::set_vy(float value) {
  set_has_vy();
  vy_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Velocity.vy)
}

// optional float vz = 3;
inline bool Velocity::has_vz() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Velocity::set_has_vz() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Velocity::clear_has_vz() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Velocity::clear_vz() {
  vz_ = 0;
  clear_has_vz();
}
inline float Velocity::vz() const {
  // @@protoc_insertion_point(field_get:CommonProto.Velocity.vz)
  return vz_;
}
inline void Velocity::set_vz(float value) {
  set_has_vz();
  vz_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Velocity.vz)
}

// -------------------------------------------------------------------

// Line

// required int32 id = 1;
inline bool Line::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Line::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Line::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Line::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Line::id() const {
  // @@protoc_insertion_point(field_get:CommonProto.Line.id)
  return id_;
}
inline void Line::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Line.id)
}

// optional int32 life_time = 3;
inline bool Line::has_life_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Line::set_has_life_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Line::clear_has_life_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Line::clear_life_time() {
  life_time_ = 0;
  clear_has_life_time();
}
inline ::google::protobuf::int32 Line::life_time() const {
  // @@protoc_insertion_point(field_get:CommonProto.Line.life_time)
  return life_time_;
}
inline void Line::set_life_time(::google::protobuf::int32 value) {
  set_has_life_time();
  life_time_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Line.life_time)
}

// repeated float coeffs = 7;
inline int Line::coeffs_size() const {
  return coeffs_.size();
}
inline void Line::clear_coeffs() {
  coeffs_.Clear();
}
inline float Line::coeffs(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.Line.coeffs)
  return coeffs_.Get(index);
}
inline void Line::set_coeffs(int index, float value) {
  coeffs_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.Line.coeffs)
}
inline void Line::add_coeffs(float value) {
  coeffs_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.Line.coeffs)
}
inline const ::google::protobuf::RepeatedField< float >&
Line::coeffs() const {
  // @@protoc_insertion_point(field_list:CommonProto.Line.coeffs)
  return coeffs_;
}
inline ::google::protobuf::RepeatedField< float >*
Line::mutable_coeffs() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.Line.coeffs)
  return &coeffs_;
}

// repeated .CommonProto.Point end_points = 8;
inline int Line::end_points_size() const {
  return end_points_.size();
}
inline void Line::clear_end_points() {
  end_points_.Clear();
}
inline const ::CommonProto::Point& Line::end_points(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.Line.end_points)
  return end_points_.Get(index);
}
inline ::CommonProto::Point* Line::mutable_end_points(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.Line.end_points)
  return end_points_.Mutable(index);
}
inline ::CommonProto::Point* Line::add_end_points() {
  // @@protoc_insertion_point(field_add:CommonProto.Line.end_points)
  return end_points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Point >&
Line::end_points() const {
  // @@protoc_insertion_point(field_list:CommonProto.Line.end_points)
  return end_points_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Point >*
Line::mutable_end_points() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.Line.end_points)
  return &end_points_;
}

// optional int32 type = 9;
inline bool Line::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Line::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Line::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Line::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Line::type() const {
  // @@protoc_insertion_point(field_get:CommonProto.Line.type)
  return type_;
}
inline void Line::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Line.type)
}

// optional int32 source = 10;
inline bool Line::has_source() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Line::set_has_source() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Line::clear_has_source() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Line::clear_source() {
  source_ = 0;
  clear_has_source();
}
inline ::google::protobuf::int32 Line::source() const {
  // @@protoc_insertion_point(field_get:CommonProto.Line.source)
  return source_;
}
inline void Line::set_source(::google::protobuf::int32 value) {
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Line.source)
}

// repeated .CommonProto.Contour contours = 11;
inline int Line::contours_size() const {
  return contours_.size();
}
inline void Line::clear_contours() {
  contours_.Clear();
}
inline const ::CommonProto::Contour& Line::contours(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.Line.contours)
  return contours_.Get(index);
}
inline ::CommonProto::Contour* Line::mutable_contours(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.Line.contours)
  return contours_.Mutable(index);
}
inline ::CommonProto::Contour* Line::add_contours() {
  // @@protoc_insertion_point(field_add:CommonProto.Line.contours)
  return contours_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Contour >&
Line::contours() const {
  // @@protoc_insertion_point(field_list:CommonProto.Line.contours)
  return contours_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Contour >*
Line::mutable_contours() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.Line.contours)
  return &contours_;
}

// optional float dist_to_front_wheel = 12;
inline bool Line::has_dist_to_front_wheel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Line::set_has_dist_to_front_wheel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Line::clear_has_dist_to_front_wheel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Line::clear_dist_to_front_wheel() {
  dist_to_front_wheel_ = 0;
  clear_has_dist_to_front_wheel();
}
inline float Line::dist_to_front_wheel() const {
  // @@protoc_insertion_point(field_get:CommonProto.Line.dist_to_front_wheel)
  return dist_to_front_wheel_;
}
inline void Line::set_dist_to_front_wheel(float value) {
  set_has_dist_to_front_wheel();
  dist_to_front_wheel_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Line.dist_to_front_wheel)
}

// optional float width = 13;
inline bool Line::has_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Line::set_has_width() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Line::clear_has_width() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Line::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline float Line::width() const {
  // @@protoc_insertion_point(field_get:CommonProto.Line.width)
  return width_;
}
inline void Line::set_width(float value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Line.width)
}

// optional int32 type_sibling = 14;
inline bool Line::has_type_sibling() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Line::set_has_type_sibling() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Line::clear_has_type_sibling() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Line::clear_type_sibling() {
  type_sibling_ = 0;
  clear_has_type_sibling();
}
inline ::google::protobuf::int32 Line::type_sibling() const {
  // @@protoc_insertion_point(field_get:CommonProto.Line.type_sibling)
  return type_sibling_;
}
inline void Line::set_type_sibling(::google::protobuf::int32 value) {
  set_has_type_sibling();
  type_sibling_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Line.type_sibling)
}

// optional float conf = 15;
inline bool Line::has_conf() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Line::set_has_conf() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Line::clear_has_conf() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Line::clear_conf() {
  conf_ = 0;
  clear_has_conf();
}
inline float Line::conf() const {
  // @@protoc_insertion_point(field_get:CommonProto.Line.conf)
  return conf_;
}
inline void Line::set_conf(float value) {
  set_has_conf();
  conf_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Line.conf)
}

// repeated float sigma_coeffs = 20;
inline int Line::sigma_coeffs_size() const {
  return sigma_coeffs_.size();
}
inline void Line::clear_sigma_coeffs() {
  sigma_coeffs_.Clear();
}
inline float Line::sigma_coeffs(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.Line.sigma_coeffs)
  return sigma_coeffs_.Get(index);
}
inline void Line::set_sigma_coeffs(int index, float value) {
  sigma_coeffs_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.Line.sigma_coeffs)
}
inline void Line::add_sigma_coeffs(float value) {
  sigma_coeffs_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.Line.sigma_coeffs)
}
inline const ::google::protobuf::RepeatedField< float >&
Line::sigma_coeffs() const {
  // @@protoc_insertion_point(field_list:CommonProto.Line.sigma_coeffs)
  return sigma_coeffs_;
}
inline ::google::protobuf::RepeatedField< float >*
Line::mutable_sigma_coeffs() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.Line.sigma_coeffs)
  return &sigma_coeffs_;
}

// -------------------------------------------------------------------

// Lines

// optional int32 cam_id = 1;
inline bool Lines::has_cam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Lines::set_has_cam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Lines::clear_has_cam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Lines::clear_cam_id() {
  cam_id_ = 0;
  clear_has_cam_id();
}
inline ::google::protobuf::int32 Lines::cam_id() const {
  // @@protoc_insertion_point(field_get:CommonProto.Lines.cam_id)
  return cam_id_;
}
inline void Lines::set_cam_id(::google::protobuf::int32 value) {
  set_has_cam_id();
  cam_id_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Lines.cam_id)
}

// repeated .CommonProto.Line lines = 2;
inline int Lines::lines_size() const {
  return lines_.size();
}
inline void Lines::clear_lines() {
  lines_.Clear();
}
inline const ::CommonProto::Line& Lines::lines(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.Lines.lines)
  return lines_.Get(index);
}
inline ::CommonProto::Line* Lines::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.Lines.lines)
  return lines_.Mutable(index);
}
inline ::CommonProto::Line* Lines::add_lines() {
  // @@protoc_insertion_point(field_add:CommonProto.Lines.lines)
  return lines_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Line >&
Lines::lines() const {
  // @@protoc_insertion_point(field_list:CommonProto.Lines.lines)
  return lines_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Line >*
Lines::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.Lines.lines)
  return &lines_;
}

// -------------------------------------------------------------------

// WorldSpaceInfo

// optional float yaw = 1;
inline bool WorldSpaceInfo::has_yaw() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorldSpaceInfo::set_has_yaw() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorldSpaceInfo::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorldSpaceInfo::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
inline float WorldSpaceInfo::yaw() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.yaw)
  return yaw_;
}
inline void WorldSpaceInfo::set_yaw(float value) {
  set_has_yaw();
  yaw_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.WorldSpaceInfo.yaw)
}

// optional .CommonProto.Velocity vel = 2;
inline bool WorldSpaceInfo::has_vel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WorldSpaceInfo::set_has_vel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WorldSpaceInfo::clear_has_vel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WorldSpaceInfo::clear_vel() {
  if (vel_ != NULL) vel_->::CommonProto::Velocity::Clear();
  clear_has_vel();
}
inline const ::CommonProto::Velocity& WorldSpaceInfo::vel() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.vel)
  return vel_ != NULL ? *vel_ : *default_instance_->vel_;
}
inline ::CommonProto::Velocity* WorldSpaceInfo::mutable_vel() {
  set_has_vel();
  if (vel_ == NULL) vel_ = new ::CommonProto::Velocity;
  // @@protoc_insertion_point(field_mutable:CommonProto.WorldSpaceInfo.vel)
  return vel_;
}
inline ::CommonProto::Velocity* WorldSpaceInfo::release_vel() {
  clear_has_vel();
  ::CommonProto::Velocity* temp = vel_;
  vel_ = NULL;
  return temp;
}
inline void WorldSpaceInfo::set_allocated_vel(::CommonProto::Velocity* vel) {
  delete vel_;
  vel_ = vel;
  if (vel) {
    set_has_vel();
  } else {
    clear_has_vel();
  }
  // @@protoc_insertion_point(field_set_allocated:CommonProto.WorldSpaceInfo.vel)
}

// optional float length = 3;
inline bool WorldSpaceInfo::has_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WorldSpaceInfo::set_has_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WorldSpaceInfo::clear_has_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WorldSpaceInfo::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline float WorldSpaceInfo::length() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.length)
  return length_;
}
inline void WorldSpaceInfo::set_length(float value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.WorldSpaceInfo.length)
}

// optional float width = 4;
inline bool WorldSpaceInfo::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WorldSpaceInfo::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WorldSpaceInfo::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WorldSpaceInfo::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline float WorldSpaceInfo::width() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.width)
  return width_;
}
inline void WorldSpaceInfo::set_width(float value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.WorldSpaceInfo.width)
}

// optional float height = 5;
inline bool WorldSpaceInfo::has_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WorldSpaceInfo::set_has_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WorldSpaceInfo::clear_has_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WorldSpaceInfo::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline float WorldSpaceInfo::height() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.height)
  return height_;
}
inline void WorldSpaceInfo::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.WorldSpaceInfo.height)
}

// optional .CommonProto.Polygon poly = 6;
inline bool WorldSpaceInfo::has_poly() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WorldSpaceInfo::set_has_poly() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WorldSpaceInfo::clear_has_poly() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WorldSpaceInfo::clear_poly() {
  if (poly_ != NULL) poly_->::CommonProto::Polygon::Clear();
  clear_has_poly();
}
inline const ::CommonProto::Polygon& WorldSpaceInfo::poly() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.poly)
  return poly_ != NULL ? *poly_ : *default_instance_->poly_;
}
inline ::CommonProto::Polygon* WorldSpaceInfo::mutable_poly() {
  set_has_poly();
  if (poly_ == NULL) poly_ = new ::CommonProto::Polygon;
  // @@protoc_insertion_point(field_mutable:CommonProto.WorldSpaceInfo.poly)
  return poly_;
}
inline ::CommonProto::Polygon* WorldSpaceInfo::release_poly() {
  clear_has_poly();
  ::CommonProto::Polygon* temp = poly_;
  poly_ = NULL;
  return temp;
}
inline void WorldSpaceInfo::set_allocated_poly(::CommonProto::Polygon* poly) {
  delete poly_;
  poly_ = poly;
  if (poly) {
    set_has_poly();
  } else {
    clear_has_poly();
  }
  // @@protoc_insertion_point(field_set_allocated:CommonProto.WorldSpaceInfo.poly)
}

// optional .CommonProto.Point position = 7;
inline bool WorldSpaceInfo::has_position() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WorldSpaceInfo::set_has_position() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WorldSpaceInfo::clear_has_position() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WorldSpaceInfo::clear_position() {
  if (position_ != NULL) position_->::CommonProto::Point::Clear();
  clear_has_position();
}
inline const ::CommonProto::Point& WorldSpaceInfo::position() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::CommonProto::Point* WorldSpaceInfo::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::CommonProto::Point;
  // @@protoc_insertion_point(field_mutable:CommonProto.WorldSpaceInfo.position)
  return position_;
}
inline ::CommonProto::Point* WorldSpaceInfo::release_position() {
  clear_has_position();
  ::CommonProto::Point* temp = position_;
  position_ = NULL;
  return temp;
}
inline void WorldSpaceInfo::set_allocated_position(::CommonProto::Point* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:CommonProto.WorldSpaceInfo.position)
}

// optional int32 traversable = 8;
inline bool WorldSpaceInfo::has_traversable() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WorldSpaceInfo::set_has_traversable() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WorldSpaceInfo::clear_has_traversable() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WorldSpaceInfo::clear_traversable() {
  traversable_ = 0;
  clear_has_traversable();
}
inline ::google::protobuf::int32 WorldSpaceInfo::traversable() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.traversable)
  return traversable_;
}
inline void WorldSpaceInfo::set_traversable(::google::protobuf::int32 value) {
  set_has_traversable();
  traversable_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.WorldSpaceInfo.traversable)
}

// optional float hmw = 9;
inline bool WorldSpaceInfo::has_hmw() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WorldSpaceInfo::set_has_hmw() {
  _has_bits_[0] |= 0x00000100u;
}
inline void WorldSpaceInfo::clear_has_hmw() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void WorldSpaceInfo::clear_hmw() {
  hmw_ = 0;
  clear_has_hmw();
}
inline float WorldSpaceInfo::hmw() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.hmw)
  return hmw_;
}
inline void WorldSpaceInfo::set_hmw(float value) {
  set_has_hmw();
  hmw_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.WorldSpaceInfo.hmw)
}

// optional float ttc = 10;
inline bool WorldSpaceInfo::has_ttc() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WorldSpaceInfo::set_has_ttc() {
  _has_bits_[0] |= 0x00000200u;
}
inline void WorldSpaceInfo::clear_has_ttc() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void WorldSpaceInfo::clear_ttc() {
  ttc_ = 0;
  clear_has_ttc();
}
inline float WorldSpaceInfo::ttc() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.ttc)
  return ttc_;
}
inline void WorldSpaceInfo::set_ttc(float value) {
  set_has_ttc();
  ttc_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.WorldSpaceInfo.ttc)
}

// optional int32 curr_lane = 11;
inline bool WorldSpaceInfo::has_curr_lane() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void WorldSpaceInfo::set_has_curr_lane() {
  _has_bits_[0] |= 0x00000400u;
}
inline void WorldSpaceInfo::clear_has_curr_lane() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void WorldSpaceInfo::clear_curr_lane() {
  curr_lane_ = 0;
  clear_has_curr_lane();
}
inline ::google::protobuf::int32 WorldSpaceInfo::curr_lane() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.curr_lane)
  return curr_lane_;
}
inline void WorldSpaceInfo::set_curr_lane(::google::protobuf::int32 value) {
  set_has_curr_lane();
  curr_lane_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.WorldSpaceInfo.curr_lane)
}

// optional .CommonProto.Point position_obs = 12;
inline bool WorldSpaceInfo::has_position_obs() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void WorldSpaceInfo::set_has_position_obs() {
  _has_bits_[0] |= 0x00000800u;
}
inline void WorldSpaceInfo::clear_has_position_obs() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void WorldSpaceInfo::clear_position_obs() {
  if (position_obs_ != NULL) position_obs_->::CommonProto::Point::Clear();
  clear_has_position_obs();
}
inline const ::CommonProto::Point& WorldSpaceInfo::position_obs() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.position_obs)
  return position_obs_ != NULL ? *position_obs_ : *default_instance_->position_obs_;
}
inline ::CommonProto::Point* WorldSpaceInfo::mutable_position_obs() {
  set_has_position_obs();
  if (position_obs_ == NULL) position_obs_ = new ::CommonProto::Point;
  // @@protoc_insertion_point(field_mutable:CommonProto.WorldSpaceInfo.position_obs)
  return position_obs_;
}
inline ::CommonProto::Point* WorldSpaceInfo::release_position_obs() {
  clear_has_position_obs();
  ::CommonProto::Point* temp = position_obs_;
  position_obs_ = NULL;
  return temp;
}
inline void WorldSpaceInfo::set_allocated_position_obs(::CommonProto::Point* position_obs) {
  delete position_obs_;
  position_obs_ = position_obs;
  if (position_obs) {
    set_has_position_obs();
  } else {
    clear_has_position_obs();
  }
  // @@protoc_insertion_point(field_set_allocated:CommonProto.WorldSpaceInfo.position_obs)
}

// optional float sigma_yaw = 30;
inline bool WorldSpaceInfo::has_sigma_yaw() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void WorldSpaceInfo::set_has_sigma_yaw() {
  _has_bits_[0] |= 0x00001000u;
}
inline void WorldSpaceInfo::clear_has_sigma_yaw() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void WorldSpaceInfo::clear_sigma_yaw() {
  sigma_yaw_ = 0;
  clear_has_sigma_yaw();
}
inline float WorldSpaceInfo::sigma_yaw() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.sigma_yaw)
  return sigma_yaw_;
}
inline void WorldSpaceInfo::set_sigma_yaw(float value) {
  set_has_sigma_yaw();
  sigma_yaw_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.WorldSpaceInfo.sigma_yaw)
}

// repeated float sigma_vel = 31;
inline int WorldSpaceInfo::sigma_vel_size() const {
  return sigma_vel_.size();
}
inline void WorldSpaceInfo::clear_sigma_vel() {
  sigma_vel_.Clear();
}
inline float WorldSpaceInfo::sigma_vel(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.sigma_vel)
  return sigma_vel_.Get(index);
}
inline void WorldSpaceInfo::set_sigma_vel(int index, float value) {
  sigma_vel_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.WorldSpaceInfo.sigma_vel)
}
inline void WorldSpaceInfo::add_sigma_vel(float value) {
  sigma_vel_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.WorldSpaceInfo.sigma_vel)
}
inline const ::google::protobuf::RepeatedField< float >&
WorldSpaceInfo::sigma_vel() const {
  // @@protoc_insertion_point(field_list:CommonProto.WorldSpaceInfo.sigma_vel)
  return sigma_vel_;
}
inline ::google::protobuf::RepeatedField< float >*
WorldSpaceInfo::mutable_sigma_vel() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.WorldSpaceInfo.sigma_vel)
  return &sigma_vel_;
}

// optional float sigma_width = 32;
inline bool WorldSpaceInfo::has_sigma_width() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void WorldSpaceInfo::set_has_sigma_width() {
  _has_bits_[0] |= 0x00004000u;
}
inline void WorldSpaceInfo::clear_has_sigma_width() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void WorldSpaceInfo::clear_sigma_width() {
  sigma_width_ = 0;
  clear_has_sigma_width();
}
inline float WorldSpaceInfo::sigma_width() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.sigma_width)
  return sigma_width_;
}
inline void WorldSpaceInfo::set_sigma_width(float value) {
  set_has_sigma_width();
  sigma_width_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.WorldSpaceInfo.sigma_width)
}

// optional float sigma_height = 33;
inline bool WorldSpaceInfo::has_sigma_height() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void WorldSpaceInfo::set_has_sigma_height() {
  _has_bits_[0] |= 0x00008000u;
}
inline void WorldSpaceInfo::clear_has_sigma_height() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void WorldSpaceInfo::clear_sigma_height() {
  sigma_height_ = 0;
  clear_has_sigma_height();
}
inline float WorldSpaceInfo::sigma_height() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.sigma_height)
  return sigma_height_;
}
inline void WorldSpaceInfo::set_sigma_height(float value) {
  set_has_sigma_height();
  sigma_height_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.WorldSpaceInfo.sigma_height)
}

// repeated float sigma_position = 34;
inline int WorldSpaceInfo::sigma_position_size() const {
  return sigma_position_.size();
}
inline void WorldSpaceInfo::clear_sigma_position() {
  sigma_position_.Clear();
}
inline float WorldSpaceInfo::sigma_position(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.sigma_position)
  return sigma_position_.Get(index);
}
inline void WorldSpaceInfo::set_sigma_position(int index, float value) {
  sigma_position_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.WorldSpaceInfo.sigma_position)
}
inline void WorldSpaceInfo::add_sigma_position(float value) {
  sigma_position_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.WorldSpaceInfo.sigma_position)
}
inline const ::google::protobuf::RepeatedField< float >&
WorldSpaceInfo::sigma_position() const {
  // @@protoc_insertion_point(field_list:CommonProto.WorldSpaceInfo.sigma_position)
  return sigma_position_;
}
inline ::google::protobuf::RepeatedField< float >*
WorldSpaceInfo::mutable_sigma_position() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.WorldSpaceInfo.sigma_position)
  return &sigma_position_;
}

// -------------------------------------------------------------------

// ImageSpaceInfo

// optional .CommonProto.Rect rect = 1;
inline bool ImageSpaceInfo::has_rect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageSpaceInfo::set_has_rect() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageSpaceInfo::clear_has_rect() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageSpaceInfo::clear_rect() {
  if (rect_ != NULL) rect_->::CommonProto::Rect::Clear();
  clear_has_rect();
}
inline const ::CommonProto::Rect& ImageSpaceInfo::rect() const {
  // @@protoc_insertion_point(field_get:CommonProto.ImageSpaceInfo.rect)
  return rect_ != NULL ? *rect_ : *default_instance_->rect_;
}
inline ::CommonProto::Rect* ImageSpaceInfo::mutable_rect() {
  set_has_rect();
  if (rect_ == NULL) rect_ = new ::CommonProto::Rect;
  // @@protoc_insertion_point(field_mutable:CommonProto.ImageSpaceInfo.rect)
  return rect_;
}
inline ::CommonProto::Rect* ImageSpaceInfo::release_rect() {
  clear_has_rect();
  ::CommonProto::Rect* temp = rect_;
  rect_ = NULL;
  return temp;
}
inline void ImageSpaceInfo::set_allocated_rect(::CommonProto::Rect* rect) {
  delete rect_;
  rect_ = rect;
  if (rect) {
    set_has_rect();
  } else {
    clear_has_rect();
  }
  // @@protoc_insertion_point(field_set_allocated:CommonProto.ImageSpaceInfo.rect)
}

// optional .CommonProto.Skeleton skeleton = 10;
inline bool ImageSpaceInfo::has_skeleton() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageSpaceInfo::set_has_skeleton() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageSpaceInfo::clear_has_skeleton() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageSpaceInfo::clear_skeleton() {
  if (skeleton_ != NULL) skeleton_->::CommonProto::Skeleton::Clear();
  clear_has_skeleton();
}
inline const ::CommonProto::Skeleton& ImageSpaceInfo::skeleton() const {
  // @@protoc_insertion_point(field_get:CommonProto.ImageSpaceInfo.skeleton)
  return skeleton_ != NULL ? *skeleton_ : *default_instance_->skeleton_;
}
inline ::CommonProto::Skeleton* ImageSpaceInfo::mutable_skeleton() {
  set_has_skeleton();
  if (skeleton_ == NULL) skeleton_ = new ::CommonProto::Skeleton;
  // @@protoc_insertion_point(field_mutable:CommonProto.ImageSpaceInfo.skeleton)
  return skeleton_;
}
inline ::CommonProto::Skeleton* ImageSpaceInfo::release_skeleton() {
  clear_has_skeleton();
  ::CommonProto::Skeleton* temp = skeleton_;
  skeleton_ = NULL;
  return temp;
}
inline void ImageSpaceInfo::set_allocated_skeleton(::CommonProto::Skeleton* skeleton) {
  delete skeleton_;
  skeleton_ = skeleton;
  if (skeleton) {
    set_has_skeleton();
  } else {
    clear_has_skeleton();
  }
  // @@protoc_insertion_point(field_set_allocated:CommonProto.ImageSpaceInfo.skeleton)
}

// optional .CommonProto.Box3D box = 11;
inline bool ImageSpaceInfo::has_box() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageSpaceInfo::set_has_box() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageSpaceInfo::clear_has_box() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageSpaceInfo::clear_box() {
  if (box_ != NULL) box_->::CommonProto::Box3D::Clear();
  clear_has_box();
}
inline const ::CommonProto::Box3D& ImageSpaceInfo::box() const {
  // @@protoc_insertion_point(field_get:CommonProto.ImageSpaceInfo.box)
  return box_ != NULL ? *box_ : *default_instance_->box_;
}
inline ::CommonProto::Box3D* ImageSpaceInfo::mutable_box() {
  set_has_box();
  if (box_ == NULL) box_ = new ::CommonProto::Box3D;
  // @@protoc_insertion_point(field_mutable:CommonProto.ImageSpaceInfo.box)
  return box_;
}
inline ::CommonProto::Box3D* ImageSpaceInfo::release_box() {
  clear_has_box();
  ::CommonProto::Box3D* temp = box_;
  box_ = NULL;
  return temp;
}
inline void ImageSpaceInfo::set_allocated_box(::CommonProto::Box3D* box) {
  delete box_;
  box_ = box;
  if (box) {
    set_has_box();
  } else {
    clear_has_box();
  }
  // @@protoc_insertion_point(field_set_allocated:CommonProto.ImageSpaceInfo.box)
}

// optional .CommonProto.Polygon poly = 12;
inline bool ImageSpaceInfo::has_poly() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageSpaceInfo::set_has_poly() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImageSpaceInfo::clear_has_poly() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImageSpaceInfo::clear_poly() {
  if (poly_ != NULL) poly_->::CommonProto::Polygon::Clear();
  clear_has_poly();
}
inline const ::CommonProto::Polygon& ImageSpaceInfo::poly() const {
  // @@protoc_insertion_point(field_get:CommonProto.ImageSpaceInfo.poly)
  return poly_ != NULL ? *poly_ : *default_instance_->poly_;
}
inline ::CommonProto::Polygon* ImageSpaceInfo::mutable_poly() {
  set_has_poly();
  if (poly_ == NULL) poly_ = new ::CommonProto::Polygon;
  // @@protoc_insertion_point(field_mutable:CommonProto.ImageSpaceInfo.poly)
  return poly_;
}
inline ::CommonProto::Polygon* ImageSpaceInfo::release_poly() {
  clear_has_poly();
  ::CommonProto::Polygon* temp = poly_;
  poly_ = NULL;
  return temp;
}
inline void ImageSpaceInfo::set_allocated_poly(::CommonProto::Polygon* poly) {
  delete poly_;
  poly_ = poly;
  if (poly) {
    set_has_poly();
  } else {
    clear_has_poly();
  }
  // @@protoc_insertion_point(field_set_allocated:CommonProto.ImageSpaceInfo.poly)
}

// optional float sigma_width = 20;
inline bool ImageSpaceInfo::has_sigma_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImageSpaceInfo::set_has_sigma_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImageSpaceInfo::clear_has_sigma_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImageSpaceInfo::clear_sigma_width() {
  sigma_width_ = 0;
  clear_has_sigma_width();
}
inline float ImageSpaceInfo::sigma_width() const {
  // @@protoc_insertion_point(field_get:CommonProto.ImageSpaceInfo.sigma_width)
  return sigma_width_;
}
inline void ImageSpaceInfo::set_sigma_width(float value) {
  set_has_sigma_width();
  sigma_width_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.ImageSpaceInfo.sigma_width)
}

// optional float sigma_height = 21;
inline bool ImageSpaceInfo::has_sigma_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ImageSpaceInfo::set_has_sigma_height() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ImageSpaceInfo::clear_has_sigma_height() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ImageSpaceInfo::clear_sigma_height() {
  sigma_height_ = 0;
  clear_has_sigma_height();
}
inline float ImageSpaceInfo::sigma_height() const {
  // @@protoc_insertion_point(field_get:CommonProto.ImageSpaceInfo.sigma_height)
  return sigma_height_;
}
inline void ImageSpaceInfo::set_sigma_height(float value) {
  set_has_sigma_height();
  sigma_height_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.ImageSpaceInfo.sigma_height)
}

// optional float sigma_x = 22;
inline bool ImageSpaceInfo::has_sigma_x() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ImageSpaceInfo::set_has_sigma_x() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ImageSpaceInfo::clear_has_sigma_x() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ImageSpaceInfo::clear_sigma_x() {
  sigma_x_ = 0;
  clear_has_sigma_x();
}
inline float ImageSpaceInfo::sigma_x() const {
  // @@protoc_insertion_point(field_get:CommonProto.ImageSpaceInfo.sigma_x)
  return sigma_x_;
}
inline void ImageSpaceInfo::set_sigma_x(float value) {
  set_has_sigma_x();
  sigma_x_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.ImageSpaceInfo.sigma_x)
}

// optional float sigma_y = 23;
inline bool ImageSpaceInfo::has_sigma_y() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ImageSpaceInfo::set_has_sigma_y() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ImageSpaceInfo::clear_has_sigma_y() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ImageSpaceInfo::clear_sigma_y() {
  sigma_y_ = 0;
  clear_has_sigma_y();
}
inline float ImageSpaceInfo::sigma_y() const {
  // @@protoc_insertion_point(field_get:CommonProto.ImageSpaceInfo.sigma_y)
  return sigma_y_;
}
inline void ImageSpaceInfo::set_sigma_y(float value) {
  set_has_sigma_y();
  sigma_y_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.ImageSpaceInfo.sigma_y)
}

// -------------------------------------------------------------------

// Obstacle

// required int32 id = 1;
inline bool Obstacle::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Obstacle::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Obstacle::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Obstacle::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Obstacle::id() const {
  // @@protoc_insertion_point(field_get:CommonProto.Obstacle.id)
  return id_;
}
inline void Obstacle::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Obstacle.id)
}

// required int32 type = 2;
inline bool Obstacle::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Obstacle::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Obstacle::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Obstacle::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Obstacle::type() const {
  // @@protoc_insertion_point(field_get:CommonProto.Obstacle.type)
  return type_;
}
inline void Obstacle::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Obstacle.type)
}

// optional int32 conf = 3;
inline bool Obstacle::has_conf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Obstacle::set_has_conf() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Obstacle::clear_has_conf() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Obstacle::clear_conf() {
  conf_ = 0;
  clear_has_conf();
}
inline ::google::protobuf::int32 Obstacle::conf() const {
  // @@protoc_insertion_point(field_get:CommonProto.Obstacle.conf)
  return conf_;
}
inline void Obstacle::set_conf(::google::protobuf::int32 value) {
  set_has_conf();
  conf_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Obstacle.conf)
}

// optional int32 life_time = 4;
inline bool Obstacle::has_life_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Obstacle::set_has_life_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Obstacle::clear_has_life_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Obstacle::clear_life_time() {
  life_time_ = 0;
  clear_has_life_time();
}
inline ::google::protobuf::int32 Obstacle::life_time() const {
  // @@protoc_insertion_point(field_get:CommonProto.Obstacle.life_time)
  return life_time_;
}
inline void Obstacle::set_life_time(::google::protobuf::int32 value) {
  set_has_life_time();
  life_time_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Obstacle.life_time)
}

// optional int32 age = 5;
inline bool Obstacle::has_age() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Obstacle::set_has_age() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Obstacle::clear_has_age() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Obstacle::clear_age() {
  age_ = 0;
  clear_has_age();
}
inline ::google::protobuf::int32 Obstacle::age() const {
  // @@protoc_insertion_point(field_get:CommonProto.Obstacle.age)
  return age_;
}
inline void Obstacle::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Obstacle.age)
}

// optional .CommonProto.ImageSpaceInfo img_info = 6;
inline bool Obstacle::has_img_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Obstacle::set_has_img_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Obstacle::clear_has_img_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Obstacle::clear_img_info() {
  if (img_info_ != NULL) img_info_->::CommonProto::ImageSpaceInfo::Clear();
  clear_has_img_info();
}
inline const ::CommonProto::ImageSpaceInfo& Obstacle::img_info() const {
  // @@protoc_insertion_point(field_get:CommonProto.Obstacle.img_info)
  return img_info_ != NULL ? *img_info_ : *default_instance_->img_info_;
}
inline ::CommonProto::ImageSpaceInfo* Obstacle::mutable_img_info() {
  set_has_img_info();
  if (img_info_ == NULL) img_info_ = new ::CommonProto::ImageSpaceInfo;
  // @@protoc_insertion_point(field_mutable:CommonProto.Obstacle.img_info)
  return img_info_;
}
inline ::CommonProto::ImageSpaceInfo* Obstacle::release_img_info() {
  clear_has_img_info();
  ::CommonProto::ImageSpaceInfo* temp = img_info_;
  img_info_ = NULL;
  return temp;
}
inline void Obstacle::set_allocated_img_info(::CommonProto::ImageSpaceInfo* img_info) {
  delete img_info_;
  img_info_ = img_info;
  if (img_info) {
    set_has_img_info();
  } else {
    clear_has_img_info();
  }
  // @@protoc_insertion_point(field_set_allocated:CommonProto.Obstacle.img_info)
}

// optional .CommonProto.WorldSpaceInfo world_info = 7;
inline bool Obstacle::has_world_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Obstacle::set_has_world_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Obstacle::clear_has_world_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Obstacle::clear_world_info() {
  if (world_info_ != NULL) world_info_->::CommonProto::WorldSpaceInfo::Clear();
  clear_has_world_info();
}
inline const ::CommonProto::WorldSpaceInfo& Obstacle::world_info() const {
  // @@protoc_insertion_point(field_get:CommonProto.Obstacle.world_info)
  return world_info_ != NULL ? *world_info_ : *default_instance_->world_info_;
}
inline ::CommonProto::WorldSpaceInfo* Obstacle::mutable_world_info() {
  set_has_world_info();
  if (world_info_ == NULL) world_info_ = new ::CommonProto::WorldSpaceInfo;
  // @@protoc_insertion_point(field_mutable:CommonProto.Obstacle.world_info)
  return world_info_;
}
inline ::CommonProto::WorldSpaceInfo* Obstacle::release_world_info() {
  clear_has_world_info();
  ::CommonProto::WorldSpaceInfo* temp = world_info_;
  world_info_ = NULL;
  return temp;
}
inline void Obstacle::set_allocated_world_info(::CommonProto::WorldSpaceInfo* world_info) {
  delete world_info_;
  world_info_ = world_info;
  if (world_info) {
    set_has_world_info();
  } else {
    clear_has_world_info();
  }
  // @@protoc_insertion_point(field_set_allocated:CommonProto.Obstacle.world_info)
}

// repeated int32 property = 13;
inline int Obstacle::property_size() const {
  return property_.size();
}
inline void Obstacle::clear_property() {
  property_.Clear();
}
inline ::google::protobuf::int32 Obstacle::property(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.Obstacle.property)
  return property_.Get(index);
}
inline void Obstacle::set_property(int index, ::google::protobuf::int32 value) {
  property_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.Obstacle.property)
}
inline void Obstacle::add_property(::google::protobuf::int32 value) {
  property_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.Obstacle.property)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Obstacle::property() const {
  // @@protoc_insertion_point(field_list:CommonProto.Obstacle.property)
  return property_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Obstacle::mutable_property() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.Obstacle.property)
  return &property_;
}

// repeated string property_name = 14;
inline int Obstacle::property_name_size() const {
  return property_name_.size();
}
inline void Obstacle::clear_property_name() {
  property_name_.Clear();
}
inline const ::std::string& Obstacle::property_name(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.Obstacle.property_name)
  return property_name_.Get(index);
}
inline ::std::string* Obstacle::mutable_property_name(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.Obstacle.property_name)
  return property_name_.Mutable(index);
}
inline void Obstacle::set_property_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CommonProto.Obstacle.property_name)
  property_name_.Mutable(index)->assign(value);
}
inline void Obstacle::set_property_name(int index, const char* value) {
  property_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CommonProto.Obstacle.property_name)
}
inline void Obstacle::set_property_name(int index, const char* value, size_t size) {
  property_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CommonProto.Obstacle.property_name)
}
inline ::std::string* Obstacle::add_property_name() {
  return property_name_.Add();
}
inline void Obstacle::add_property_name(const ::std::string& value) {
  property_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CommonProto.Obstacle.property_name)
}
inline void Obstacle::add_property_name(const char* value) {
  property_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CommonProto.Obstacle.property_name)
}
inline void Obstacle::add_property_name(const char* value, size_t size) {
  property_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CommonProto.Obstacle.property_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Obstacle::property_name() const {
  // @@protoc_insertion_point(field_list:CommonProto.Obstacle.property_name)
  return property_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Obstacle::mutable_property_name() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.Obstacle.property_name)
  return &property_name_;
}

// repeated int32 property_type = 15;
inline int Obstacle::property_type_size() const {
  return property_type_.size();
}
inline void Obstacle::clear_property_type() {
  property_type_.Clear();
}
inline ::google::protobuf::int32 Obstacle::property_type(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.Obstacle.property_type)
  return property_type_.Get(index);
}
inline void Obstacle::set_property_type(int index, ::google::protobuf::int32 value) {
  property_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.Obstacle.property_type)
}
inline void Obstacle::add_property_type(::google::protobuf::int32 value) {
  property_type_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.Obstacle.property_type)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Obstacle::property_type() const {
  // @@protoc_insertion_point(field_list:CommonProto.Obstacle.property_type)
  return property_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Obstacle::mutable_property_type() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.Obstacle.property_type)
  return &property_type_;
}

// repeated float property_conf = 16;
inline int Obstacle::property_conf_size() const {
  return property_conf_.size();
}
inline void Obstacle::clear_property_conf() {
  property_conf_.Clear();
}
inline float Obstacle::property_conf(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.Obstacle.property_conf)
  return property_conf_.Get(index);
}
inline void Obstacle::set_property_conf(int index, float value) {
  property_conf_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.Obstacle.property_conf)
}
inline void Obstacle::add_property_conf(float value) {
  property_conf_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.Obstacle.property_conf)
}
inline const ::google::protobuf::RepeatedField< float >&
Obstacle::property_conf() const {
  // @@protoc_insertion_point(field_list:CommonProto.Obstacle.property_conf)
  return property_conf_;
}
inline ::google::protobuf::RepeatedField< float >*
Obstacle::mutable_property_conf() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.Obstacle.property_conf)
  return &property_conf_;
}

// -------------------------------------------------------------------

// Obstacles

// optional int32 cam_id = 1;
inline bool Obstacles::has_cam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Obstacles::set_has_cam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Obstacles::clear_has_cam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Obstacles::clear_cam_id() {
  cam_id_ = 0;
  clear_has_cam_id();
}
inline ::google::protobuf::int32 Obstacles::cam_id() const {
  // @@protoc_insertion_point(field_get:CommonProto.Obstacles.cam_id)
  return cam_id_;
}
inline void Obstacles::set_cam_id(::google::protobuf::int32 value) {
  set_has_cam_id();
  cam_id_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Obstacles.cam_id)
}

// repeated .CommonProto.Obstacle obstacle = 2;
inline int Obstacles::obstacle_size() const {
  return obstacle_.size();
}
inline void Obstacles::clear_obstacle() {
  obstacle_.Clear();
}
inline const ::CommonProto::Obstacle& Obstacles::obstacle(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.Obstacles.obstacle)
  return obstacle_.Get(index);
}
inline ::CommonProto::Obstacle* Obstacles::mutable_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.Obstacles.obstacle)
  return obstacle_.Mutable(index);
}
inline ::CommonProto::Obstacle* Obstacles::add_obstacle() {
  // @@protoc_insertion_point(field_add:CommonProto.Obstacles.obstacle)
  return obstacle_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Obstacle >&
Obstacles::obstacle() const {
  // @@protoc_insertion_point(field_list:CommonProto.Obstacles.obstacle)
  return obstacle_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Obstacle >*
Obstacles::mutable_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.Obstacles.obstacle)
  return &obstacle_;
}

// optional float conf_scale = 3 [default = 0.1];
inline bool Obstacles::has_conf_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Obstacles::set_has_conf_scale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Obstacles::clear_has_conf_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Obstacles::clear_conf_scale() {
  conf_scale_ = 0.1f;
  clear_has_conf_scale();
}
inline float Obstacles::conf_scale() const {
  // @@protoc_insertion_point(field_get:CommonProto.Obstacles.conf_scale)
  return conf_scale_;
}
inline void Obstacles::set_conf_scale(float value) {
  set_has_conf_scale();
  conf_scale_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Obstacles.conf_scale)
}

// -------------------------------------------------------------------

// FeatureMap

// required bytes data = 1;
inline bool FeatureMap::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeatureMap::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeatureMap::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeatureMap::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& FeatureMap::data() const {
  // @@protoc_insertion_point(field_get:CommonProto.FeatureMap.data)
  return *data_;
}
inline void FeatureMap::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:CommonProto.FeatureMap.data)
}
inline void FeatureMap::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:CommonProto.FeatureMap.data)
}
inline void FeatureMap::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CommonProto.FeatureMap.data)
}
inline ::std::string* FeatureMap::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CommonProto.FeatureMap.data)
  return data_;
}
inline ::std::string* FeatureMap::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FeatureMap::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CommonProto.FeatureMap.data)
}

// -------------------------------------------------------------------

// ObstacleRaw

// required .CommonProto.Rect rect = 1;
inline bool ObstacleRaw::has_rect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObstacleRaw::set_has_rect() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObstacleRaw::clear_has_rect() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObstacleRaw::clear_rect() {
  if (rect_ != NULL) rect_->::CommonProto::Rect::Clear();
  clear_has_rect();
}
inline const ::CommonProto::Rect& ObstacleRaw::rect() const {
  // @@protoc_insertion_point(field_get:CommonProto.ObstacleRaw.rect)
  return rect_ != NULL ? *rect_ : *default_instance_->rect_;
}
inline ::CommonProto::Rect* ObstacleRaw::mutable_rect() {
  set_has_rect();
  if (rect_ == NULL) rect_ = new ::CommonProto::Rect;
  // @@protoc_insertion_point(field_mutable:CommonProto.ObstacleRaw.rect)
  return rect_;
}
inline ::CommonProto::Rect* ObstacleRaw::release_rect() {
  clear_has_rect();
  ::CommonProto::Rect* temp = rect_;
  rect_ = NULL;
  return temp;
}
inline void ObstacleRaw::set_allocated_rect(::CommonProto::Rect* rect) {
  delete rect_;
  rect_ = rect;
  if (rect) {
    set_has_rect();
  } else {
    clear_has_rect();
  }
  // @@protoc_insertion_point(field_set_allocated:CommonProto.ObstacleRaw.rect)
}

// required float conf = 2;
inline bool ObstacleRaw::has_conf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObstacleRaw::set_has_conf() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObstacleRaw::clear_has_conf() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObstacleRaw::clear_conf() {
  conf_ = 0;
  clear_has_conf();
}
inline float ObstacleRaw::conf() const {
  // @@protoc_insertion_point(field_get:CommonProto.ObstacleRaw.conf)
  return conf_;
}
inline void ObstacleRaw::set_conf(float value) {
  set_has_conf();
  conf_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.ObstacleRaw.conf)
}

// required int32 model = 3;
inline bool ObstacleRaw::has_model() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObstacleRaw::set_has_model() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ObstacleRaw::clear_has_model() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ObstacleRaw::clear_model() {
  model_ = 0;
  clear_has_model();
}
inline ::google::protobuf::int32 ObstacleRaw::model() const {
  // @@protoc_insertion_point(field_get:CommonProto.ObstacleRaw.model)
  return model_;
}
inline void ObstacleRaw::set_model(::google::protobuf::int32 value) {
  set_has_model();
  model_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.ObstacleRaw.model)
}

// optional int32 source = 4;
inline bool ObstacleRaw::has_source() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ObstacleRaw::set_has_source() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ObstacleRaw::clear_has_source() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ObstacleRaw::clear_source() {
  source_ = 0;
  clear_has_source();
}
inline ::google::protobuf::int32 ObstacleRaw::source() const {
  // @@protoc_insertion_point(field_get:CommonProto.ObstacleRaw.source)
  return source_;
}
inline void ObstacleRaw::set_source(::google::protobuf::int32 value) {
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.ObstacleRaw.source)
}

// repeated int32 property = 6;
inline int ObstacleRaw::property_size() const {
  return property_.size();
}
inline void ObstacleRaw::clear_property() {
  property_.Clear();
}
inline ::google::protobuf::int32 ObstacleRaw::property(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.ObstacleRaw.property)
  return property_.Get(index);
}
inline void ObstacleRaw::set_property(int index, ::google::protobuf::int32 value) {
  property_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.ObstacleRaw.property)
}
inline void ObstacleRaw::add_property(::google::protobuf::int32 value) {
  property_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.ObstacleRaw.property)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ObstacleRaw::property() const {
  // @@protoc_insertion_point(field_list:CommonProto.ObstacleRaw.property)
  return property_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ObstacleRaw::mutable_property() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.ObstacleRaw.property)
  return &property_;
}

// repeated string property_name = 7;
inline int ObstacleRaw::property_name_size() const {
  return property_name_.size();
}
inline void ObstacleRaw::clear_property_name() {
  property_name_.Clear();
}
inline const ::std::string& ObstacleRaw::property_name(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.ObstacleRaw.property_name)
  return property_name_.Get(index);
}
inline ::std::string* ObstacleRaw::mutable_property_name(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.ObstacleRaw.property_name)
  return property_name_.Mutable(index);
}
inline void ObstacleRaw::set_property_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CommonProto.ObstacleRaw.property_name)
  property_name_.Mutable(index)->assign(value);
}
inline void ObstacleRaw::set_property_name(int index, const char* value) {
  property_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CommonProto.ObstacleRaw.property_name)
}
inline void ObstacleRaw::set_property_name(int index, const char* value, size_t size) {
  property_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CommonProto.ObstacleRaw.property_name)
}
inline ::std::string* ObstacleRaw::add_property_name() {
  return property_name_.Add();
}
inline void ObstacleRaw::add_property_name(const ::std::string& value) {
  property_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CommonProto.ObstacleRaw.property_name)
}
inline void ObstacleRaw::add_property_name(const char* value) {
  property_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CommonProto.ObstacleRaw.property_name)
}
inline void ObstacleRaw::add_property_name(const char* value, size_t size) {
  property_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CommonProto.ObstacleRaw.property_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ObstacleRaw::property_name() const {
  // @@protoc_insertion_point(field_list:CommonProto.ObstacleRaw.property_name)
  return property_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ObstacleRaw::mutable_property_name() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.ObstacleRaw.property_name)
  return &property_name_;
}

// repeated int32 property_type = 8;
inline int ObstacleRaw::property_type_size() const {
  return property_type_.size();
}
inline void ObstacleRaw::clear_property_type() {
  property_type_.Clear();
}
inline ::google::protobuf::int32 ObstacleRaw::property_type(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.ObstacleRaw.property_type)
  return property_type_.Get(index);
}
inline void ObstacleRaw::set_property_type(int index, ::google::protobuf::int32 value) {
  property_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.ObstacleRaw.property_type)
}
inline void ObstacleRaw::add_property_type(::google::protobuf::int32 value) {
  property_type_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.ObstacleRaw.property_type)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ObstacleRaw::property_type() const {
  // @@protoc_insertion_point(field_list:CommonProto.ObstacleRaw.property_type)
  return property_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ObstacleRaw::mutable_property_type() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.ObstacleRaw.property_type)
  return &property_type_;
}

// repeated float property_conf = 9;
inline int ObstacleRaw::property_conf_size() const {
  return property_conf_.size();
}
inline void ObstacleRaw::clear_property_conf() {
  property_conf_.Clear();
}
inline float ObstacleRaw::property_conf(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.ObstacleRaw.property_conf)
  return property_conf_.Get(index);
}
inline void ObstacleRaw::set_property_conf(int index, float value) {
  property_conf_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.ObstacleRaw.property_conf)
}
inline void ObstacleRaw::add_property_conf(float value) {
  property_conf_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.ObstacleRaw.property_conf)
}
inline const ::google::protobuf::RepeatedField< float >&
ObstacleRaw::property_conf() const {
  // @@protoc_insertion_point(field_list:CommonProto.ObstacleRaw.property_conf)
  return property_conf_;
}
inline ::google::protobuf::RepeatedField< float >*
ObstacleRaw::mutable_property_conf() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.ObstacleRaw.property_conf)
  return &property_conf_;
}

// -------------------------------------------------------------------

// ObstacleRaws

// optional int32 cam_id = 1;
inline bool ObstacleRaws::has_cam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObstacleRaws::set_has_cam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObstacleRaws::clear_has_cam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObstacleRaws::clear_cam_id() {
  cam_id_ = 0;
  clear_has_cam_id();
}
inline ::google::protobuf::int32 ObstacleRaws::cam_id() const {
  // @@protoc_insertion_point(field_get:CommonProto.ObstacleRaws.cam_id)
  return cam_id_;
}
inline void ObstacleRaws::set_cam_id(::google::protobuf::int32 value) {
  set_has_cam_id();
  cam_id_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.ObstacleRaws.cam_id)
}

// repeated .CommonProto.ObstacleRaw obstacle = 2;
inline int ObstacleRaws::obstacle_size() const {
  return obstacle_.size();
}
inline void ObstacleRaws::clear_obstacle() {
  obstacle_.Clear();
}
inline const ::CommonProto::ObstacleRaw& ObstacleRaws::obstacle(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.ObstacleRaws.obstacle)
  return obstacle_.Get(index);
}
inline ::CommonProto::ObstacleRaw* ObstacleRaws::mutable_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.ObstacleRaws.obstacle)
  return obstacle_.Mutable(index);
}
inline ::CommonProto::ObstacleRaw* ObstacleRaws::add_obstacle() {
  // @@protoc_insertion_point(field_add:CommonProto.ObstacleRaws.obstacle)
  return obstacle_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >&
ObstacleRaws::obstacle() const {
  // @@protoc_insertion_point(field_list:CommonProto.ObstacleRaws.obstacle)
  return obstacle_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >*
ObstacleRaws::mutable_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.ObstacleRaws.obstacle)
  return &obstacle_;
}

// optional float conf_scale = 3 [default = 0.1];
inline bool ObstacleRaws::has_conf_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObstacleRaws::set_has_conf_scale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ObstacleRaws::clear_has_conf_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ObstacleRaws::clear_conf_scale() {
  conf_scale_ = 0.1f;
  clear_has_conf_scale();
}
inline float ObstacleRaws::conf_scale() const {
  // @@protoc_insertion_point(field_get:CommonProto.ObstacleRaws.conf_scale)
  return conf_scale_;
}
inline void ObstacleRaws::set_conf_scale(float value) {
  set_has_conf_scale();
  conf_scale_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.ObstacleRaws.conf_scale)
}

// -------------------------------------------------------------------

// FreeSpacePoints

// repeated int32 property = 3;
inline int FreeSpacePoints::property_size() const {
  return property_.size();
}
inline void FreeSpacePoints::clear_property() {
  property_.Clear();
}
inline ::google::protobuf::int32 FreeSpacePoints::property(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.FreeSpacePoints.property)
  return property_.Get(index);
}
inline void FreeSpacePoints::set_property(int index, ::google::protobuf::int32 value) {
  property_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.FreeSpacePoints.property)
}
inline void FreeSpacePoints::add_property(::google::protobuf::int32 value) {
  property_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.FreeSpacePoints.property)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FreeSpacePoints::property() const {
  // @@protoc_insertion_point(field_list:CommonProto.FreeSpacePoints.property)
  return property_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FreeSpacePoints::mutable_property() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.FreeSpacePoints.property)
  return &property_;
}

// optional int32 cam_id = 4;
inline bool FreeSpacePoints::has_cam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FreeSpacePoints::set_has_cam_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FreeSpacePoints::clear_has_cam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FreeSpacePoints::clear_cam_id() {
  cam_id_ = 0;
  clear_has_cam_id();
}
inline ::google::protobuf::int32 FreeSpacePoints::cam_id() const {
  // @@protoc_insertion_point(field_get:CommonProto.FreeSpacePoints.cam_id)
  return cam_id_;
}
inline void FreeSpacePoints::set_cam_id(::google::protobuf::int32 value) {
  set_has_cam_id();
  cam_id_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.FreeSpacePoints.cam_id)
}

// repeated .CommonProto.Point pts_vcs = 5;
inline int FreeSpacePoints::pts_vcs_size() const {
  return pts_vcs_.size();
}
inline void FreeSpacePoints::clear_pts_vcs() {
  pts_vcs_.Clear();
}
inline const ::CommonProto::Point& FreeSpacePoints::pts_vcs(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.FreeSpacePoints.pts_vcs)
  return pts_vcs_.Get(index);
}
inline ::CommonProto::Point* FreeSpacePoints::mutable_pts_vcs(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.FreeSpacePoints.pts_vcs)
  return pts_vcs_.Mutable(index);
}
inline ::CommonProto::Point* FreeSpacePoints::add_pts_vcs() {
  // @@protoc_insertion_point(field_add:CommonProto.FreeSpacePoints.pts_vcs)
  return pts_vcs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Point >&
FreeSpacePoints::pts_vcs() const {
  // @@protoc_insertion_point(field_list:CommonProto.FreeSpacePoints.pts_vcs)
  return pts_vcs_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Point >*
FreeSpacePoints::mutable_pts_vcs() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.FreeSpacePoints.pts_vcs)
  return &pts_vcs_;
}

// repeated .CommonProto.Point pts_img = 6;
inline int FreeSpacePoints::pts_img_size() const {
  return pts_img_.size();
}
inline void FreeSpacePoints::clear_pts_img() {
  pts_img_.Clear();
}
inline const ::CommonProto::Point& FreeSpacePoints::pts_img(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.FreeSpacePoints.pts_img)
  return pts_img_.Get(index);
}
inline ::CommonProto::Point* FreeSpacePoints::mutable_pts_img(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.FreeSpacePoints.pts_img)
  return pts_img_.Mutable(index);
}
inline ::CommonProto::Point* FreeSpacePoints::add_pts_img() {
  // @@protoc_insertion_point(field_add:CommonProto.FreeSpacePoints.pts_img)
  return pts_img_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Point >&
FreeSpacePoints::pts_img() const {
  // @@protoc_insertion_point(field_list:CommonProto.FreeSpacePoints.pts_img)
  return pts_img_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Point >*
FreeSpacePoints::mutable_pts_img() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.FreeSpacePoints.pts_img)
  return &pts_img_;
}

// -------------------------------------------------------------------

// Box3DRaw

// required .CommonProto.ObstacleRaw percept = 1;
inline bool Box3DRaw::has_percept() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Box3DRaw::set_has_percept() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Box3DRaw::clear_has_percept() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Box3DRaw::clear_percept() {
  if (percept_ != NULL) percept_->::CommonProto::ObstacleRaw::Clear();
  clear_has_percept();
}
inline const ::CommonProto::ObstacleRaw& Box3DRaw::percept() const {
  // @@protoc_insertion_point(field_get:CommonProto.Box3DRaw.percept)
  return percept_ != NULL ? *percept_ : *default_instance_->percept_;
}
inline ::CommonProto::ObstacleRaw* Box3DRaw::mutable_percept() {
  set_has_percept();
  if (percept_ == NULL) percept_ = new ::CommonProto::ObstacleRaw;
  // @@protoc_insertion_point(field_mutable:CommonProto.Box3DRaw.percept)
  return percept_;
}
inline ::CommonProto::ObstacleRaw* Box3DRaw::release_percept() {
  clear_has_percept();
  ::CommonProto::ObstacleRaw* temp = percept_;
  percept_ = NULL;
  return temp;
}
inline void Box3DRaw::set_allocated_percept(::CommonProto::ObstacleRaw* percept) {
  delete percept_;
  percept_ = percept;
  if (percept) {
    set_has_percept();
  } else {
    clear_has_percept();
  }
  // @@protoc_insertion_point(field_set_allocated:CommonProto.Box3DRaw.percept)
}

// required .CommonProto.Box3D box = 2;
inline bool Box3DRaw::has_box() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Box3DRaw::set_has_box() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Box3DRaw::clear_has_box() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Box3DRaw::clear_box() {
  if (box_ != NULL) box_->::CommonProto::Box3D::Clear();
  clear_has_box();
}
inline const ::CommonProto::Box3D& Box3DRaw::box() const {
  // @@protoc_insertion_point(field_get:CommonProto.Box3DRaw.box)
  return box_ != NULL ? *box_ : *default_instance_->box_;
}
inline ::CommonProto::Box3D* Box3DRaw::mutable_box() {
  set_has_box();
  if (box_ == NULL) box_ = new ::CommonProto::Box3D;
  // @@protoc_insertion_point(field_mutable:CommonProto.Box3DRaw.box)
  return box_;
}
inline ::CommonProto::Box3D* Box3DRaw::release_box() {
  clear_has_box();
  ::CommonProto::Box3D* temp = box_;
  box_ = NULL;
  return temp;
}
inline void Box3DRaw::set_allocated_box(::CommonProto::Box3D* box) {
  delete box_;
  box_ = box;
  if (box) {
    set_has_box();
  } else {
    clear_has_box();
  }
  // @@protoc_insertion_point(field_set_allocated:CommonProto.Box3DRaw.box)
}

// -------------------------------------------------------------------

// Box3DRaws

// optional int32 cam_id = 1;
inline bool Box3DRaws::has_cam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Box3DRaws::set_has_cam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Box3DRaws::clear_has_cam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Box3DRaws::clear_cam_id() {
  cam_id_ = 0;
  clear_has_cam_id();
}
inline ::google::protobuf::int32 Box3DRaws::cam_id() const {
  // @@protoc_insertion_point(field_get:CommonProto.Box3DRaws.cam_id)
  return cam_id_;
}
inline void Box3DRaws::set_cam_id(::google::protobuf::int32 value) {
  set_has_cam_id();
  cam_id_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Box3DRaws.cam_id)
}

// repeated .CommonProto.Box3DRaw box_3d = 2;
inline int Box3DRaws::box_3d_size() const {
  return box_3d_.size();
}
inline void Box3DRaws::clear_box_3d() {
  box_3d_.Clear();
}
inline const ::CommonProto::Box3DRaw& Box3DRaws::box_3d(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.Box3DRaws.box_3d)
  return box_3d_.Get(index);
}
inline ::CommonProto::Box3DRaw* Box3DRaws::mutable_box_3d(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.Box3DRaws.box_3d)
  return box_3d_.Mutable(index);
}
inline ::CommonProto::Box3DRaw* Box3DRaws::add_box_3d() {
  // @@protoc_insertion_point(field_add:CommonProto.Box3DRaws.box_3d)
  return box_3d_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Box3DRaw >&
Box3DRaws::box_3d() const {
  // @@protoc_insertion_point(field_list:CommonProto.Box3DRaws.box_3d)
  return box_3d_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Box3DRaw >*
Box3DRaws::mutable_box_3d() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.Box3DRaws.box_3d)
  return &box_3d_;
}

// -------------------------------------------------------------------

// Skeleton

// optional int32 id = 1;
inline bool Skeleton::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Skeleton::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Skeleton::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Skeleton::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Skeleton::id() const {
  // @@protoc_insertion_point(field_get:CommonProto.Skeleton.id)
  return id_;
}
inline void Skeleton::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Skeleton.id)
}

// repeated .CommonProto.SkeletonPoint skeleton = 2;
inline int Skeleton::skeleton_size() const {
  return skeleton_.size();
}
inline void Skeleton::clear_skeleton() {
  skeleton_.Clear();
}
inline const ::CommonProto::SkeletonPoint& Skeleton::skeleton(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.Skeleton.skeleton)
  return skeleton_.Get(index);
}
inline ::CommonProto::SkeletonPoint* Skeleton::mutable_skeleton(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.Skeleton.skeleton)
  return skeleton_.Mutable(index);
}
inline ::CommonProto::SkeletonPoint* Skeleton::add_skeleton() {
  // @@protoc_insertion_point(field_add:CommonProto.Skeleton.skeleton)
  return skeleton_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::SkeletonPoint >&
Skeleton::skeleton() const {
  // @@protoc_insertion_point(field_list:CommonProto.Skeleton.skeleton)
  return skeleton_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::SkeletonPoint >*
Skeleton::mutable_skeleton() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.Skeleton.skeleton)
  return &skeleton_;
}

// -------------------------------------------------------------------

// SkeletonRaw

// required .CommonProto.ObstacleRaw percept = 1;
inline bool SkeletonRaw::has_percept() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkeletonRaw::set_has_percept() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkeletonRaw::clear_has_percept() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkeletonRaw::clear_percept() {
  if (percept_ != NULL) percept_->::CommonProto::ObstacleRaw::Clear();
  clear_has_percept();
}
inline const ::CommonProto::ObstacleRaw& SkeletonRaw::percept() const {
  // @@protoc_insertion_point(field_get:CommonProto.SkeletonRaw.percept)
  return percept_ != NULL ? *percept_ : *default_instance_->percept_;
}
inline ::CommonProto::ObstacleRaw* SkeletonRaw::mutable_percept() {
  set_has_percept();
  if (percept_ == NULL) percept_ = new ::CommonProto::ObstacleRaw;
  // @@protoc_insertion_point(field_mutable:CommonProto.SkeletonRaw.percept)
  return percept_;
}
inline ::CommonProto::ObstacleRaw* SkeletonRaw::release_percept() {
  clear_has_percept();
  ::CommonProto::ObstacleRaw* temp = percept_;
  percept_ = NULL;
  return temp;
}
inline void SkeletonRaw::set_allocated_percept(::CommonProto::ObstacleRaw* percept) {
  delete percept_;
  percept_ = percept;
  if (percept) {
    set_has_percept();
  } else {
    clear_has_percept();
  }
  // @@protoc_insertion_point(field_set_allocated:CommonProto.SkeletonRaw.percept)
}

// repeated .CommonProto.SkeletonPoint skeleton = 2;
inline int SkeletonRaw::skeleton_size() const {
  return skeleton_.size();
}
inline void SkeletonRaw::clear_skeleton() {
  skeleton_.Clear();
}
inline const ::CommonProto::SkeletonPoint& SkeletonRaw::skeleton(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.SkeletonRaw.skeleton)
  return skeleton_.Get(index);
}
inline ::CommonProto::SkeletonPoint* SkeletonRaw::mutable_skeleton(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.SkeletonRaw.skeleton)
  return skeleton_.Mutable(index);
}
inline ::CommonProto::SkeletonPoint* SkeletonRaw::add_skeleton() {
  // @@protoc_insertion_point(field_add:CommonProto.SkeletonRaw.skeleton)
  return skeleton_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::SkeletonPoint >&
SkeletonRaw::skeleton() const {
  // @@protoc_insertion_point(field_list:CommonProto.SkeletonRaw.skeleton)
  return skeleton_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::SkeletonPoint >*
SkeletonRaw::mutable_skeleton() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.SkeletonRaw.skeleton)
  return &skeleton_;
}

// -------------------------------------------------------------------

// SkeletonRaws

// optional int32 cam_id = 1;
inline bool SkeletonRaws::has_cam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkeletonRaws::set_has_cam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkeletonRaws::clear_has_cam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkeletonRaws::clear_cam_id() {
  cam_id_ = 0;
  clear_has_cam_id();
}
inline ::google::protobuf::int32 SkeletonRaws::cam_id() const {
  // @@protoc_insertion_point(field_get:CommonProto.SkeletonRaws.cam_id)
  return cam_id_;
}
inline void SkeletonRaws::set_cam_id(::google::protobuf::int32 value) {
  set_has_cam_id();
  cam_id_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.SkeletonRaws.cam_id)
}

// repeated .CommonProto.SkeletonRaw skeleton_raw = 2;
inline int SkeletonRaws::skeleton_raw_size() const {
  return skeleton_raw_.size();
}
inline void SkeletonRaws::clear_skeleton_raw() {
  skeleton_raw_.Clear();
}
inline const ::CommonProto::SkeletonRaw& SkeletonRaws::skeleton_raw(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.SkeletonRaws.skeleton_raw)
  return skeleton_raw_.Get(index);
}
inline ::CommonProto::SkeletonRaw* SkeletonRaws::mutable_skeleton_raw(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.SkeletonRaws.skeleton_raw)
  return skeleton_raw_.Mutable(index);
}
inline ::CommonProto::SkeletonRaw* SkeletonRaws::add_skeleton_raw() {
  // @@protoc_insertion_point(field_add:CommonProto.SkeletonRaws.skeleton_raw)
  return skeleton_raw_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::SkeletonRaw >&
SkeletonRaws::skeleton_raw() const {
  // @@protoc_insertion_point(field_list:CommonProto.SkeletonRaws.skeleton_raw)
  return skeleton_raw_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::SkeletonRaw >*
SkeletonRaws::mutable_skeleton_raw() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.SkeletonRaws.skeleton_raw)
  return &skeleton_raw_;
}

// -------------------------------------------------------------------

// CameraMatrix

// repeated float mat_gnd2img = 1;
inline int CameraMatrix::mat_gnd2img_size() const {
  return mat_gnd2img_.size();
}
inline void CameraMatrix::clear_mat_gnd2img() {
  mat_gnd2img_.Clear();
}
inline float CameraMatrix::mat_gnd2img(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraMatrix.mat_gnd2img)
  return mat_gnd2img_.Get(index);
}
inline void CameraMatrix::set_mat_gnd2img(int index, float value) {
  mat_gnd2img_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.CameraMatrix.mat_gnd2img)
}
inline void CameraMatrix::add_mat_gnd2img(float value) {
  mat_gnd2img_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.CameraMatrix.mat_gnd2img)
}
inline const ::google::protobuf::RepeatedField< float >&
CameraMatrix::mat_gnd2img() const {
  // @@protoc_insertion_point(field_list:CommonProto.CameraMatrix.mat_gnd2img)
  return mat_gnd2img_;
}
inline ::google::protobuf::RepeatedField< float >*
CameraMatrix::mutable_mat_gnd2img() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.CameraMatrix.mat_gnd2img)
  return &mat_gnd2img_;
}

// repeated float mat_img2gnd = 2;
inline int CameraMatrix::mat_img2gnd_size() const {
  return mat_img2gnd_.size();
}
inline void CameraMatrix::clear_mat_img2gnd() {
  mat_img2gnd_.Clear();
}
inline float CameraMatrix::mat_img2gnd(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraMatrix.mat_img2gnd)
  return mat_img2gnd_.Get(index);
}
inline void CameraMatrix::set_mat_img2gnd(int index, float value) {
  mat_img2gnd_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.CameraMatrix.mat_img2gnd)
}
inline void CameraMatrix::add_mat_img2gnd(float value) {
  mat_img2gnd_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.CameraMatrix.mat_img2gnd)
}
inline const ::google::protobuf::RepeatedField< float >&
CameraMatrix::mat_img2gnd() const {
  // @@protoc_insertion_point(field_list:CommonProto.CameraMatrix.mat_img2gnd)
  return mat_img2gnd_;
}
inline ::google::protobuf::RepeatedField< float >*
CameraMatrix::mutable_mat_img2gnd() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.CameraMatrix.mat_img2gnd)
  return &mat_img2gnd_;
}

// repeated float mat_vcsgnd2img = 3;
inline int CameraMatrix::mat_vcsgnd2img_size() const {
  return mat_vcsgnd2img_.size();
}
inline void CameraMatrix::clear_mat_vcsgnd2img() {
  mat_vcsgnd2img_.Clear();
}
inline float CameraMatrix::mat_vcsgnd2img(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraMatrix.mat_vcsgnd2img)
  return mat_vcsgnd2img_.Get(index);
}
inline void CameraMatrix::set_mat_vcsgnd2img(int index, float value) {
  mat_vcsgnd2img_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.CameraMatrix.mat_vcsgnd2img)
}
inline void CameraMatrix::add_mat_vcsgnd2img(float value) {
  mat_vcsgnd2img_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.CameraMatrix.mat_vcsgnd2img)
}
inline const ::google::protobuf::RepeatedField< float >&
CameraMatrix::mat_vcsgnd2img() const {
  // @@protoc_insertion_point(field_list:CommonProto.CameraMatrix.mat_vcsgnd2img)
  return mat_vcsgnd2img_;
}
inline ::google::protobuf::RepeatedField< float >*
CameraMatrix::mutable_mat_vcsgnd2img() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.CameraMatrix.mat_vcsgnd2img)
  return &mat_vcsgnd2img_;
}

// repeated float mat_img2vcsgnd = 4;
inline int CameraMatrix::mat_img2vcsgnd_size() const {
  return mat_img2vcsgnd_.size();
}
inline void CameraMatrix::clear_mat_img2vcsgnd() {
  mat_img2vcsgnd_.Clear();
}
inline float CameraMatrix::mat_img2vcsgnd(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraMatrix.mat_img2vcsgnd)
  return mat_img2vcsgnd_.Get(index);
}
inline void CameraMatrix::set_mat_img2vcsgnd(int index, float value) {
  mat_img2vcsgnd_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.CameraMatrix.mat_img2vcsgnd)
}
inline void CameraMatrix::add_mat_img2vcsgnd(float value) {
  mat_img2vcsgnd_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.CameraMatrix.mat_img2vcsgnd)
}
inline const ::google::protobuf::RepeatedField< float >&
CameraMatrix::mat_img2vcsgnd() const {
  // @@protoc_insertion_point(field_list:CommonProto.CameraMatrix.mat_img2vcsgnd)
  return mat_img2vcsgnd_;
}
inline ::google::protobuf::RepeatedField< float >*
CameraMatrix::mutable_mat_img2vcsgnd() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.CameraMatrix.mat_img2vcsgnd)
  return &mat_img2vcsgnd_;
}

// repeated float mat_local2img = 5;
inline int CameraMatrix::mat_local2img_size() const {
  return mat_local2img_.size();
}
inline void CameraMatrix::clear_mat_local2img() {
  mat_local2img_.Clear();
}
inline float CameraMatrix::mat_local2img(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraMatrix.mat_local2img)
  return mat_local2img_.Get(index);
}
inline void CameraMatrix::set_mat_local2img(int index, float value) {
  mat_local2img_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.CameraMatrix.mat_local2img)
}
inline void CameraMatrix::add_mat_local2img(float value) {
  mat_local2img_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.CameraMatrix.mat_local2img)
}
inline const ::google::protobuf::RepeatedField< float >&
CameraMatrix::mat_local2img() const {
  // @@protoc_insertion_point(field_list:CommonProto.CameraMatrix.mat_local2img)
  return mat_local2img_;
}
inline ::google::protobuf::RepeatedField< float >*
CameraMatrix::mutable_mat_local2img() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.CameraMatrix.mat_local2img)
  return &mat_local2img_;
}

// repeated float mat_img2local = 6;
inline int CameraMatrix::mat_img2local_size() const {
  return mat_img2local_.size();
}
inline void CameraMatrix::clear_mat_img2local() {
  mat_img2local_.Clear();
}
inline float CameraMatrix::mat_img2local(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraMatrix.mat_img2local)
  return mat_img2local_.Get(index);
}
inline void CameraMatrix::set_mat_img2local(int index, float value) {
  mat_img2local_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.CameraMatrix.mat_img2local)
}
inline void CameraMatrix::add_mat_img2local(float value) {
  mat_img2local_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.CameraMatrix.mat_img2local)
}
inline const ::google::protobuf::RepeatedField< float >&
CameraMatrix::mat_img2local() const {
  // @@protoc_insertion_point(field_list:CommonProto.CameraMatrix.mat_img2local)
  return mat_img2local_;
}
inline ::google::protobuf::RepeatedField< float >*
CameraMatrix::mutable_mat_img2local() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.CameraMatrix.mat_img2local)
  return &mat_img2local_;
}

// -------------------------------------------------------------------

// DistortParam

// repeated float param = 1;
inline int DistortParam::param_size() const {
  return param_.size();
}
inline void DistortParam::clear_param() {
  param_.Clear();
}
inline float DistortParam::param(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.DistortParam.param)
  return param_.Get(index);
}
inline void DistortParam::set_param(int index, float value) {
  param_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.DistortParam.param)
}
inline void DistortParam::add_param(float value) {
  param_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.DistortParam.param)
}
inline const ::google::protobuf::RepeatedField< float >&
DistortParam::param() const {
  // @@protoc_insertion_point(field_list:CommonProto.DistortParam.param)
  return param_;
}
inline ::google::protobuf::RepeatedField< float >*
DistortParam::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.DistortParam.param)
  return &param_;
}

// -------------------------------------------------------------------

// VCSParam

// repeated float rotation = 1;
inline int VCSParam::rotation_size() const {
  return rotation_.size();
}
inline void VCSParam::clear_rotation() {
  rotation_.Clear();
}
inline float VCSParam::rotation(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.VCSParam.rotation)
  return rotation_.Get(index);
}
inline void VCSParam::set_rotation(int index, float value) {
  rotation_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.VCSParam.rotation)
}
inline void VCSParam::add_rotation(float value) {
  rotation_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.VCSParam.rotation)
}
inline const ::google::protobuf::RepeatedField< float >&
VCSParam::rotation() const {
  // @@protoc_insertion_point(field_list:CommonProto.VCSParam.rotation)
  return rotation_;
}
inline ::google::protobuf::RepeatedField< float >*
VCSParam::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.VCSParam.rotation)
  return &rotation_;
}

// repeated float translation = 2;
inline int VCSParam::translation_size() const {
  return translation_.size();
}
inline void VCSParam::clear_translation() {
  translation_.Clear();
}
inline float VCSParam::translation(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.VCSParam.translation)
  return translation_.Get(index);
}
inline void VCSParam::set_translation(int index, float value) {
  translation_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.VCSParam.translation)
}
inline void VCSParam::add_translation(float value) {
  translation_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.VCSParam.translation)
}
inline const ::google::protobuf::RepeatedField< float >&
VCSParam::translation() const {
  // @@protoc_insertion_point(field_list:CommonProto.VCSParam.translation)
  return translation_;
}
inline ::google::protobuf::RepeatedField< float >*
VCSParam::mutable_translation() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.VCSParam.translation)
  return &translation_;
}

// -------------------------------------------------------------------

// CameraParam

// required float focal_u = 1;
inline bool CameraParam::has_focal_u() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraParam::set_has_focal_u() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraParam::clear_has_focal_u() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraParam::clear_focal_u() {
  focal_u_ = 0;
  clear_has_focal_u();
}
inline float CameraParam::focal_u() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.focal_u)
  return focal_u_;
}
inline void CameraParam::set_focal_u(float value) {
  set_has_focal_u();
  focal_u_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.focal_u)
}

// required float focal_v = 2;
inline bool CameraParam::has_focal_v() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraParam::set_has_focal_v() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CameraParam::clear_has_focal_v() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CameraParam::clear_focal_v() {
  focal_v_ = 0;
  clear_has_focal_v();
}
inline float CameraParam::focal_v() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.focal_v)
  return focal_v_;
}
inline void CameraParam::set_focal_v(float value) {
  set_has_focal_v();
  focal_v_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.focal_v)
}

// required float center_u = 3;
inline bool CameraParam::has_center_u() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CameraParam::set_has_center_u() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CameraParam::clear_has_center_u() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CameraParam::clear_center_u() {
  center_u_ = 0;
  clear_has_center_u();
}
inline float CameraParam::center_u() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.center_u)
  return center_u_;
}
inline void CameraParam::set_center_u(float value) {
  set_has_center_u();
  center_u_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.center_u)
}

// required float center_v = 4;
inline bool CameraParam::has_center_v() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CameraParam::set_has_center_v() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CameraParam::clear_has_center_v() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CameraParam::clear_center_v() {
  center_v_ = 0;
  clear_has_center_v();
}
inline float CameraParam::center_v() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.center_v)
  return center_v_;
}
inline void CameraParam::set_center_v(float value) {
  set_has_center_v();
  center_v_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.center_v)
}

// required float camera_x = 5;
inline bool CameraParam::has_camera_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CameraParam::set_has_camera_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CameraParam::clear_has_camera_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CameraParam::clear_camera_x() {
  camera_x_ = 0;
  clear_has_camera_x();
}
inline float CameraParam::camera_x() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.camera_x)
  return camera_x_;
}
inline void CameraParam::set_camera_x(float value) {
  set_has_camera_x();
  camera_x_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.camera_x)
}

// required float camera_y = 6;
inline bool CameraParam::has_camera_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CameraParam::set_has_camera_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CameraParam::clear_has_camera_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CameraParam::clear_camera_y() {
  camera_y_ = 0;
  clear_has_camera_y();
}
inline float CameraParam::camera_y() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.camera_y)
  return camera_y_;
}
inline void CameraParam::set_camera_y(float value) {
  set_has_camera_y();
  camera_y_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.camera_y)
}

// required float camera_z = 7;
inline bool CameraParam::has_camera_z() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CameraParam::set_has_camera_z() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CameraParam::clear_has_camera_z() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CameraParam::clear_camera_z() {
  camera_z_ = 0;
  clear_has_camera_z();
}
inline float CameraParam::camera_z() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.camera_z)
  return camera_z_;
}
inline void CameraParam::set_camera_z(float value) {
  set_has_camera_z();
  camera_z_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.camera_z)
}

// required float pitch = 8;
inline bool CameraParam::has_pitch() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CameraParam::set_has_pitch() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CameraParam::clear_has_pitch() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CameraParam::clear_pitch() {
  pitch_ = 0;
  clear_has_pitch();
}
inline float CameraParam::pitch() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.pitch)
  return pitch_;
}
inline void CameraParam::set_pitch(float value) {
  set_has_pitch();
  pitch_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.pitch)
}

// required float yaw = 9;
inline bool CameraParam::has_yaw() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CameraParam::set_has_yaw() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CameraParam::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CameraParam::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
inline float CameraParam::yaw() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.yaw)
  return yaw_;
}
inline void CameraParam::set_yaw(float value) {
  set_has_yaw();
  yaw_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.yaw)
}

// required float roll = 10;
inline bool CameraParam::has_roll() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CameraParam::set_has_roll() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CameraParam::clear_has_roll() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CameraParam::clear_roll() {
  roll_ = 0;
  clear_has_roll();
}
inline float CameraParam::roll() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.roll)
  return roll_;
}
inline void CameraParam::set_roll(float value) {
  set_has_roll();
  roll_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.roll)
}

// optional int32 type = 11 [default = 0];
inline bool CameraParam::has_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CameraParam::set_has_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CameraParam::clear_has_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CameraParam::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CameraParam::type() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.type)
  return type_;
}
inline void CameraParam::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.type)
}

// optional float fov = 12;
inline bool CameraParam::has_fov() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CameraParam::set_has_fov() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CameraParam::clear_has_fov() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CameraParam::clear_fov() {
  fov_ = 0;
  clear_has_fov();
}
inline float CameraParam::fov() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.fov)
  return fov_;
}
inline void CameraParam::set_fov(float value) {
  set_has_fov();
  fov_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.fov)
}

// optional int32 version = 13 [default = 0];
inline bool CameraParam::has_version() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CameraParam::set_has_version() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CameraParam::clear_has_version() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CameraParam::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 CameraParam::version() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.version)
  return version_;
}
inline void CameraParam::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.version)
}

// optional .CommonProto.CalibrationStatus cali_status = 14;
inline bool CameraParam::has_cali_status() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CameraParam::set_has_cali_status() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CameraParam::clear_has_cali_status() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CameraParam::clear_cali_status() {
  cali_status_ = 0;
  clear_has_cali_status();
}
inline ::CommonProto::CalibrationStatus CameraParam::cali_status() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.cali_status)
  return static_cast< ::CommonProto::CalibrationStatus >(cali_status_);
}
inline void CameraParam::set_cali_status(::CommonProto::CalibrationStatus value) {
  assert(::CommonProto::CalibrationStatus_IsValid(value));
  set_has_cali_status();
  cali_status_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.cali_status)
}

// optional .CommonProto.DistortParam distort = 20;
inline bool CameraParam::has_distort() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CameraParam::set_has_distort() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CameraParam::clear_has_distort() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CameraParam::clear_distort() {
  if (distort_ != NULL) distort_->::CommonProto::DistortParam::Clear();
  clear_has_distort();
}
inline const ::CommonProto::DistortParam& CameraParam::distort() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.distort)
  return distort_ != NULL ? *distort_ : *default_instance_->distort_;
}
inline ::CommonProto::DistortParam* CameraParam::mutable_distort() {
  set_has_distort();
  if (distort_ == NULL) distort_ = new ::CommonProto::DistortParam;
  // @@protoc_insertion_point(field_mutable:CommonProto.CameraParam.distort)
  return distort_;
}
inline ::CommonProto::DistortParam* CameraParam::release_distort() {
  clear_has_distort();
  ::CommonProto::DistortParam* temp = distort_;
  distort_ = NULL;
  return temp;
}
inline void CameraParam::set_allocated_distort(::CommonProto::DistortParam* distort) {
  delete distort_;
  distort_ = distort;
  if (distort) {
    set_has_distort();
  } else {
    clear_has_distort();
  }
  // @@protoc_insertion_point(field_set_allocated:CommonProto.CameraParam.distort)
}

// optional .CommonProto.VCSParam vcs = 21;
inline bool CameraParam::has_vcs() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CameraParam::set_has_vcs() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CameraParam::clear_has_vcs() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CameraParam::clear_vcs() {
  if (vcs_ != NULL) vcs_->::CommonProto::VCSParam::Clear();
  clear_has_vcs();
}
inline const ::CommonProto::VCSParam& CameraParam::vcs() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.vcs)
  return vcs_ != NULL ? *vcs_ : *default_instance_->vcs_;
}
inline ::CommonProto::VCSParam* CameraParam::mutable_vcs() {
  set_has_vcs();
  if (vcs_ == NULL) vcs_ = new ::CommonProto::VCSParam;
  // @@protoc_insertion_point(field_mutable:CommonProto.CameraParam.vcs)
  return vcs_;
}
inline ::CommonProto::VCSParam* CameraParam::release_vcs() {
  clear_has_vcs();
  ::CommonProto::VCSParam* temp = vcs_;
  vcs_ = NULL;
  return temp;
}
inline void CameraParam::set_allocated_vcs(::CommonProto::VCSParam* vcs) {
  delete vcs_;
  vcs_ = vcs;
  if (vcs) {
    set_has_vcs();
  } else {
    clear_has_vcs();
  }
  // @@protoc_insertion_point(field_set_allocated:CommonProto.CameraParam.vcs)
}

// optional .CommonProto.CameraMatrix mat = 30;
inline bool CameraParam::has_mat() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CameraParam::set_has_mat() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CameraParam::clear_has_mat() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CameraParam::clear_mat() {
  if (mat_ != NULL) mat_->::CommonProto::CameraMatrix::Clear();
  clear_has_mat();
}
inline const ::CommonProto::CameraMatrix& CameraParam::mat() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.mat)
  return mat_ != NULL ? *mat_ : *default_instance_->mat_;
}
inline ::CommonProto::CameraMatrix* CameraParam::mutable_mat() {
  set_has_mat();
  if (mat_ == NULL) mat_ = new ::CommonProto::CameraMatrix;
  // @@protoc_insertion_point(field_mutable:CommonProto.CameraParam.mat)
  return mat_;
}
inline ::CommonProto::CameraMatrix* CameraParam::release_mat() {
  clear_has_mat();
  ::CommonProto::CameraMatrix* temp = mat_;
  mat_ = NULL;
  return temp;
}
inline void CameraParam::set_allocated_mat(::CommonProto::CameraMatrix* mat) {
  delete mat_;
  mat_ = mat;
  if (mat) {
    set_has_mat();
  } else {
    clear_has_mat();
  }
  // @@protoc_insertion_point(field_set_allocated:CommonProto.CameraParam.mat)
}

// optional string vendor = 50;
inline bool CameraParam::has_vendor() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CameraParam::set_has_vendor() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CameraParam::clear_has_vendor() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CameraParam::clear_vendor() {
  if (vendor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vendor_->clear();
  }
  clear_has_vendor();
}
inline const ::std::string& CameraParam::vendor() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.vendor)
  return *vendor_;
}
inline void CameraParam::set_vendor(const ::std::string& value) {
  set_has_vendor();
  if (vendor_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vendor_ = new ::std::string;
  }
  vendor_->assign(value);
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.vendor)
}
inline void CameraParam::set_vendor(const char* value) {
  set_has_vendor();
  if (vendor_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vendor_ = new ::std::string;
  }
  vendor_->assign(value);
  // @@protoc_insertion_point(field_set_char:CommonProto.CameraParam.vendor)
}
inline void CameraParam::set_vendor(const char* value, size_t size) {
  set_has_vendor();
  if (vendor_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vendor_ = new ::std::string;
  }
  vendor_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CommonProto.CameraParam.vendor)
}
inline ::std::string* CameraParam::mutable_vendor() {
  set_has_vendor();
  if (vendor_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vendor_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CommonProto.CameraParam.vendor)
  return vendor_;
}
inline ::std::string* CameraParam::release_vendor() {
  clear_has_vendor();
  if (vendor_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = vendor_;
    vendor_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CameraParam::set_allocated_vendor(::std::string* vendor) {
  if (vendor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vendor_;
  }
  if (vendor) {
    set_has_vendor();
    vendor_ = vendor;
  } else {
    clear_has_vendor();
    vendor_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CommonProto.CameraParam.vendor)
}

// -------------------------------------------------------------------

// MotionFrame

// required float speed = 1;
inline bool MotionFrame::has_speed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MotionFrame::set_has_speed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MotionFrame::clear_has_speed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MotionFrame::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline float MotionFrame::speed() const {
  // @@protoc_insertion_point(field_get:CommonProto.MotionFrame.speed)
  return speed_;
}
inline void MotionFrame::set_speed(float value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.MotionFrame.speed)
}

// optional float acc = 2;
inline bool MotionFrame::has_acc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MotionFrame::set_has_acc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MotionFrame::clear_has_acc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MotionFrame::clear_acc() {
  acc_ = 0;
  clear_has_acc();
}
inline float MotionFrame::acc() const {
  // @@protoc_insertion_point(field_get:CommonProto.MotionFrame.acc)
  return acc_;
}
inline void MotionFrame::set_acc(float value) {
  set_has_acc();
  acc_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.MotionFrame.acc)
}

// required float yaw_rate = 3;
inline bool MotionFrame::has_yaw_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MotionFrame::set_has_yaw_rate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MotionFrame::clear_has_yaw_rate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MotionFrame::clear_yaw_rate() {
  yaw_rate_ = 0;
  clear_has_yaw_rate();
}
inline float MotionFrame::yaw_rate() const {
  // @@protoc_insertion_point(field_get:CommonProto.MotionFrame.yaw_rate)
  return yaw_rate_;
}
inline void MotionFrame::set_yaw_rate(float value) {
  set_has_yaw_rate();
  yaw_rate_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.MotionFrame.yaw_rate)
}

// required int64 time_stamp = 4;
inline bool MotionFrame::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MotionFrame::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MotionFrame::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MotionFrame::clear_time_stamp() {
  time_stamp_ = GOOGLE_LONGLONG(0);
  clear_has_time_stamp();
}
inline ::google::protobuf::int64 MotionFrame::time_stamp() const {
  // @@protoc_insertion_point(field_get:CommonProto.MotionFrame.time_stamp)
  return time_stamp_;
}
inline void MotionFrame::set_time_stamp(::google::protobuf::int64 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.MotionFrame.time_stamp)
}

// optional float turning_radius = 5;
inline bool MotionFrame::has_turning_radius() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MotionFrame::set_has_turning_radius() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MotionFrame::clear_has_turning_radius() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MotionFrame::clear_turning_radius() {
  turning_radius_ = 0;
  clear_has_turning_radius();
}
inline float MotionFrame::turning_radius() const {
  // @@protoc_insertion_point(field_get:CommonProto.MotionFrame.turning_radius)
  return turning_radius_;
}
inline void MotionFrame::set_turning_radius(float value) {
  set_has_turning_radius();
  turning_radius_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.MotionFrame.turning_radius)
}

// optional bool is_stable = 6;
inline bool MotionFrame::has_is_stable() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MotionFrame::set_has_is_stable() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MotionFrame::clear_has_is_stable() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MotionFrame::clear_is_stable() {
  is_stable_ = false;
  clear_has_is_stable();
}
inline bool MotionFrame::is_stable() const {
  // @@protoc_insertion_point(field_get:CommonProto.MotionFrame.is_stable)
  return is_stable_;
}
inline void MotionFrame::set_is_stable(bool value) {
  set_has_is_stable();
  is_stable_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.MotionFrame.is_stable)
}

// -------------------------------------------------------------------

// OdometryFrame

// required float x = 1;
inline bool OdometryFrame::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OdometryFrame::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OdometryFrame::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OdometryFrame::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float OdometryFrame::x() const {
  // @@protoc_insertion_point(field_get:CommonProto.OdometryFrame.x)
  return x_;
}
inline void OdometryFrame::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.OdometryFrame.x)
}

// required float y = 2;
inline bool OdometryFrame::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OdometryFrame::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OdometryFrame::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OdometryFrame::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float OdometryFrame::y() const {
  // @@protoc_insertion_point(field_get:CommonProto.OdometryFrame.y)
  return y_;
}
inline void OdometryFrame::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.OdometryFrame.y)
}

// required float yaw = 3;
inline bool OdometryFrame::has_yaw() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OdometryFrame::set_has_yaw() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OdometryFrame::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OdometryFrame::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
inline float OdometryFrame::yaw() const {
  // @@protoc_insertion_point(field_get:CommonProto.OdometryFrame.yaw)
  return yaw_;
}
inline void OdometryFrame::set_yaw(float value) {
  set_has_yaw();
  yaw_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.OdometryFrame.yaw)
}

// required float speed = 4;
inline bool OdometryFrame::has_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OdometryFrame::set_has_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OdometryFrame::clear_has_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OdometryFrame::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline float OdometryFrame::speed() const {
  // @@protoc_insertion_point(field_get:CommonProto.OdometryFrame.speed)
  return speed_;
}
inline void OdometryFrame::set_speed(float value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.OdometryFrame.speed)
}

// required float yaw_rate = 5;
inline bool OdometryFrame::has_yaw_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OdometryFrame::set_has_yaw_rate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OdometryFrame::clear_has_yaw_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OdometryFrame::clear_yaw_rate() {
  yaw_rate_ = 0;
  clear_has_yaw_rate();
}
inline float OdometryFrame::yaw_rate() const {
  // @@protoc_insertion_point(field_get:CommonProto.OdometryFrame.yaw_rate)
  return yaw_rate_;
}
inline void OdometryFrame::set_yaw_rate(float value) {
  set_has_yaw_rate();
  yaw_rate_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.OdometryFrame.yaw_rate)
}

// required int64 time_stamp = 6;
inline bool OdometryFrame::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OdometryFrame::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OdometryFrame::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OdometryFrame::clear_time_stamp() {
  time_stamp_ = GOOGLE_LONGLONG(0);
  clear_has_time_stamp();
}
inline ::google::protobuf::int64 OdometryFrame::time_stamp() const {
  // @@protoc_insertion_point(field_get:CommonProto.OdometryFrame.time_stamp)
  return time_stamp_;
}
inline void OdometryFrame::set_time_stamp(::google::protobuf::int64 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.OdometryFrame.time_stamp)
}

// -------------------------------------------------------------------

// SerializedData

// required string type = 1;
inline bool SerializedData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SerializedData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SerializedData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SerializedData::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& SerializedData::type() const {
  // @@protoc_insertion_point(field_get:CommonProto.SerializedData.type)
  return *type_;
}
inline void SerializedData::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:CommonProto.SerializedData.type)
}
inline void SerializedData::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:CommonProto.SerializedData.type)
}
inline void SerializedData::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CommonProto.SerializedData.type)
}
inline ::std::string* SerializedData::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CommonProto.SerializedData.type)
  return type_;
}
inline ::std::string* SerializedData::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SerializedData::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CommonProto.SerializedData.type)
}

// required bytes proto = 2;
inline bool SerializedData::has_proto() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SerializedData::set_has_proto() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SerializedData::clear_has_proto() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SerializedData::clear_proto() {
  if (proto_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proto_->clear();
  }
  clear_has_proto();
}
inline const ::std::string& SerializedData::proto() const {
  // @@protoc_insertion_point(field_get:CommonProto.SerializedData.proto)
  return *proto_;
}
inline void SerializedData::set_proto(const ::std::string& value) {
  set_has_proto();
  if (proto_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proto_ = new ::std::string;
  }
  proto_->assign(value);
  // @@protoc_insertion_point(field_set:CommonProto.SerializedData.proto)
}
inline void SerializedData::set_proto(const char* value) {
  set_has_proto();
  if (proto_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proto_ = new ::std::string;
  }
  proto_->assign(value);
  // @@protoc_insertion_point(field_set_char:CommonProto.SerializedData.proto)
}
inline void SerializedData::set_proto(const void* value, size_t size) {
  set_has_proto();
  if (proto_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proto_ = new ::std::string;
  }
  proto_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CommonProto.SerializedData.proto)
}
inline ::std::string* SerializedData::mutable_proto() {
  set_has_proto();
  if (proto_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proto_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CommonProto.SerializedData.proto)
  return proto_;
}
inline ::std::string* SerializedData::release_proto() {
  clear_has_proto();
  if (proto_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = proto_;
    proto_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SerializedData::set_allocated_proto(::std::string* proto) {
  if (proto_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proto_;
  }
  if (proto) {
    set_has_proto();
    proto_ = proto;
  } else {
    clear_has_proto();
    proto_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CommonProto.SerializedData.proto)
}

// required int32 channel = 4 [default = 0];
inline bool SerializedData::has_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SerializedData::set_has_channel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SerializedData::clear_has_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SerializedData::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 SerializedData::channel() const {
  // @@protoc_insertion_point(field_get:CommonProto.SerializedData.channel)
  return channel_;
}
inline void SerializedData::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.SerializedData.channel)
}

// required bool with_data_field = 5 [default = true];
inline bool SerializedData::has_with_data_field() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SerializedData::set_has_with_data_field() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SerializedData::clear_has_with_data_field() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SerializedData::clear_with_data_field() {
  with_data_field_ = true;
  clear_has_with_data_field();
}
inline bool SerializedData::with_data_field() const {
  // @@protoc_insertion_point(field_get:CommonProto.SerializedData.with_data_field)
  return with_data_field_;
}
inline void SerializedData::set_with_data_field(bool value) {
  set_has_with_data_field();
  with_data_field_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.SerializedData.with_data_field)
}

// -------------------------------------------------------------------

// DataDescriptor

// optional string type = 1;
inline bool DataDescriptor::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataDescriptor::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataDescriptor::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataDescriptor::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& DataDescriptor::type() const {
  // @@protoc_insertion_point(field_get:CommonProto.DataDescriptor.type)
  return *type_;
}
inline void DataDescriptor::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:CommonProto.DataDescriptor.type)
}
inline void DataDescriptor::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:CommonProto.DataDescriptor.type)
}
inline void DataDescriptor::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CommonProto.DataDescriptor.type)
}
inline ::std::string* DataDescriptor::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CommonProto.DataDescriptor.type)
  return type_;
}
inline ::std::string* DataDescriptor::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DataDescriptor::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CommonProto.DataDescriptor.type)
}

// optional .CommonProto.SerializedData data = 2;
inline bool DataDescriptor::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataDescriptor::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataDescriptor::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataDescriptor::clear_data() {
  if (data_ != NULL) data_->::CommonProto::SerializedData::Clear();
  clear_has_data();
}
inline const ::CommonProto::SerializedData& DataDescriptor::data() const {
  // @@protoc_insertion_point(field_get:CommonProto.DataDescriptor.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::CommonProto::SerializedData* DataDescriptor::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::CommonProto::SerializedData;
  // @@protoc_insertion_point(field_mutable:CommonProto.DataDescriptor.data)
  return data_;
}
inline ::CommonProto::SerializedData* DataDescriptor::release_data() {
  clear_has_data();
  ::CommonProto::SerializedData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void DataDescriptor::set_allocated_data(::CommonProto::SerializedData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:CommonProto.DataDescriptor.data)
}

// -------------------------------------------------------------------

// Color

// required uint32 b = 1;
inline bool Color::has_b() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Color::set_has_b() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Color::clear_has_b() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Color::clear_b() {
  b_ = 0u;
  clear_has_b();
}
inline ::google::protobuf::uint32 Color::b() const {
  // @@protoc_insertion_point(field_get:CommonProto.Color.b)
  return b_;
}
inline void Color::set_b(::google::protobuf::uint32 value) {
  set_has_b();
  b_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Color.b)
}

// required uint32 g = 2;
inline bool Color::has_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Color::set_has_g() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Color::clear_has_g() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Color::clear_g() {
  g_ = 0u;
  clear_has_g();
}
inline ::google::protobuf::uint32 Color::g() const {
  // @@protoc_insertion_point(field_get:CommonProto.Color.g)
  return g_;
}
inline void Color::set_g(::google::protobuf::uint32 value) {
  set_has_g();
  g_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Color.g)
}

// required uint32 r = 3;
inline bool Color::has_r() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Color::set_has_r() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Color::clear_has_r() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Color::clear_r() {
  r_ = 0u;
  clear_has_r();
}
inline ::google::protobuf::uint32 Color::r() const {
  // @@protoc_insertion_point(field_get:CommonProto.Color.r)
  return r_;
}
inline void Color::set_r(::google::protobuf::uint32 value) {
  set_has_r();
  r_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Color.r)
}

// -------------------------------------------------------------------

// ParsingSetting

// required int32 parsing_type = 1;
inline bool ParsingSetting::has_parsing_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParsingSetting::set_has_parsing_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParsingSetting::clear_has_parsing_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParsingSetting::clear_parsing_type() {
  parsing_type_ = 0;
  clear_has_parsing_type();
}
inline ::google::protobuf::int32 ParsingSetting::parsing_type() const {
  // @@protoc_insertion_point(field_get:CommonProto.ParsingSetting.parsing_type)
  return parsing_type_;
}
inline void ParsingSetting::set_parsing_type(::google::protobuf::int32 value) {
  set_has_parsing_type();
  parsing_type_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.ParsingSetting.parsing_type)
}

// required int32 parsing_channels = 2;
inline bool ParsingSetting::has_parsing_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParsingSetting::set_has_parsing_channels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParsingSetting::clear_has_parsing_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParsingSetting::clear_parsing_channels() {
  parsing_channels_ = 0;
  clear_has_parsing_channels();
}
inline ::google::protobuf::int32 ParsingSetting::parsing_channels() const {
  // @@protoc_insertion_point(field_get:CommonProto.ParsingSetting.parsing_channels)
  return parsing_channels_;
}
inline void ParsingSetting::set_parsing_channels(::google::protobuf::int32 value) {
  set_has_parsing_channels();
  parsing_channels_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.ParsingSetting.parsing_channels)
}

// repeated uint64 channel_labels = 3;
inline int ParsingSetting::channel_labels_size() const {
  return channel_labels_.size();
}
inline void ParsingSetting::clear_channel_labels() {
  channel_labels_.Clear();
}
inline ::google::protobuf::uint64 ParsingSetting::channel_labels(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.ParsingSetting.channel_labels)
  return channel_labels_.Get(index);
}
inline void ParsingSetting::set_channel_labels(int index, ::google::protobuf::uint64 value) {
  channel_labels_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.ParsingSetting.channel_labels)
}
inline void ParsingSetting::add_channel_labels(::google::protobuf::uint64 value) {
  channel_labels_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.ParsingSetting.channel_labels)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ParsingSetting::channel_labels() const {
  // @@protoc_insertion_point(field_list:CommonProto.ParsingSetting.channel_labels)
  return channel_labels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ParsingSetting::mutable_channel_labels() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.ParsingSetting.channel_labels)
  return &channel_labels_;
}

// repeated .CommonProto.Color channel_colors = 4;
inline int ParsingSetting::channel_colors_size() const {
  return channel_colors_.size();
}
inline void ParsingSetting::clear_channel_colors() {
  channel_colors_.Clear();
}
inline const ::CommonProto::Color& ParsingSetting::channel_colors(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.ParsingSetting.channel_colors)
  return channel_colors_.Get(index);
}
inline ::CommonProto::Color* ParsingSetting::mutable_channel_colors(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.ParsingSetting.channel_colors)
  return channel_colors_.Mutable(index);
}
inline ::CommonProto::Color* ParsingSetting::add_channel_colors() {
  // @@protoc_insertion_point(field_add:CommonProto.ParsingSetting.channel_colors)
  return channel_colors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Color >&
ParsingSetting::channel_colors() const {
  // @@protoc_insertion_point(field_list:CommonProto.ParsingSetting.channel_colors)
  return channel_colors_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Color >*
ParsingSetting::mutable_channel_colors() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.ParsingSetting.channel_colors)
  return &channel_colors_;
}

// repeated int32 freespace_channels = 5;
inline int ParsingSetting::freespace_channels_size() const {
  return freespace_channels_.size();
}
inline void ParsingSetting::clear_freespace_channels() {
  freespace_channels_.Clear();
}
inline ::google::protobuf::int32 ParsingSetting::freespace_channels(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.ParsingSetting.freespace_channels)
  return freespace_channels_.Get(index);
}
inline void ParsingSetting::set_freespace_channels(int index, ::google::protobuf::int32 value) {
  freespace_channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.ParsingSetting.freespace_channels)
}
inline void ParsingSetting::add_freespace_channels(::google::protobuf::int32 value) {
  freespace_channels_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.ParsingSetting.freespace_channels)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ParsingSetting::freespace_channels() const {
  // @@protoc_insertion_point(field_list:CommonProto.ParsingSetting.freespace_channels)
  return freespace_channels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ParsingSetting::mutable_freespace_channels() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.ParsingSetting.freespace_channels)
  return &freespace_channels_;
}

// repeated int32 boundspace_channels = 6;
inline int ParsingSetting::boundspace_channels_size() const {
  return boundspace_channels_.size();
}
inline void ParsingSetting::clear_boundspace_channels() {
  boundspace_channels_.Clear();
}
inline ::google::protobuf::int32 ParsingSetting::boundspace_channels(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.ParsingSetting.boundspace_channels)
  return boundspace_channels_.Get(index);
}
inline void ParsingSetting::set_boundspace_channels(int index, ::google::protobuf::int32 value) {
  boundspace_channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.ParsingSetting.boundspace_channels)
}
inline void ParsingSetting::add_boundspace_channels(::google::protobuf::int32 value) {
  boundspace_channels_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.ParsingSetting.boundspace_channels)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ParsingSetting::boundspace_channels() const {
  // @@protoc_insertion_point(field_list:CommonProto.ParsingSetting.boundspace_channels)
  return boundspace_channels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ParsingSetting::mutable_boundspace_channels() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.ParsingSetting.boundspace_channels)
  return &boundspace_channels_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CommonProto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::CommonProto::Line_EndPointType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::Line_EndPointType>() {
  return ::CommonProto::Line_EndPointType_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::SkeletonType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::SkeletonType>() {
  return ::CommonProto::SkeletonType_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::ImageFormat> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::ImageFormat>() {
  return ::CommonProto::ImageFormat_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::ParsingFormat> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::ParsingFormat>() {
  return ::CommonProto::ParsingFormat_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::LineType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::LineType>() {
  return ::CommonProto::LineType_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::ObstacleType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::ObstacleType>() {
  return ::CommonProto::ObstacleType_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::TrafficLightStyle> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::TrafficLightStyle>() {
  return ::CommonProto::TrafficLightStyle_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::TrafficLightStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::TrafficLightStatus>() {
  return ::CommonProto::TrafficLightStatus_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::TrafficSignType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::TrafficSignType>() {
  return ::CommonProto::TrafficSignType_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::ParkingSlotStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::ParkingSlotStatus>() {
  return ::CommonProto::ParkingSlotStatus_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::VehProperty> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::VehProperty>() {
  return ::CommonProto::VehProperty_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::VehPropertyPerceptionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::VehPropertyPerceptionType>() {
  return ::CommonProto::VehPropertyPerceptionType_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::TrafficLightProperty> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::TrafficLightProperty>() {
  return ::CommonProto::TrafficLightProperty_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::TrafficSignProperty> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::TrafficSignProperty>() {
  return ::CommonProto::TrafficSignProperty_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::RoadSignProperty> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::RoadSignProperty>() {
  return ::CommonProto::RoadSignProperty_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::ObstacleRawModelType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::ObstacleRawModelType>() {
  return ::CommonProto::ObstacleRawModelType_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::LanePosition> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::LanePosition>() {
  return ::CommonProto::LanePosition_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::FreeSpacePointType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::FreeSpacePointType>() {
  return ::CommonProto::FreeSpacePointType_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::CameraType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::CameraType>() {
  return ::CommonProto::CameraType_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::CameraVersion> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::CameraVersion>() {
  return ::CommonProto::CameraVersion_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::CalibrationStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::CalibrationStatus>() {
  return ::CommonProto::CalibrationStatus_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::DataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::DataType>() {
  return ::CommonProto::DataType_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::PasringLableType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::PasringLableType>() {
  return ::CommonProto::PasringLableType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2eproto__INCLUDED
