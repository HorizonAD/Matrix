// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meta.proto

#ifndef PROTOBUF_meta_2eproto__INCLUDED
#define PROTOBUF_meta_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "meta_data.pb.h"
// @@protoc_insertion_point(includes)

namespace Meta {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_meta_2eproto();
void protobuf_AssignDesc_meta_2eproto();
void protobuf_ShutdownFile_meta_2eproto();

class Meta;

// ===================================================================

class Meta : public ::google::protobuf::Message {
 public:
  Meta();
  virtual ~Meta();

  Meta(const Meta& from);

  inline Meta& operator=(const Meta& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Meta& default_instance();

  void Swap(Meta* other);

  // implements Message ----------------------------------------------

  Meta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Meta& from);
  void MergeFrom(const Meta& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // required int32 frame_id = 2;
  inline bool has_frame_id() const;
  inline void clear_frame_id();
  static const int kFrameIdFieldNumber = 2;
  inline ::google::protobuf::int32 frame_id() const;
  inline void set_frame_id(::google::protobuf::int32 value);

  // optional .MetaData.Data data = 7;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 7;
  inline const ::MetaData::Data& data() const;
  inline ::MetaData::Data* mutable_data();
  inline ::MetaData::Data* release_data();
  inline void set_allocated_data(::MetaData::Data* data);

  // @@protoc_insertion_point(class_scope:Meta.Meta)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_frame_id();
  inline void clear_has_frame_id();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 frame_id_;
  ::MetaData::Data* data_;
  friend void  protobuf_AddDesc_meta_2eproto();
  friend void protobuf_AssignDesc_meta_2eproto();
  friend void protobuf_ShutdownFile_meta_2eproto();

  void InitAsDefaultInstance();
  static Meta* default_instance_;
};
// ===================================================================


// ===================================================================

// Meta

// required int32 version = 1;
inline bool Meta::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Meta::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Meta::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Meta::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 Meta::version() const {
  // @@protoc_insertion_point(field_get:Meta.Meta.version)
  return version_;
}
inline void Meta::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Meta.Meta.version)
}

// required int32 frame_id = 2;
inline bool Meta::has_frame_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Meta::set_has_frame_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Meta::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Meta::clear_frame_id() {
  frame_id_ = 0;
  clear_has_frame_id();
}
inline ::google::protobuf::int32 Meta::frame_id() const {
  // @@protoc_insertion_point(field_get:Meta.Meta.frame_id)
  return frame_id_;
}
inline void Meta::set_frame_id(::google::protobuf::int32 value) {
  set_has_frame_id();
  frame_id_ = value;
  // @@protoc_insertion_point(field_set:Meta.Meta.frame_id)
}

// optional .MetaData.Data data = 7;
inline bool Meta::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Meta::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Meta::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Meta::clear_data() {
  if (data_ != NULL) data_->::MetaData::Data::Clear();
  clear_has_data();
}
inline const ::MetaData::Data& Meta::data() const {
  // @@protoc_insertion_point(field_get:Meta.Meta.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::MetaData::Data* Meta::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::MetaData::Data;
  // @@protoc_insertion_point(field_mutable:Meta.Meta.data)
  return data_;
}
inline ::MetaData::Data* Meta::release_data() {
  clear_has_data();
  ::MetaData::Data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void Meta::set_allocated_data(::MetaData::Data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Meta.Meta.data)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Meta

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_meta_2eproto__INCLUDED
