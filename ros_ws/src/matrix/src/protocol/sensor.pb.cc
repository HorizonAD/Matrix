// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sensor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SensorProto {

namespace {

const ::google::protobuf::Descriptor* IMUFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IMUFrame_reflection_ = NULL;
const ::google::protobuf::Descriptor* GPSFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GPSFrame_reflection_ = NULL;
const ::google::protobuf::Descriptor* GPSFrameRaw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GPSFrameRaw_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_sensor_2eproto() {
  protobuf_AddDesc_sensor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sensor.proto");
  GOOGLE_CHECK(file != NULL);
  IMUFrame_descriptor_ = file->message_type(0);
  static const int IMUFrame_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUFrame, acc_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUFrame, acc_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUFrame, acc_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUFrame, gyro_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUFrame, gyro_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUFrame, gyro_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUFrame, temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUFrame, time_stamp_),
  };
  IMUFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IMUFrame_descriptor_,
      IMUFrame::default_instance_,
      IMUFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IMUFrame));
  GPSFrame_descriptor_ = file->message_type(1);
  static const int GPSFrame_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFrame, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFrame, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFrame, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFrame, longitude_cent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFrame, longitude_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFrame, latitude_cent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFrame, latitude_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFrame, ground_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFrame, ground_course_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFrame, gps_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFrame, altitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFrame, accuracy_),
  };
  GPSFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GPSFrame_descriptor_,
      GPSFrame::default_instance_,
      GPSFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GPSFrame));
  GPSFrameRaw_descriptor_ = file->message_type(2);
  static const int GPSFrameRaw_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFrameRaw, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFrameRaw, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFrameRaw, parsed_),
  };
  GPSFrameRaw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GPSFrameRaw_descriptor_,
      GPSFrameRaw::default_instance_,
      GPSFrameRaw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFrameRaw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFrameRaw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GPSFrameRaw));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sensor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IMUFrame_descriptor_, &IMUFrame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GPSFrame_descriptor_, &GPSFrame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GPSFrameRaw_descriptor_, &GPSFrameRaw::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sensor_2eproto() {
  delete IMUFrame::default_instance_;
  delete IMUFrame_reflection_;
  delete GPSFrame::default_instance_;
  delete GPSFrame_reflection_;
  delete GPSFrameRaw::default_instance_;
  delete GPSFrameRaw_reflection_;
}

void protobuf_AddDesc_sensor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014sensor.proto\022\013SensorProto\"\220\001\n\010IMUFrame"
    "\022\r\n\005acc_x\030\001 \001(\002\022\r\n\005acc_y\030\002 \001(\002\022\r\n\005acc_z\030"
    "\003 \001(\002\022\016\n\006gyro_x\030\004 \001(\002\022\016\n\006gyro_y\030\005 \001(\002\022\016\n"
    "\006gyro_z\030\006 \001(\002\022\023\n\013temperature\030\007 \001(\002\022\022\n\nti"
    "me_stamp\030\010 \002(\003\"\202\002\n\010GPSFrame\022\021\n\tlongitude"
    "\030\001 \002(\002\022\020\n\010latitude\030\002 \002(\002\022\022\n\ntime_stamp\030\003"
    " \002(\003\022\026\n\016longitude_cent\030\004 \001(\002\022\025\n\rlongitud"
    "e_dir\030\005 \001(\t\022\025\n\rlatitude_cent\030\006 \001(\002\022\024\n\014la"
    "titude_dir\030\007 \001(\t\022\024\n\014ground_speed\030\010 \001(\002\022\025"
    "\n\rground_course\030\t \001(\002\022\020\n\010gps_time\030\n \001(\003\022"
    "\020\n\010altitude\030\013 \001(\002\022\020\n\010accuracy\030\014 \001(\002\"V\n\013G"
    "PSFrameRaw\022\014\n\004info\030\001 \001(\t\022\022\n\ntime_stamp\030\002"
    " \002(\003\022%\n\006parsed\030\003 \001(\0132\025.SensorProto.GPSFr"
    "ame", 523);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sensor.proto", &protobuf_RegisterTypes);
  IMUFrame::default_instance_ = new IMUFrame();
  GPSFrame::default_instance_ = new GPSFrame();
  GPSFrameRaw::default_instance_ = new GPSFrameRaw();
  IMUFrame::default_instance_->InitAsDefaultInstance();
  GPSFrame::default_instance_->InitAsDefaultInstance();
  GPSFrameRaw::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sensor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sensor_2eproto {
  StaticDescriptorInitializer_sensor_2eproto() {
    protobuf_AddDesc_sensor_2eproto();
  }
} static_descriptor_initializer_sensor_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int IMUFrame::kAccXFieldNumber;
const int IMUFrame::kAccYFieldNumber;
const int IMUFrame::kAccZFieldNumber;
const int IMUFrame::kGyroXFieldNumber;
const int IMUFrame::kGyroYFieldNumber;
const int IMUFrame::kGyroZFieldNumber;
const int IMUFrame::kTemperatureFieldNumber;
const int IMUFrame::kTimeStampFieldNumber;
#endif  // !_MSC_VER

IMUFrame::IMUFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SensorProto.IMUFrame)
}

void IMUFrame::InitAsDefaultInstance() {
}

IMUFrame::IMUFrame(const IMUFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SensorProto.IMUFrame)
}

void IMUFrame::SharedCtor() {
  _cached_size_ = 0;
  acc_x_ = 0;
  acc_y_ = 0;
  acc_z_ = 0;
  gyro_x_ = 0;
  gyro_y_ = 0;
  gyro_z_ = 0;
  temperature_ = 0;
  time_stamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUFrame::~IMUFrame() {
  // @@protoc_insertion_point(destructor:SensorProto.IMUFrame)
  SharedDtor();
}

void IMUFrame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IMUFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMUFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMUFrame_descriptor_;
}

const IMUFrame& IMUFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensor_2eproto();
  return *default_instance_;
}

IMUFrame* IMUFrame::default_instance_ = NULL;

IMUFrame* IMUFrame::New() const {
  return new IMUFrame;
}

void IMUFrame::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMUFrame*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(acc_x_, temperature_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IMUFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SensorProto.IMUFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float acc_x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_x_)));
          set_has_acc_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_acc_y;
        break;
      }

      // optional float acc_y = 2;
      case 2: {
        if (tag == 21) {
         parse_acc_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_y_)));
          set_has_acc_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_acc_z;
        break;
      }

      // optional float acc_z = 3;
      case 3: {
        if (tag == 29) {
         parse_acc_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_z_)));
          set_has_acc_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_gyro_x;
        break;
      }

      // optional float gyro_x = 4;
      case 4: {
        if (tag == 37) {
         parse_gyro_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gyro_x_)));
          set_has_gyro_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_gyro_y;
        break;
      }

      // optional float gyro_y = 5;
      case 5: {
        if (tag == 45) {
         parse_gyro_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gyro_y_)));
          set_has_gyro_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_gyro_z;
        break;
      }

      // optional float gyro_z = 6;
      case 6: {
        if (tag == 53) {
         parse_gyro_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gyro_z_)));
          set_has_gyro_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_temperature;
        break;
      }

      // optional float temperature = 7;
      case 7: {
        if (tag == 61) {
         parse_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &temperature_)));
          set_has_temperature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_time_stamp;
        break;
      }

      // required int64 time_stamp = 8;
      case 8: {
        if (tag == 64) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SensorProto.IMUFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SensorProto.IMUFrame)
  return false;
#undef DO_
}

void IMUFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SensorProto.IMUFrame)
  // optional float acc_x = 1;
  if (has_acc_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->acc_x(), output);
  }

  // optional float acc_y = 2;
  if (has_acc_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->acc_y(), output);
  }

  // optional float acc_z = 3;
  if (has_acc_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->acc_z(), output);
  }

  // optional float gyro_x = 4;
  if (has_gyro_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->gyro_x(), output);
  }

  // optional float gyro_y = 5;
  if (has_gyro_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->gyro_y(), output);
  }

  // optional float gyro_z = 6;
  if (has_gyro_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->gyro_z(), output);
  }

  // optional float temperature = 7;
  if (has_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->temperature(), output);
  }

  // required int64 time_stamp = 8;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SensorProto.IMUFrame)
}

::google::protobuf::uint8* IMUFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SensorProto.IMUFrame)
  // optional float acc_x = 1;
  if (has_acc_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->acc_x(), target);
  }

  // optional float acc_y = 2;
  if (has_acc_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->acc_y(), target);
  }

  // optional float acc_z = 3;
  if (has_acc_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->acc_z(), target);
  }

  // optional float gyro_x = 4;
  if (has_gyro_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->gyro_x(), target);
  }

  // optional float gyro_y = 5;
  if (has_gyro_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->gyro_y(), target);
  }

  // optional float gyro_z = 6;
  if (has_gyro_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->gyro_z(), target);
  }

  // optional float temperature = 7;
  if (has_temperature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->temperature(), target);
  }

  // required int64 time_stamp = 8;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SensorProto.IMUFrame)
  return target;
}

int IMUFrame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float acc_x = 1;
    if (has_acc_x()) {
      total_size += 1 + 4;
    }

    // optional float acc_y = 2;
    if (has_acc_y()) {
      total_size += 1 + 4;
    }

    // optional float acc_z = 3;
    if (has_acc_z()) {
      total_size += 1 + 4;
    }

    // optional float gyro_x = 4;
    if (has_gyro_x()) {
      total_size += 1 + 4;
    }

    // optional float gyro_y = 5;
    if (has_gyro_y()) {
      total_size += 1 + 4;
    }

    // optional float gyro_z = 6;
    if (has_gyro_z()) {
      total_size += 1 + 4;
    }

    // optional float temperature = 7;
    if (has_temperature()) {
      total_size += 1 + 4;
    }

    // required int64 time_stamp = 8;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_stamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IMUFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IMUFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IMUFrame::MergeFrom(const IMUFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acc_x()) {
      set_acc_x(from.acc_x());
    }
    if (from.has_acc_y()) {
      set_acc_y(from.acc_y());
    }
    if (from.has_acc_z()) {
      set_acc_z(from.acc_z());
    }
    if (from.has_gyro_x()) {
      set_gyro_x(from.gyro_x());
    }
    if (from.has_gyro_y()) {
      set_gyro_y(from.gyro_y());
    }
    if (from.has_gyro_z()) {
      set_gyro_z(from.gyro_z());
    }
    if (from.has_temperature()) {
      set_temperature(from.temperature());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IMUFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMUFrame::CopyFrom(const IMUFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUFrame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000080) != 0x00000080) return false;

  return true;
}

void IMUFrame::Swap(IMUFrame* other) {
  if (other != this) {
    std::swap(acc_x_, other->acc_x_);
    std::swap(acc_y_, other->acc_y_);
    std::swap(acc_z_, other->acc_z_);
    std::swap(gyro_x_, other->gyro_x_);
    std::swap(gyro_y_, other->gyro_y_);
    std::swap(gyro_z_, other->gyro_z_);
    std::swap(temperature_, other->temperature_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IMUFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IMUFrame_descriptor_;
  metadata.reflection = IMUFrame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GPSFrame::kLongitudeFieldNumber;
const int GPSFrame::kLatitudeFieldNumber;
const int GPSFrame::kTimeStampFieldNumber;
const int GPSFrame::kLongitudeCentFieldNumber;
const int GPSFrame::kLongitudeDirFieldNumber;
const int GPSFrame::kLatitudeCentFieldNumber;
const int GPSFrame::kLatitudeDirFieldNumber;
const int GPSFrame::kGroundSpeedFieldNumber;
const int GPSFrame::kGroundCourseFieldNumber;
const int GPSFrame::kGpsTimeFieldNumber;
const int GPSFrame::kAltitudeFieldNumber;
const int GPSFrame::kAccuracyFieldNumber;
#endif  // !_MSC_VER

GPSFrame::GPSFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SensorProto.GPSFrame)
}

void GPSFrame::InitAsDefaultInstance() {
}

GPSFrame::GPSFrame(const GPSFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SensorProto.GPSFrame)
}

void GPSFrame::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  longitude_ = 0;
  latitude_ = 0;
  time_stamp_ = GOOGLE_LONGLONG(0);
  longitude_cent_ = 0;
  longitude_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latitude_cent_ = 0;
  latitude_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ground_speed_ = 0;
  ground_course_ = 0;
  gps_time_ = GOOGLE_LONGLONG(0);
  altitude_ = 0;
  accuracy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GPSFrame::~GPSFrame() {
  // @@protoc_insertion_point(destructor:SensorProto.GPSFrame)
  SharedDtor();
}

void GPSFrame::SharedDtor() {
  if (longitude_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete longitude_dir_;
  }
  if (latitude_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete latitude_dir_;
  }
  if (this != default_instance_) {
  }
}

void GPSFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPSFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPSFrame_descriptor_;
}

const GPSFrame& GPSFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensor_2eproto();
  return *default_instance_;
}

GPSFrame* GPSFrame::default_instance_ = NULL;

GPSFrame* GPSFrame::New() const {
  return new GPSFrame;
}

void GPSFrame::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GPSFrame*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(longitude_, time_stamp_);
    ZR_(longitude_cent_, latitude_cent_);
    if (has_longitude_dir()) {
      if (longitude_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        longitude_dir_->clear();
      }
    }
    if (has_latitude_dir()) {
      if (latitude_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        latitude_dir_->clear();
      }
    }
    ground_speed_ = 0;
  }
  ZR_(ground_course_, accuracy_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GPSFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SensorProto.GPSFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float longitude = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_latitude;
        break;
      }

      // required float latitude = 2;
      case 2: {
        if (tag == 21) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time_stamp;
        break;
      }

      // required int64 time_stamp = 3;
      case 3: {
        if (tag == 24) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_longitude_cent;
        break;
      }

      // optional float longitude_cent = 4;
      case 4: {
        if (tag == 37) {
         parse_longitude_cent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_cent_)));
          set_has_longitude_cent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_longitude_dir;
        break;
      }

      // optional string longitude_dir = 5;
      case 5: {
        if (tag == 42) {
         parse_longitude_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_longitude_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->longitude_dir().data(), this->longitude_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "longitude_dir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_latitude_cent;
        break;
      }

      // optional float latitude_cent = 6;
      case 6: {
        if (tag == 53) {
         parse_latitude_cent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_cent_)));
          set_has_latitude_cent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_latitude_dir;
        break;
      }

      // optional string latitude_dir = 7;
      case 7: {
        if (tag == 58) {
         parse_latitude_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_latitude_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->latitude_dir().data(), this->latitude_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "latitude_dir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_ground_speed;
        break;
      }

      // optional float ground_speed = 8;
      case 8: {
        if (tag == 69) {
         parse_ground_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ground_speed_)));
          set_has_ground_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_ground_course;
        break;
      }

      // optional float ground_course = 9;
      case 9: {
        if (tag == 77) {
         parse_ground_course:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ground_course_)));
          set_has_ground_course();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_gps_time;
        break;
      }

      // optional int64 gps_time = 10;
      case 10: {
        if (tag == 80) {
         parse_gps_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gps_time_)));
          set_has_gps_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_altitude;
        break;
      }

      // optional float altitude = 11;
      case 11: {
        if (tag == 93) {
         parse_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitude_)));
          set_has_altitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_accuracy;
        break;
      }

      // optional float accuracy = 12;
      case 12: {
        if (tag == 101) {
         parse_accuracy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accuracy_)));
          set_has_accuracy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SensorProto.GPSFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SensorProto.GPSFrame)
  return false;
#undef DO_
}

void GPSFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SensorProto.GPSFrame)
  // required float longitude = 1;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->longitude(), output);
  }

  // required float latitude = 2;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->latitude(), output);
  }

  // required int64 time_stamp = 3;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time_stamp(), output);
  }

  // optional float longitude_cent = 4;
  if (has_longitude_cent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->longitude_cent(), output);
  }

  // optional string longitude_dir = 5;
  if (has_longitude_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->longitude_dir().data(), this->longitude_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "longitude_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->longitude_dir(), output);
  }

  // optional float latitude_cent = 6;
  if (has_latitude_cent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->latitude_cent(), output);
  }

  // optional string latitude_dir = 7;
  if (has_latitude_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->latitude_dir().data(), this->latitude_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "latitude_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->latitude_dir(), output);
  }

  // optional float ground_speed = 8;
  if (has_ground_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->ground_speed(), output);
  }

  // optional float ground_course = 9;
  if (has_ground_course()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->ground_course(), output);
  }

  // optional int64 gps_time = 10;
  if (has_gps_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->gps_time(), output);
  }

  // optional float altitude = 11;
  if (has_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->altitude(), output);
  }

  // optional float accuracy = 12;
  if (has_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->accuracy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SensorProto.GPSFrame)
}

::google::protobuf::uint8* GPSFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SensorProto.GPSFrame)
  // required float longitude = 1;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->longitude(), target);
  }

  // required float latitude = 2;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->latitude(), target);
  }

  // required int64 time_stamp = 3;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time_stamp(), target);
  }

  // optional float longitude_cent = 4;
  if (has_longitude_cent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->longitude_cent(), target);
  }

  // optional string longitude_dir = 5;
  if (has_longitude_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->longitude_dir().data(), this->longitude_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "longitude_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->longitude_dir(), target);
  }

  // optional float latitude_cent = 6;
  if (has_latitude_cent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->latitude_cent(), target);
  }

  // optional string latitude_dir = 7;
  if (has_latitude_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->latitude_dir().data(), this->latitude_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "latitude_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->latitude_dir(), target);
  }

  // optional float ground_speed = 8;
  if (has_ground_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->ground_speed(), target);
  }

  // optional float ground_course = 9;
  if (has_ground_course()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->ground_course(), target);
  }

  // optional int64 gps_time = 10;
  if (has_gps_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->gps_time(), target);
  }

  // optional float altitude = 11;
  if (has_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->altitude(), target);
  }

  // optional float accuracy = 12;
  if (has_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->accuracy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SensorProto.GPSFrame)
  return target;
}

int GPSFrame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float longitude = 1;
    if (has_longitude()) {
      total_size += 1 + 4;
    }

    // required float latitude = 2;
    if (has_latitude()) {
      total_size += 1 + 4;
    }

    // required int64 time_stamp = 3;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_stamp());
    }

    // optional float longitude_cent = 4;
    if (has_longitude_cent()) {
      total_size += 1 + 4;
    }

    // optional string longitude_dir = 5;
    if (has_longitude_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->longitude_dir());
    }

    // optional float latitude_cent = 6;
    if (has_latitude_cent()) {
      total_size += 1 + 4;
    }

    // optional string latitude_dir = 7;
    if (has_latitude_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->latitude_dir());
    }

    // optional float ground_speed = 8;
    if (has_ground_speed()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float ground_course = 9;
    if (has_ground_course()) {
      total_size += 1 + 4;
    }

    // optional int64 gps_time = 10;
    if (has_gps_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gps_time());
    }

    // optional float altitude = 11;
    if (has_altitude()) {
      total_size += 1 + 4;
    }

    // optional float accuracy = 12;
    if (has_accuracy()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPSFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GPSFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GPSFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GPSFrame::MergeFrom(const GPSFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_longitude_cent()) {
      set_longitude_cent(from.longitude_cent());
    }
    if (from.has_longitude_dir()) {
      set_longitude_dir(from.longitude_dir());
    }
    if (from.has_latitude_cent()) {
      set_latitude_cent(from.latitude_cent());
    }
    if (from.has_latitude_dir()) {
      set_latitude_dir(from.latitude_dir());
    }
    if (from.has_ground_speed()) {
      set_ground_speed(from.ground_speed());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ground_course()) {
      set_ground_course(from.ground_course());
    }
    if (from.has_gps_time()) {
      set_gps_time(from.gps_time());
    }
    if (from.has_altitude()) {
      set_altitude(from.altitude());
    }
    if (from.has_accuracy()) {
      set_accuracy(from.accuracy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GPSFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPSFrame::CopyFrom(const GPSFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPSFrame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GPSFrame::Swap(GPSFrame* other) {
  if (other != this) {
    std::swap(longitude_, other->longitude_);
    std::swap(latitude_, other->latitude_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(longitude_cent_, other->longitude_cent_);
    std::swap(longitude_dir_, other->longitude_dir_);
    std::swap(latitude_cent_, other->latitude_cent_);
    std::swap(latitude_dir_, other->latitude_dir_);
    std::swap(ground_speed_, other->ground_speed_);
    std::swap(ground_course_, other->ground_course_);
    std::swap(gps_time_, other->gps_time_);
    std::swap(altitude_, other->altitude_);
    std::swap(accuracy_, other->accuracy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GPSFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GPSFrame_descriptor_;
  metadata.reflection = GPSFrame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GPSFrameRaw::kInfoFieldNumber;
const int GPSFrameRaw::kTimeStampFieldNumber;
const int GPSFrameRaw::kParsedFieldNumber;
#endif  // !_MSC_VER

GPSFrameRaw::GPSFrameRaw()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SensorProto.GPSFrameRaw)
}

void GPSFrameRaw::InitAsDefaultInstance() {
  parsed_ = const_cast< ::SensorProto::GPSFrame*>(&::SensorProto::GPSFrame::default_instance());
}

GPSFrameRaw::GPSFrameRaw(const GPSFrameRaw& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SensorProto.GPSFrameRaw)
}

void GPSFrameRaw::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_stamp_ = GOOGLE_LONGLONG(0);
  parsed_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GPSFrameRaw::~GPSFrameRaw() {
  // @@protoc_insertion_point(destructor:SensorProto.GPSFrameRaw)
  SharedDtor();
}

void GPSFrameRaw::SharedDtor() {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (this != default_instance_) {
    delete parsed_;
  }
}

void GPSFrameRaw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPSFrameRaw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPSFrameRaw_descriptor_;
}

const GPSFrameRaw& GPSFrameRaw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensor_2eproto();
  return *default_instance_;
}

GPSFrameRaw* GPSFrameRaw::default_instance_ = NULL;

GPSFrameRaw* GPSFrameRaw::New() const {
  return new GPSFrameRaw;
}

void GPSFrameRaw::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        info_->clear();
      }
    }
    time_stamp_ = GOOGLE_LONGLONG(0);
    if (has_parsed()) {
      if (parsed_ != NULL) parsed_->::SensorProto::GPSFrame::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GPSFrameRaw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SensorProto.GPSFrameRaw)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_stamp;
        break;
      }

      // required int64 time_stamp = 2;
      case 2: {
        if (tag == 16) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_parsed;
        break;
      }

      // optional .SensorProto.GPSFrame parsed = 3;
      case 3: {
        if (tag == 26) {
         parse_parsed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parsed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SensorProto.GPSFrameRaw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SensorProto.GPSFrameRaw)
  return false;
#undef DO_
}

void GPSFrameRaw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SensorProto.GPSFrameRaw)
  // optional string info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->info(), output);
  }

  // required int64 time_stamp = 2;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time_stamp(), output);
  }

  // optional .SensorProto.GPSFrame parsed = 3;
  if (has_parsed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->parsed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SensorProto.GPSFrameRaw)
}

::google::protobuf::uint8* GPSFrameRaw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SensorProto.GPSFrameRaw)
  // optional string info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->info(), target);
  }

  // required int64 time_stamp = 2;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time_stamp(), target);
  }

  // optional .SensorProto.GPSFrame parsed = 3;
  if (has_parsed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->parsed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SensorProto.GPSFrameRaw)
  return target;
}

int GPSFrameRaw::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

    // required int64 time_stamp = 2;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_stamp());
    }

    // optional .SensorProto.GPSFrame parsed = 3;
    if (has_parsed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parsed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPSFrameRaw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GPSFrameRaw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GPSFrameRaw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GPSFrameRaw::MergeFrom(const GPSFrameRaw& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      set_info(from.info());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_parsed()) {
      mutable_parsed()->::SensorProto::GPSFrame::MergeFrom(from.parsed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GPSFrameRaw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPSFrameRaw::CopyFrom(const GPSFrameRaw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPSFrameRaw::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_parsed()) {
    if (!this->parsed().IsInitialized()) return false;
  }
  return true;
}

void GPSFrameRaw::Swap(GPSFrameRaw* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(parsed_, other->parsed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GPSFrameRaw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GPSFrameRaw_descriptor_;
  metadata.reflection = GPSFrameRaw_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SensorProto

// @@protoc_insertion_point(global_scope)
